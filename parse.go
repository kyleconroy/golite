/* This file is automatically generated by Lemon from input grammar
** source file "parse.y". */
/*
** 2001-09-15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains SQLite's SQL parser.
**
** The canonical source code to this file ("parse.y") is a Lemon grammar 
** file that specifies the input grammar and actions to take while parsing.
** That input file is processed by Lemon to generate a C-language 
** implementation of a parser for the given grammer.  You might be reading
** this comment as part of the translated C-code.  Edits should be made
** to the original parse.y sources.
*/
//line 58 "parse.y"

package internal

import (
  "fmt"
  "io"
  "os"
)

/*
** Disable all error recovery processing in the parser push-down
** automaton.
*/

/*
** Make yytestcase() the same as testcase()
*/
func yytestcase(bool) {}
func testcase(bool) {}

/*
** Indicate that sqlite3ParserFree() will never be called with a null
** pointer.
*/
const YYPARSEFREENEVERNULL = 1

/*
** In the amalgamation, the parse.c file generated by lemon and the
** tokenize.c file are concatenated.  In that case, sqlite3RunParser()
** has access to the the size of the yyParser object and so the parser
** engine can be allocated from stack.  In that case, only the
** sqlite3ParserInit() and sqlite3ParserFinalize() routines are invoked
** and the sqlite3ParserAlloc() and sqlite3ParserFree() routines can be
** omitted.
*/

/*
** Alternative datatype for the argument to the malloc() routine passed
** into sqlite3ParserAlloc().  The default is size_t.
*/
type YYMALLOCARGTYPE uint64

type ctxDecl = Parse

/*
** An instance of the following structure describes the event of a
** TRIGGER.  "a" is the event type, one of TK_UPDATE, TK_INSERT,
** TK_DELETE, or TK_INSTEAD.  If the event is of the form
**
**      UPDATE ON (a,b,c)
**
** Then the "b" IdList records the list "a,b,c".
*/
type TrigEvent struct {
    a int
    b *IdList
}

type FrameBound struct {
    eType int
    pExpr *Expr
}

/*
** Disable lookaside memory allocation for objects that might be
** shared across database connections.
*/
func disableLookaside(pParse *Parse){
  // sqlite3 *db = pParse.db;
    pParse.disableLookaside += 1
  // DisableLookaside;
}

// #if !defined(SQLITE_ENABLE_UPDATE_DELETE_LIMIT) \
//  && defined(SQLITE_UDL_CAPABLE_PARSER)
// /*
// ** Issue an error message if an ORDER BY or LIMIT clause occurs on an
// ** UPDATE or DELETE statement.
// */
func updateDeleteLimitError(
  pParse *Parse,
  pOrderBy *ExprList,
  pLimit *Expr,
){
  // if( pOrderBy ){
  //   sqlite3ErrorMsg(pParse, "syntax error near \"ORDER BY\"");
  // }else{
  //   sqlite3ErrorMsg(pParse, "syntax error near \"LIMIT\"");
  // }
  // sqlite3ExprListDelete(pParse.db, pOrderBy);
  // sqlite3ExprDelete(pParse.db, pLimit);
}
// #endif /* SQLITE_ENABLE_UPDATE_DELETE_LIMIT */

//line 519 "parse.y"

  /*
  ** For a compound SELECT statement, make sure p->pPrior->pNext==p for
  ** all elements in the list.  And make sure list length does not exceed
  ** SQLITE_LIMIT_COMPOUND_SELECT.
  */
  func parserDoubleLinkSelect(pParse *Parse, p *Select){
    // assert( p!=0 );
    // if( p->pPrior ){
    //   Select *pNext = 0, *pLoop = p;
    //   int mxSelect, cnt = 1;
    //   while(1){
    //     pLoop->pNext = pNext;
    //     pLoop->selFlags |= SF_Compound;
    //     pNext = pLoop;
    //     pLoop = pLoop->pPrior;
    //     if( pLoop==0 ) break;
    //     cnt++;        
    //     if( pLoop->pOrderBy || pLoop->pLimit ){
    //       sqlite3ErrorMsg(pParse,"%s clause should come after %s not before",
    //          pLoop->pOrderBy!=0 ? "ORDER BY" : "LIMIT",
    //          sqlite3SelectOpName(pNext->op));
    //       break;
    //     }
    //   }
    //   if( (p->selFlags & SF_MultiValue)==0 && 
    //     (mxSelect = pParse.db->aLimit[SQLITE_LIMIT_COMPOUND_SELECT])>0 &&
    //     cnt>mxSelect
    //   ){
    //     sqlite3ErrorMsg(pParse, "too many terms in compound SELECT");
    //   }
    // }
  }

  /* Attach a With object describing the WITH clause to a Select
  ** object describing the query for which the WITH clause is a prefix.
  */
  func attachWithToSelect(pParse *Parse, pSelect *Select, pWith *With) *Select{
    if pSelect != nil {
      pSelect.pWith = pWith;
      // parserDoubleLinkSelect(pParse, pSelect);
    }else{
      // sqlite3WithDelete(pParse.db, pWith);
    }
    return pSelect;
  }
//line 1061 "parse.y"


  /* Construct a new Expr object from a single token */
  func tokenExpr(pParse *Parse, op int, t Token) *Expr{
    // Expr *p = sqlite3DbMallocRawNN(pParse.db, sizeof(Expr)+t.n+1);
    // if( p ){
    //   /* memset(p, 0, sizeof(Expr)); */
    //   p->op = (u8)op;
    //   p->affExpr = 0;
    //   p->flags = EP_Leaf;
    //   ExprClearVVAProperties(p);
    //   /* p->iAgg = -1; // Not required */
    //   p->pLeft = p->pRight = 0;
    //   p->pAggInfo = 0;
    //   memset(&p->x, 0, sizeof(p->x));
    //   memset(&p->y, 0, sizeof(p->y));
    //   p->op2 = 0;
    //   p->iTable = 0;
    //   p->iColumn = 0;
    //   p->u.zToken = (char*)&p[1];
    //   memcpy(p->u.zToken, t.z, t.n);
    //   p->u.zToken[t.n] = 0;
    //   p->w.iOfst = (int)(t.z - pParse->zTail);
    //   if( sqlite3Isquote(p->u.zToken[0]) ){
    //     sqlite3DequoteExpr(p);
    //   }
    // #if SQLITE_MAX_EXPR_DEPTH>0
    //   p->nHeight = 1;
    // #endif  
    //   if( IN_RENAME_OBJECT ){
    //     return (Expr*)sqlite3RenameTokenMap(pParse, (void*)p, &t);
    //   }
    // }
    // return p;
    return nil
  }

//line 1244 "parse.y"

  /* A routine to convert a binary TK_IS or TK_ISNOT expression into a
  ** unary TK_ISNULL or TK_NOTNULL expression. */
  func binaryToUnaryIfNull(pParse *Parse, pY *Expr, pA *Expr, op int){
    // sqlite3 *db = pParse.db;
    // if( pA && pY && pY->op==TK_NULL && !IN_RENAME_OBJECT ){
    //   pA->op = (u8)op;
    //   sqlite3ExprDelete(db, pA->pRight);
    //   pA->pRight = 0;
    // }
  }
//line 1479 "parse.y"

  /* Add a single new term to an ExprList that is used to store a
  ** list of identifiers.  Report an error if the ID list contains
  ** a COLLATE clause or an ASC or DESC keyword, except ignore the
  ** error while parsing a legacy schema.
  */
  func parserAddExprIdListTerm(
    pParse *Parse,
    pPrior *ExprList,
    pIdToken *Token,
    hasCollate int,
    sortOrder int,
  ) *ExprList {
    // ExprList *p = sqlite3ExprListAppend(pParse, pPrior, 0);
    // if( (hasCollate || sortOrder!=SQLITE_SO_UNDEFINED)
    //     && pParse.db->init.busy==0
    // ){
    //   sqlite3ErrorMsg(pParse, "syntax error after column name \"%.*s\"",
    //                      pIdToken->n, pIdToken->z);
    // }
    // sqlite3ExprListSetName(pParse, p, pIdToken, 1);
    return nil;
  }
//line 1962 "parse.y"

// #if TK_SPAN>255
// # error too many tokens in the grammar
// #endif
//line 279 "parse.go"

/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols.
***************** Begin token definitions *************************************/

const (
	TK_SEMI = 1
	TK_EXPLAIN = 2
	TK_QUERY = 3
	TK_PLAN = 4
	TK_BEGIN = 5
	TK_TRANSACTION = 6
	TK_DEFERRED = 7
	TK_IMMEDIATE = 8
	TK_EXCLUSIVE = 9
	TK_COMMIT = 10
	TK_END = 11
	TK_ROLLBACK = 12
	TK_SAVEPOINT = 13
	TK_RELEASE = 14
	TK_TO = 15
	TK_TABLE = 16
	TK_CREATE = 17
	TK_IF = 18
	TK_NOT = 19
	TK_EXISTS = 20
	TK_TEMP = 21
	TK_LP = 22
	TK_RP = 23
	TK_AS = 24
	TK_COMMA = 25
	TK_WITHOUT = 26
	TK_ABORT = 27
	TK_ACTION = 28
	TK_AFTER = 29
	TK_ANALYZE = 30
	TK_ASC = 31
	TK_ATTACH = 32
	TK_BEFORE = 33
	TK_BY = 34
	TK_CASCADE = 35
	TK_CAST = 36
	TK_CONFLICT = 37
	TK_DATABASE = 38
	TK_DESC = 39
	TK_DETACH = 40
	TK_EACH = 41
	TK_FAIL = 42
	TK_OR = 43
	TK_AND = 44
	TK_IS = 45
	TK_MATCH = 46
	TK_LIKE_KW = 47
	TK_BETWEEN = 48
	TK_IN = 49
	TK_ISNULL = 50
	TK_NOTNULL = 51
	TK_NE = 52
	TK_EQ = 53
	TK_GT = 54
	TK_LE = 55
	TK_LT = 56
	TK_GE = 57
	TK_ESCAPE = 58
	TK_ID = 59
	TK_COLUMNKW = 60
	TK_DO = 61
	TK_FOR = 62
	TK_IGNORE = 63
	TK_INITIALLY = 64
	TK_INSTEAD = 65
	TK_NO = 66
	TK_KEY = 67
	TK_OF = 68
	TK_OFFSET = 69
	TK_PRAGMA = 70
	TK_RAISE = 71
	TK_RECURSIVE = 72
	TK_REPLACE = 73
	TK_RESTRICT = 74
	TK_ROW = 75
	TK_ROWS = 76
	TK_TRIGGER = 77
	TK_VACUUM = 78
	TK_VIEW = 79
	TK_VIRTUAL = 80
	TK_WITH = 81
	TK_NULLS = 82
	TK_FIRST = 83
	TK_LAST = 84
	TK_CURRENT = 85
	TK_FOLLOWING = 86
	TK_PARTITION = 87
	TK_PRECEDING = 88
	TK_RANGE = 89
	TK_UNBOUNDED = 90
	TK_EXCLUDE = 91
	TK_GROUPS = 92
	TK_OTHERS = 93
	TK_TIES = 94
	TK_GENERATED = 95
	TK_ALWAYS = 96
	TK_MATERIALIZED = 97
	TK_REINDEX = 98
	TK_RENAME = 99
	TK_CTIME_KW = 100
	TK_ANY = 101
	TK_BITAND = 102
	TK_BITOR = 103
	TK_LSHIFT = 104
	TK_RSHIFT = 105
	TK_PLUS = 106
	TK_MINUS = 107
	TK_STAR = 108
	TK_SLASH = 109
	TK_REM = 110
	TK_CONCAT = 111
	TK_PTR = 112
	TK_COLLATE = 113
	TK_BITNOT = 114
	TK_ON = 115
	TK_INDEXED = 116
	TK_STRING = 117
	TK_JOIN_KW = 118
	TK_CONSTRAINT = 119
	TK_DEFAULT = 120
	TK_NULL = 121
	TK_PRIMARY = 122
	TK_UNIQUE = 123
	TK_CHECK = 124
	TK_REFERENCES = 125
	TK_AUTOINCR = 126
	TK_INSERT = 127
	TK_DELETE = 128
	TK_UPDATE = 129
	TK_SET = 130
	TK_DEFERRABLE = 131
	TK_FOREIGN = 132
	TK_DROP = 133
	TK_UNION = 134
	TK_ALL = 135
	TK_EXCEPT = 136
	TK_INTERSECT = 137
	TK_SELECT = 138
	TK_VALUES = 139
	TK_DISTINCT = 140
	TK_DOT = 141
	TK_FROM = 142
	TK_JOIN = 143
	TK_USING = 144
	TK_ORDER = 145
	TK_GROUP = 146
	TK_HAVING = 147
	TK_LIMIT = 148
	TK_WHERE = 149
	TK_RETURNING = 150
	TK_INTO = 151
	TK_NOTHING = 152
	TK_FLOAT = 153
	TK_BLOB = 154
	TK_INTEGER = 155
	TK_VARIABLE = 156
	TK_CASE = 157
	TK_WHEN = 158
	TK_THEN = 159
	TK_ELSE = 160
	TK_INDEX = 161
	TK_ALTER = 162
	TK_ADD = 163
	TK_WINDOW = 164
	TK_OVER = 165
	TK_FILTER = 166
	TK_COLUMN = 167
	TK_AGG_FUNCTION = 168
	TK_AGG_COLUMN = 169
	TK_TRUEFALSE = 170
	TK_ISNOT = 171
	TK_FUNCTION = 172
	TK_UMINUS = 173
	TK_UPLUS = 174
	TK_TRUTH = 175
	TK_REGISTER = 176
	TK_VECTOR = 177
	TK_SELECT_COLUMN = 178
	TK_IF_NULL_ROW = 179
	TK_ASTERISK = 180
	TK_SPAN = 181
	TK_ERROR = 182
	TK_SPACE = 183
	TK_ILLEGAL = 184
)

/**************** End token definitions ***************************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    sqlite3ParserTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is sqlite3ParserTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3ParserARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3ParserARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3ParserARG_PARAM     Code to pass %extra_argument as a subroutine parameter
**    sqlite3ParserARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3ParserARG_FETCH     Code to extract %extra_argument from yypParser
**    sqlite3ParserCTX_*         As sqlite3ParserARG_ except for %extra_context
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYNTOKEN           Number of terminal symbols
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
**    YY_MIN_REDUCE      Minimum value for reduce actions
**    YY_MAX_REDUCE      Maximum value for reduce actions
 */
/************* Begin control #defines *****************************************/
const YYNOCODE = 319

type YYCODETYPE = uint16
type YYACTIONTYPE = uint16
type sqlite3ParserTOKENTYPE = Token
type YYMINORTYPE struct {
	yyinit int
	yy0    sqlite3ParserTOKENTYPE
	yy79 []byte
	yy106 *IdList
	yy109 uint8
	yy121 TrigEvent
	yy157 *SrcList
	yy179 *Window
	yy236 uint16
	yy297 *Cte
	yy338 uint32
	yy357 *With
	yy361 *Select
	yy394 int
	yy429 *TriggerStep
	yy442 *Upsert
	yy533 struct {value int; mask int;}
	yy561 OnOrUsing
	yy600 FrameBound
	yy614 *ExprList
	yy634 *Expr
}

const YYWILDCARD = 101
const YYSTACKDEPTH = 100
const YYNOERRORRECOVERY = false
const YYCOVERAGE = false
const YYTRACKMAXSTACKDEPTH = false
const NDEBUG = false
const YYERRORSYMBOL = 0
const YYFALLBACK = true
const YYNSTATE = 570
const YYNRULE = 403
const YYNRULE_WITH_ACTION = 340
const YYNTOKEN = 185
const YY_MAX_SHIFT = 569
const YY_MIN_SHIFTREDUCE = 829
const YY_MAX_SHIFTREDUCE = 1231
const YY_ERROR_ACTION = 1232
const YY_ACCEPT_ACTION = 1233
const YY_NO_ACTION = 1234
const YY_MIN_REDUCE = 1235
const YY_MAX_REDUCE = 1637

/************* End control #defines *******************************************/

/* Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
 */

/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X.
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
const YY_ACTTAB_COUNT = 2064

var yy_action = []YYACTIONTYPE{
	/* 0 */ 562, 204, 562, 116, 112, 225, 562, 116, 112, 225,
	/* 10 */ 562, 1306, 373, 1285, 404, 556, 556, 556, 562, 405,
	/* 20 */ 374, 1306, 1268, 41, 41, 41, 41, 204, 1516, 71,
	/* 30 */ 71, 965, 415, 41, 41, 487, 299, 275, 299, 966,
	/* 40 */ 393, 71, 71, 123, 124, 114, 1209, 1209, 1042, 1045,
	/* 50 */ 1034, 1034, 121, 121, 122, 122, 122, 122, 472, 405,
	/* 60 */ 1233, 1, 1, 569, 2, 1237, 544, 116, 112, 225,
	/* 70 */ 313, 476, 142, 476, 520, 116, 112, 225, 525, 1319,
	/* 80 */ 413, 519, 138, 123, 124, 114, 1209, 1209, 1042, 1045,
	/* 90 */ 1034, 1034, 121, 121, 122, 122, 122, 122, 116, 112,
	/* 100 */ 225, 323, 120, 120, 120, 120, 119, 119, 118, 118,
	/* 110 */ 118, 117, 113, 440, 280, 280, 280, 280, 438, 438,
	/* 120 */ 438, 1557, 372, 1559, 1184, 371, 1155, 559, 1155, 559,
	/* 130 */ 405, 1557, 533, 255, 222, 440, 99, 141, 445, 312,
	/* 140 */ 553, 236, 120, 120, 120, 120, 119, 119, 118, 118,
	/* 150 */ 118, 117, 113, 440, 123, 124, 114, 1209, 1209, 1042,
	/* 160 */ 1045, 1034, 1034, 121, 121, 122, 122, 122, 122, 138,
	/* 170 */ 290, 1184, 335, 444, 118, 118, 118, 117, 113, 440,
	/* 180 */ 125, 1184, 1185, 1186, 144, 437, 436, 562, 117, 113,
	/* 190 */ 440, 122, 122, 122, 122, 115, 120, 120, 120, 120,
	/* 200 */ 119, 119, 118, 118, 118, 117, 113, 440, 450, 110,
	/* 210 */ 13, 13, 542, 120, 120, 120, 120, 119, 119, 118,
	/* 220 */ 118, 118, 117, 113, 440, 418, 312, 553, 1184, 1185,
	/* 230 */ 1186, 145, 1216, 405, 1216, 122, 122, 122, 122, 120,
	/* 240 */ 120, 120, 120, 119, 119, 118, 118, 118, 117, 113,
	/* 250 */ 440, 461, 338, 1031, 1031, 1043, 1046, 123, 124, 114,
	/* 260 */ 1209, 1209, 1042, 1045, 1034, 1034, 121, 121, 122, 122,
	/* 270 */ 122, 122, 1271, 518, 218, 1184, 562, 405, 220, 510,
	/* 280 */ 171, 80, 81, 120, 120, 120, 120, 119, 119, 118,
	/* 290 */ 118, 118, 117, 113, 440, 1001, 16, 16, 1184, 55,
	/* 300 */ 55, 123, 124, 114, 1209, 1209, 1042, 1045, 1034, 1034,
	/* 310 */ 121, 121, 122, 122, 122, 122, 120, 120, 120, 120,
	/* 320 */ 119, 119, 118, 118, 118, 117, 113, 440, 1035, 542,
	/* 330 */ 1184, 369, 1184, 1185, 1186, 248, 1426, 395, 500, 497,
	/* 340 */ 496, 108, 554, 560, 4, 920, 920, 429, 495, 336,
	/* 350 */ 456, 324, 356, 390, 1229, 1184, 1185, 1186, 557, 562,
	/* 360 */ 120, 120, 120, 120, 119, 119, 118, 118, 118, 117,
	/* 370 */ 113, 440, 280, 280, 365, 1570, 1597, 437, 436, 150,
	/* 380 */ 405, 441, 71, 71, 1278, 559, 1213, 1184, 1185, 1186,
	/* 390 */ 83, 1215, 267, 551, 539, 511, 1551, 562, 96, 1214,
	/* 400 */ 6, 1270, 468, 138, 123, 124, 114, 1209, 1209, 1042,
	/* 410 */ 1045, 1034, 1034, 121, 121, 122, 122, 122, 122, 544,
	/* 420 */ 13, 13, 1021, 503, 1216, 1184, 1216, 543, 106, 106,
	/* 430 */ 218, 562, 1230, 171, 562, 423, 107, 193, 441, 564,
	/* 440 */ 563, 426, 1542, 1011, 321, 545, 1184, 266, 283, 364,
	/* 450 */ 506, 359, 505, 253, 71, 71, 539, 71, 71, 355,
	/* 460 */ 312, 553, 1603, 120, 120, 120, 120, 119, 119, 118,
	/* 470 */ 118, 118, 117, 113, 440, 1011, 1011, 1013, 1014, 27,
	/* 480 */ 280, 280, 1184, 1185, 1186, 1150, 562, 1602, 405, 895,
	/* 490 */ 186, 544, 352, 559, 544, 931, 529, 513, 1150, 512,
	/* 500 */ 409, 1150, 546, 1184, 1185, 1186, 562, 540, 1544, 51,
	/* 510 */ 51, 210, 123, 124, 114, 1209, 1209, 1042, 1045, 1034,
	/* 520 */ 1034, 121, 121, 122, 122, 122, 122, 1184, 470, 56,
	/* 530 */ 56, 405, 280, 280, 1480, 501, 119, 119, 118, 118,
	/* 540 */ 118, 117, 113, 440, 1001, 559, 514, 213, 537, 1551,
	/* 550 */ 312, 553, 138, 6, 528, 123, 124, 114, 1209, 1209,
	/* 560 */ 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122, 122,
	/* 570 */ 1545, 120, 120, 120, 120, 119, 119, 118, 118, 118,
	/* 580 */ 117, 113, 440, 481, 1184, 1185, 1186, 478, 277, 1259,
	/* 590 */ 951, 248, 1184, 369, 500, 497, 496, 1184, 336, 565,
	/* 600 */ 1184, 565, 405, 288, 495, 951, 870, 187, 476, 312,
	/* 610 */ 553, 380, 286, 376, 120, 120, 120, 120, 119, 119,
	/* 620 */ 118, 118, 118, 117, 113, 440, 123, 124, 114, 1209,
	/* 630 */ 1209, 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122,
	/* 640 */ 122, 405, 390, 1128, 1184, 863, 98, 280, 280, 1184,
	/* 650 */ 1185, 1186, 369, 1085, 1184, 1185, 1186, 1184, 1185, 1186,
	/* 660 */ 559, 451, 32, 369, 229, 123, 124, 114, 1209, 1209,
	/* 670 */ 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122, 122,
	/* 680 */ 1425, 953, 562, 224, 952, 120, 120, 120, 120, 119,
	/* 690 */ 119, 118, 118, 118, 117, 113, 440, 1150, 224, 1184,
	/* 700 */ 153, 1184, 1185, 1186, 1543, 13, 13, 297, 951, 1224,
	/* 710 */ 1150, 149, 405, 1150, 369, 1573, 1168, 5, 365, 1570,
	/* 720 */ 425, 1230, 3, 951, 120, 120, 120, 120, 119, 119,
	/* 730 */ 118, 118, 118, 117, 113, 440, 123, 124, 114, 1209,
	/* 740 */ 1209, 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122,
	/* 750 */ 122, 405, 204, 561, 1184, 1022, 1184, 1185, 1186, 1184,
	/* 760 */ 384, 846, 151, 1542, 282, 398, 1090, 1090, 484, 562,
	/* 770 */ 461, 338, 1311, 1311, 1542, 123, 124, 114, 1209, 1209,
	/* 780 */ 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122, 122,
	/* 790 */ 127, 562, 13, 13, 370, 120, 120, 120, 120, 119,
	/* 800 */ 119, 118, 118, 118, 117, 113, 440, 298, 562, 449,
	/* 810 */ 524, 1184, 1185, 1186, 13, 13, 1184, 1185, 1186, 1289,
	/* 820 */ 459, 1259, 405, 1309, 1309, 1542, 1006, 449, 448, 196,
	/* 830 */ 295, 71, 71, 1257, 120, 120, 120, 120, 119, 119,
	/* 840 */ 118, 118, 118, 117, 113, 440, 123, 124, 114, 1209,
	/* 850 */ 1209, 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122,
	/* 860 */ 122, 405, 223, 1065, 1150, 280, 280, 415, 308, 274,
	/* 870 */ 274, 281, 281, 1411, 402, 401, 378, 1150, 559, 562,
	/* 880 */ 1150, 1188, 559, 1590, 559, 123, 124, 114, 1209, 1209,
	/* 890 */ 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122, 122,
	/* 900 */ 449, 1472, 13, 13, 1526, 120, 120, 120, 120, 119,
	/* 910 */ 119, 118, 118, 118, 117, 113, 440, 197, 562, 350,
	/* 920 */ 1576, 569, 2, 1237, 834, 835, 836, 1552, 313, 1204,
	/* 930 */ 142, 6, 405, 251, 250, 249, 202, 1319, 9, 1188,
	/* 940 */ 258, 71, 71, 420, 120, 120, 120, 120, 119, 119,
	/* 950 */ 118, 118, 118, 117, 113, 440, 123, 124, 114, 1209,
	/* 960 */ 1209, 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122,
	/* 970 */ 122, 562, 280, 280, 562, 1205, 405, 568, 309, 1237,
	/* 980 */ 345, 1288, 348, 415, 313, 559, 142, 487, 521, 1633,
	/* 990 */ 391, 367, 487, 1319, 70, 70, 1287, 71, 71, 236,
	/* 1000 */ 1317, 101, 114, 1209, 1209, 1042, 1045, 1034, 1034, 121,
	/* 1010 */ 121, 122, 122, 122, 122, 120, 120, 120, 120, 119,
	/* 1020 */ 119, 118, 118, 118, 117, 113, 440, 1106, 280, 280,
	/* 1030 */ 424, 444, 1515, 1205, 435, 280, 280, 1479, 1344, 307,
	/* 1040 */ 470, 559, 1107, 965, 487, 487, 213, 1255, 559, 1528,
	/* 1050 */ 562, 966, 203, 562, 1021, 236, 379, 1108, 515, 120,
	/* 1060 */ 120, 120, 120, 119, 119, 118, 118, 118, 117, 113,
	/* 1070 */ 440, 1012, 104, 71, 71, 1011, 13, 13, 906, 562,
	/* 1080 */ 1485, 562, 280, 280, 95, 522, 487, 444, 907, 1318,
	/* 1090 */ 1314, 541, 405, 280, 280, 559, 147, 205, 1485, 1487,
	/* 1100 */ 258, 446, 15, 15, 43, 43, 559, 1011, 1011, 1013,
	/* 1110 */ 439, 328, 405, 523, 12, 291, 123, 124, 114, 1209,
	/* 1120 */ 1209, 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122,
	/* 1130 */ 122, 343, 405, 858, 1524, 1205, 123, 124, 114, 1209,
	/* 1140 */ 1209, 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122,
	/* 1150 */ 122, 1129, 1631, 470, 1631, 367, 123, 111, 114, 1209,
	/* 1160 */ 1209, 1042, 1045, 1034, 1034, 121, 121, 122, 122, 122,
	/* 1170 */ 122, 1485, 325, 470, 327, 120, 120, 120, 120, 119,
	/* 1180 */ 119, 118, 118, 118, 117, 113, 440, 199, 1411, 562,
	/* 1190 */ 1286, 858, 460, 1205, 432, 120, 120, 120, 120, 119,
	/* 1200 */ 119, 118, 118, 118, 117, 113, 440, 547, 1129, 1632,
	/* 1210 */ 535, 1632, 57, 57, 886, 120, 120, 120, 120, 119,
	/* 1220 */ 119, 118, 118, 118, 117, 113, 440, 562, 294, 534,
	/* 1230 */ 1127, 1411, 1549, 1550, 1323, 405, 6, 6, 1161, 1260,
	/* 1240 */ 411, 316, 280, 280, 1411, 504, 559, 521, 296, 453,
	/* 1250 */ 44, 44, 562, 887, 12, 559, 326, 474, 421, 403,
	/* 1260 */ 124, 114, 1209, 1209, 1042, 1045, 1034, 1034, 121, 121,
	/* 1270 */ 122, 122, 122, 122, 562, 58, 58, 284, 1184, 1411,
	/* 1280 */ 492, 454, 388, 388, 387, 269, 385, 1127, 1548, 843,
	/* 1290 */ 1161, 403, 6, 562, 317, 1150, 466, 59, 59, 1547,
	/* 1300 */ 1106, 422, 230, 6, 319, 252, 536, 252, 1150, 427,
	/* 1310 */ 562, 1150, 318, 17, 483, 1107, 60, 60, 120, 120,
	/* 1320 */ 120, 120, 119, 119, 118, 118, 118, 117, 113, 440,
	/* 1330 */ 1108, 212, 477, 61, 61, 1184, 1185, 1186, 108, 554,
	/* 1340 */ 320, 4, 232, 452, 522, 562, 233, 452, 562, 433,
	/* 1350 */ 164, 550, 416, 137, 475, 557, 562, 289, 562, 1087,
	/* 1360 */ 562, 289, 562, 1087, 527, 562, 866, 8, 62, 62,
	/* 1370 */ 231, 45, 45, 562, 410, 562, 410, 562, 441, 46,
	/* 1380 */ 46, 47, 47, 49, 49, 50, 50, 195, 63, 63,
	/* 1390 */ 551, 562, 355, 562, 98, 482, 64, 64, 65, 65,
	/* 1400 */ 14, 14, 555, 411, 531, 406, 562, 1021, 562, 530,
	/* 1410 */ 312, 553, 312, 553, 66, 66, 129, 129, 562, 1021,
	/* 1420 */ 562, 508, 926, 866, 1012, 106, 106, 925, 1011, 67,
	/* 1430 */ 67, 52, 52, 107, 447, 441, 564, 563, 412, 173,
	/* 1440 */ 1011, 68, 68, 69, 69, 562, 463, 562, 926, 467,
	/* 1450 */ 1356, 279, 222, 925, 311, 1355, 403, 562, 455, 403,
	/* 1460 */ 1011, 1011, 1013, 235, 403, 84, 209, 1342, 53, 53,
	/* 1470 */ 159, 159, 1011, 1011, 1013, 1014, 27, 1575, 1172, 443,
	/* 1480 */ 160, 160, 284, 95, 105, 1531, 103, 388, 388, 387,
	/* 1490 */ 269, 385, 562, 873, 843, 877, 562, 108, 554, 462,
	/* 1500 */ 4, 562, 148, 30, 38, 562, 1124, 230, 392, 319,
	/* 1510 */ 108, 554, 523, 4, 557, 76, 76, 318, 562, 54,
	/* 1520 */ 54, 562, 333, 464, 72, 72, 329, 557, 130, 130,
	/* 1530 */ 562, 285, 1504, 562, 31, 1503, 562, 441, 334, 479,
	/* 1540 */ 98, 73, 73, 340, 157, 157, 292, 232, 1072, 551,
	/* 1550 */ 441, 873, 1352, 131, 131, 164, 132, 132, 137, 128,
	/* 1560 */ 128, 1564, 551, 531, 562, 315, 562, 344, 532, 1003,
	/* 1570 */ 469, 257, 257, 885, 884, 231, 531, 562, 1021, 562,
	/* 1580 */ 471, 530, 257, 363, 106, 106, 517, 158, 158, 152,
	/* 1590 */ 152, 1021, 107, 362, 441, 564, 563, 106, 106, 1011,
	/* 1600 */ 136, 136, 135, 135, 562, 107, 1072, 441, 564, 563,
	/* 1610 */ 406, 347, 1011, 562, 349, 312, 553, 562, 339, 562,
	/* 1620 */ 98, 493, 353, 254, 98, 892, 893, 133, 133, 351,
	/* 1630 */ 1302, 1011, 1011, 1013, 1014, 27, 134, 134, 1015, 447,
	/* 1640 */ 75, 75, 77, 77, 1011, 1011, 1013, 1014, 27, 1172,
	/* 1650 */ 443, 562, 358, 284, 108, 554, 368, 4, 388, 388,
	/* 1660 */ 387, 269, 385, 562, 1133, 843, 562, 1068, 956, 254,
	/* 1670 */ 257, 557, 968, 969, 74, 74, 549, 923, 230, 110,
	/* 1680 */ 319, 108, 554, 1084, 4, 1084, 42, 42, 318, 48,
	/* 1690 */ 48, 1083, 1365, 1083, 441, 856, 1015, 146, 557, 924,
	/* 1700 */ 1410, 110, 1338, 1350, 548, 1416, 551, 1267, 207, 1258,
	/* 1710 */ 1246, 1245, 1247, 1583, 11, 488, 272, 215, 232, 1335,
	/* 1720 */ 304, 441, 305, 306, 389, 228, 164, 1397, 1392, 137,
	/* 1730 */ 287, 331, 332, 551, 293, 1021, 1385, 337, 473, 200,
	/* 1740 */ 361, 106, 106, 930, 498, 1402, 231, 1401, 1285, 107,
	/* 1750 */ 396, 441, 564, 563, 219, 1476, 1011, 1347, 1475, 1348,
	/* 1760 */ 1346, 1345, 1021, 1224, 552, 1586, 261, 1221, 106, 106,
	/* 1770 */ 1523, 201, 383, 1521, 214, 414, 107, 83, 441, 564,
	/* 1780 */ 563, 406, 211, 1011, 175, 1398, 312, 553, 1011, 1011,
	/* 1790 */ 1013, 1014, 27, 226, 184, 169, 100, 554, 79, 4,
	/* 1800 */ 82, 457, 35, 179, 458, 177, 491, 238, 96, 1481,
	/* 1810 */ 447, 180, 1404, 557, 181, 1011, 1011, 1013, 1014, 27,
	/* 1820 */ 182, 1403, 394, 36, 465, 1406, 397, 188, 1470, 480,
	/* 1830 */ 242, 89, 1492, 486, 342, 244, 441, 273, 192, 346,
	/* 1840 */ 489, 245, 399, 1248, 428, 246, 507, 1296, 551, 91,
	/* 1850 */ 877, 1305, 1304, 220, 1601, 1295, 1303, 430, 431, 516,
	/* 1860 */ 1569, 259, 400, 302, 1600, 1275, 303, 260, 360, 1274,
	/* 1870 */ 1273, 1599, 366, 1555, 434, 1554, 1370, 1021, 1369, 542,
	/* 1880 */ 126, 10, 1456, 106, 106, 377, 102, 97, 310, 526,
	/* 1890 */ 34, 107, 566, 441, 564, 563, 1178, 271, 1011, 268,
	/* 1900 */ 270, 567, 1243, 1238, 206, 1328, 375, 381, 1327, 382,
	/* 1910 */ 407, 161, 174, 408, 1508, 1509, 143, 300, 830, 162,
	/* 1920 */ 1507, 1506, 163, 442, 208, 314, 227, 216, 217, 78,
	/* 1930 */ 1011, 1011, 1013, 1014, 27, 140, 1082, 322, 1080, 165,
	/* 1940 */ 176, 1204, 234, 178, 909, 330, 237, 1096, 183, 166,
	/* 1950 */ 167, 417, 85, 86, 419, 185, 87, 88, 168, 1099,
	/* 1960 */ 239, 1095, 240, 154, 18, 241, 341, 1218, 257, 1088,
	/* 1970 */ 243, 485, 190, 189, 37, 845, 490, 362, 247, 494,
	/* 1980 */ 357, 191, 875, 90, 19, 502, 354, 20, 499, 92,
	/* 1990 */ 170, 155, 888, 93, 301, 509, 94, 1166, 156, 1048,
	/* 2000 */ 1135, 39, 221, 1134, 276, 278, 256, 194, 110, 960,
	/* 2010 */ 954, 1156, 21, 1152, 22, 1160, 1140, 1154, 23, 33,
	/* 2020 */ 24, 1159, 25, 538, 26, 198, 98, 1063, 1049, 1047,
	/* 2030 */ 1051, 7, 1105, 262, 1104, 263, 1052, 28, 40, 558,
	/* 2040 */ 1016, 857, 109, 29, 919, 386, 139, 172, 264, 265,
	/* 2050 */ 1174, 1592, 1173, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
	/* 2060 */ 1234, 1234, 1234, 1591,
}
var yy_lookahead = []YYCODETYPE{
	/* 0 */ 193, 193, 193, 274, 275, 276, 193, 274, 275, 276,
	/* 10 */ 193, 223, 219, 225, 206, 210, 211, 212, 193, 19,
	/* 20 */ 219, 233, 216, 216, 217, 216, 217, 193, 295, 216,
	/* 30 */ 217, 31, 193, 216, 217, 193, 228, 213, 230, 39,
	/* 40 */ 206, 216, 217, 43, 44, 45, 46, 47, 48, 49,
	/* 50 */ 50, 51, 52, 53, 54, 55, 56, 57, 193, 19,
	/* 60 */ 185, 186, 187, 188, 189, 190, 253, 274, 275, 276,
	/* 70 */ 195, 193, 197, 193, 261, 274, 275, 276, 253, 204,
	/* 80 */ 238, 204, 81, 43, 44, 45, 46, 47, 48, 49,
	/* 90 */ 50, 51, 52, 53, 54, 55, 56, 57, 274, 275,
	/* 100 */ 276, 262, 102, 103, 104, 105, 106, 107, 108, 109,
	/* 110 */ 110, 111, 112, 113, 239, 240, 239, 240, 210, 211,
	/* 120 */ 212, 314, 315, 314, 59, 316, 86, 252, 88, 252,
	/* 130 */ 19, 314, 315, 256, 257, 113, 25, 72, 296, 138,
	/* 140 */ 139, 266, 102, 103, 104, 105, 106, 107, 108, 109,
	/* 150 */ 110, 111, 112, 113, 43, 44, 45, 46, 47, 48,
	/* 160 */ 49, 50, 51, 52, 53, 54, 55, 56, 57, 81,
	/* 170 */ 292, 59, 292, 298, 108, 109, 110, 111, 112, 113,
	/* 180 */ 69, 116, 117, 118, 72, 106, 107, 193, 111, 112,
	/* 190 */ 113, 54, 55, 56, 57, 58, 102, 103, 104, 105,
	/* 200 */ 106, 107, 108, 109, 110, 111, 112, 113, 120, 25,
	/* 210 */ 216, 217, 145, 102, 103, 104, 105, 106, 107, 108,
	/* 220 */ 109, 110, 111, 112, 113, 231, 138, 139, 116, 117,
	/* 230 */ 118, 164, 153, 19, 155, 54, 55, 56, 57, 102,
	/* 240 */ 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	/* 250 */ 113, 128, 129, 46, 47, 48, 49, 43, 44, 45,
	/* 260 */ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	/* 270 */ 56, 57, 216, 193, 25, 59, 193, 19, 165, 166,
	/* 280 */ 193, 67, 24, 102, 103, 104, 105, 106, 107, 108,
	/* 290 */ 109, 110, 111, 112, 113, 73, 216, 217, 59, 216,
	/* 300 */ 217, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	/* 310 */ 52, 53, 54, 55, 56, 57, 102, 103, 104, 105,
	/* 320 */ 106, 107, 108, 109, 110, 111, 112, 113, 121, 145,
	/* 330 */ 59, 193, 116, 117, 118, 119, 273, 204, 122, 123,
	/* 340 */ 124, 19, 20, 134, 22, 136, 137, 19, 132, 127,
	/* 350 */ 128, 129, 24, 22, 23, 116, 117, 118, 36, 193,
	/* 360 */ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	/* 370 */ 112, 113, 239, 240, 311, 312, 215, 106, 107, 241,
	/* 380 */ 19, 59, 216, 217, 223, 252, 115, 116, 117, 118,
	/* 390 */ 151, 120, 26, 71, 193, 308, 309, 193, 149, 128,
	/* 400 */ 313, 216, 269, 81, 43, 44, 45, 46, 47, 48,
	/* 410 */ 49, 50, 51, 52, 53, 54, 55, 56, 57, 253,
	/* 420 */ 216, 217, 100, 95, 153, 59, 155, 261, 106, 107,
	/* 430 */ 25, 193, 101, 193, 193, 231, 114, 25, 116, 117,
	/* 440 */ 118, 113, 304, 121, 193, 204, 59, 119, 120, 121,
	/* 450 */ 122, 123, 124, 125, 216, 217, 193, 216, 217, 131,
	/* 460 */ 138, 139, 230, 102, 103, 104, 105, 106, 107, 108,
	/* 470 */ 109, 110, 111, 112, 113, 153, 154, 155, 156, 157,
	/* 480 */ 239, 240, 116, 117, 118, 76, 193, 23, 19, 25,
	/* 490 */ 22, 253, 23, 252, 253, 108, 87, 204, 89, 261,
	/* 500 */ 198, 92, 261, 116, 117, 118, 193, 306, 307, 216,
	/* 510 */ 217, 150, 43, 44, 45, 46, 47, 48, 49, 50,
	/* 520 */ 51, 52, 53, 54, 55, 56, 57, 59, 193, 216,
	/* 530 */ 217, 19, 239, 240, 283, 23, 106, 107, 108, 109,
	/* 540 */ 110, 111, 112, 113, 73, 252, 253, 142, 308, 309,
	/* 550 */ 138, 139, 81, 313, 145, 43, 44, 45, 46, 47,
	/* 560 */ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	/* 570 */ 307, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	/* 580 */ 111, 112, 113, 281, 116, 117, 118, 285, 23, 193,
	/* 590 */ 25, 119, 59, 193, 122, 123, 124, 59, 127, 203,
	/* 600 */ 59, 205, 19, 268, 132, 25, 23, 22, 193, 138,
	/* 610 */ 139, 249, 204, 251, 102, 103, 104, 105, 106, 107,
	/* 620 */ 108, 109, 110, 111, 112, 113, 43, 44, 45, 46,
	/* 630 */ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	/* 640 */ 57, 19, 22, 23, 59, 23, 25, 239, 240, 116,
	/* 650 */ 117, 118, 193, 11, 116, 117, 118, 116, 117, 118,
	/* 660 */ 252, 269, 22, 193, 15, 43, 44, 45, 46, 47,
	/* 670 */ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	/* 680 */ 273, 143, 193, 118, 143, 102, 103, 104, 105, 106,
	/* 690 */ 107, 108, 109, 110, 111, 112, 113, 76, 118, 59,
	/* 700 */ 241, 116, 117, 118, 304, 216, 217, 292, 143, 60,
	/* 710 */ 89, 241, 19, 92, 193, 193, 23, 22, 311, 312,
	/* 720 */ 231, 101, 22, 143, 102, 103, 104, 105, 106, 107,
	/* 730 */ 108, 109, 110, 111, 112, 113, 43, 44, 45, 46,
	/* 740 */ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	/* 750 */ 57, 19, 193, 193, 59, 23, 116, 117, 118, 59,
	/* 760 */ 201, 21, 241, 304, 22, 206, 127, 128, 129, 193,
	/* 770 */ 128, 129, 235, 236, 304, 43, 44, 45, 46, 47,
	/* 780 */ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	/* 790 */ 22, 193, 216, 217, 193, 102, 103, 104, 105, 106,
	/* 800 */ 107, 108, 109, 110, 111, 112, 113, 231, 193, 193,
	/* 810 */ 193, 116, 117, 118, 216, 217, 116, 117, 118, 226,
	/* 820 */ 80, 193, 19, 235, 236, 304, 23, 211, 212, 231,
	/* 830 */ 204, 216, 217, 205, 102, 103, 104, 105, 106, 107,
	/* 840 */ 108, 109, 110, 111, 112, 113, 43, 44, 45, 46,
	/* 850 */ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	/* 860 */ 57, 19, 193, 123, 76, 239, 240, 193, 253, 239,
	/* 870 */ 240, 239, 240, 193, 106, 107, 193, 89, 252, 193,
	/* 880 */ 92, 59, 252, 141, 252, 43, 44, 45, 46, 47,
	/* 890 */ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	/* 900 */ 284, 161, 216, 217, 193, 102, 103, 104, 105, 106,
	/* 910 */ 107, 108, 109, 110, 111, 112, 113, 231, 193, 16,
	/* 920 */ 187, 188, 189, 190, 7, 8, 9, 309, 195, 25,
	/* 930 */ 197, 313, 19, 127, 128, 129, 262, 204, 22, 117,
	/* 940 */ 24, 216, 217, 263, 102, 103, 104, 105, 106, 107,
	/* 950 */ 108, 109, 110, 111, 112, 113, 43, 44, 45, 46,
	/* 960 */ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	/* 970 */ 57, 193, 239, 240, 193, 59, 19, 188, 253, 190,
	/* 980 */ 77, 226, 79, 193, 195, 252, 197, 193, 19, 301,
	/* 990 */ 302, 193, 193, 204, 216, 217, 226, 216, 217, 266,
	/* 1000 */ 204, 159, 45, 46, 47, 48, 49, 50, 51, 52,
	/* 1010 */ 53, 54, 55, 56, 57, 102, 103, 104, 105, 106,
	/* 1020 */ 107, 108, 109, 110, 111, 112, 113, 12, 239, 240,
	/* 1030 */ 232, 298, 238, 117, 253, 239, 240, 238, 259, 260,
	/* 1040 */ 193, 252, 27, 31, 193, 193, 142, 204, 252, 193,
	/* 1050 */ 193, 39, 262, 193, 100, 266, 278, 42, 204, 102,
	/* 1060 */ 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	/* 1070 */ 113, 117, 159, 216, 217, 121, 216, 217, 63, 193,
	/* 1080 */ 193, 193, 239, 240, 115, 116, 193, 298, 73, 238,
	/* 1090 */ 238, 231, 19, 239, 240, 252, 22, 24, 211, 212,
	/* 1100 */ 24, 193, 216, 217, 216, 217, 252, 153, 154, 155,
	/* 1110 */ 253, 16, 19, 144, 213, 268, 43, 44, 45, 46,
	/* 1120 */ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	/* 1130 */ 57, 238, 19, 59, 193, 59, 43, 44, 45, 46,
	/* 1140 */ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	/* 1150 */ 57, 22, 23, 193, 25, 193, 43, 44, 45, 46,
	/* 1160 */ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	/* 1170 */ 57, 284, 77, 193, 79, 102, 103, 104, 105, 106,
	/* 1180 */ 107, 108, 109, 110, 111, 112, 113, 286, 193, 193,
	/* 1190 */ 193, 117, 291, 117, 232, 102, 103, 104, 105, 106,
	/* 1200 */ 107, 108, 109, 110, 111, 112, 113, 204, 22, 23,
	/* 1210 */ 66, 25, 216, 217, 35, 102, 103, 104, 105, 106,
	/* 1220 */ 107, 108, 109, 110, 111, 112, 113, 193, 268, 85,
	/* 1230 */ 101, 193, 309, 309, 240, 19, 313, 313, 94, 208,
	/* 1240 */ 209, 193, 239, 240, 193, 66, 252, 19, 268, 244,
	/* 1250 */ 216, 217, 193, 74, 213, 252, 161, 19, 263, 254,
	/* 1260 */ 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	/* 1270 */ 54, 55, 56, 57, 193, 216, 217, 5, 59, 193,
	/* 1280 */ 19, 244, 10, 11, 12, 13, 14, 101, 309, 17,
	/* 1290 */ 146, 254, 313, 193, 193, 76, 115, 216, 217, 309,
	/* 1300 */ 12, 263, 30, 313, 32, 46, 87, 46, 89, 130,
	/* 1310 */ 193, 92, 40, 22, 263, 27, 216, 217, 102, 103,
	/* 1320 */ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	/* 1330 */ 42, 150, 291, 216, 217, 116, 117, 118, 19, 20,
	/* 1340 */ 193, 22, 70, 260, 116, 193, 24, 264, 193, 263,
	/* 1350 */ 78, 63, 61, 81, 116, 36, 193, 260, 193, 29,
	/* 1360 */ 193, 264, 193, 33, 145, 193, 59, 48, 216, 217,
	/* 1370 */ 98, 216, 217, 193, 115, 193, 115, 193, 59, 216,
	/* 1380 */ 217, 216, 217, 216, 217, 216, 217, 255, 216, 217,
	/* 1390 */ 71, 193, 131, 193, 25, 65, 216, 217, 216, 217,
	/* 1400 */ 216, 217, 208, 209, 85, 133, 193, 100, 193, 90,
	/* 1410 */ 138, 139, 138, 139, 216, 217, 216, 217, 193, 100,
	/* 1420 */ 193, 108, 135, 116, 117, 106, 107, 140, 121, 216,
	/* 1430 */ 217, 216, 217, 114, 162, 116, 117, 118, 299, 300,
	/* 1440 */ 121, 216, 217, 216, 217, 193, 244, 193, 135, 244,
	/* 1450 */ 193, 256, 257, 140, 244, 193, 254, 193, 193, 254,
	/* 1460 */ 153, 154, 155, 141, 254, 149, 150, 258, 216, 217,
	/* 1470 */ 216, 217, 153, 154, 155, 156, 157, 0, 1, 2,
	/* 1480 */ 216, 217, 5, 115, 158, 193, 160, 10, 11, 12,
	/* 1490 */ 13, 14, 193, 59, 17, 126, 193, 19, 20, 129,
	/* 1500 */ 22, 193, 22, 22, 24, 193, 23, 30, 25, 32,
	/* 1510 */ 19, 20, 144, 22, 36, 216, 217, 40, 193, 216,
	/* 1520 */ 217, 193, 152, 129, 216, 217, 193, 36, 216, 217,
	/* 1530 */ 193, 99, 193, 193, 53, 193, 193, 59, 23, 193,
	/* 1540 */ 25, 216, 217, 193, 216, 217, 152, 70, 59, 71,
	/* 1550 */ 59, 117, 193, 216, 217, 78, 216, 217, 81, 216,
	/* 1560 */ 217, 318, 71, 85, 193, 133, 193, 193, 90, 23,
	/* 1570 */ 23, 25, 25, 120, 121, 98, 85, 193, 100, 193,
	/* 1580 */ 23, 90, 25, 121, 106, 107, 19, 216, 217, 216,
	/* 1590 */ 217, 100, 114, 131, 116, 117, 118, 106, 107, 121,
	/* 1600 */ 216, 217, 216, 217, 193, 114, 117, 116, 117, 118,
	/* 1610 */ 133, 193, 121, 193, 193, 138, 139, 193, 23, 193,
	/* 1620 */ 25, 23, 23, 25, 25, 7, 8, 216, 217, 193,
	/* 1630 */ 193, 153, 154, 155, 156, 157, 216, 217, 59, 162,
	/* 1640 */ 216, 217, 216, 217, 153, 154, 155, 156, 157, 1,
	/* 1650 */ 2, 193, 193, 5, 19, 20, 193, 22, 10, 11,
	/* 1660 */ 12, 13, 14, 193, 97, 17, 193, 23, 23, 25,
	/* 1670 */ 25, 36, 83, 84, 216, 217, 236, 23, 30, 25,
	/* 1680 */ 32, 19, 20, 153, 22, 155, 216, 217, 40, 216,
	/* 1690 */ 217, 153, 193, 155, 59, 23, 117, 25, 36, 23,
	/* 1700 */ 193, 25, 193, 193, 193, 193, 71, 193, 242, 193,
	/* 1710 */ 193, 193, 193, 193, 243, 288, 287, 214, 70, 255,
	/* 1720 */ 255, 59, 255, 255, 191, 297, 78, 271, 267, 81,
	/* 1730 */ 245, 293, 246, 71, 246, 100, 267, 245, 293, 249,
	/* 1740 */ 219, 106, 107, 108, 220, 271, 98, 271, 225, 114,
	/* 1750 */ 271, 116, 117, 118, 229, 219, 121, 259, 219, 259,
	/* 1760 */ 259, 259, 100, 60, 280, 196, 141, 38, 106, 107,
	/* 1770 */ 200, 249, 245, 200, 243, 200, 114, 151, 116, 117,
	/* 1780 */ 118, 133, 150, 121, 297, 272, 138, 139, 153, 154,
	/* 1790 */ 155, 156, 157, 297, 22, 43, 19, 20, 294, 22,
	/* 1800 */ 294, 18, 270, 237, 200, 234, 18, 199, 149, 283,
	/* 1810 */ 162, 237, 272, 36, 237, 153, 154, 155, 156, 157,
	/* 1820 */ 237, 272, 246, 270, 246, 234, 246, 234, 246, 200,
	/* 1830 */ 199, 158, 290, 62, 289, 199, 59, 200, 22, 200,
	/* 1840 */ 221, 199, 221, 200, 64, 199, 115, 227, 71, 22,
	/* 1850 */ 126, 218, 218, 165, 224, 227, 218, 24, 113, 305,
	/* 1860 */ 312, 200, 221, 282, 224, 218, 282, 91, 218, 220,
	/* 1870 */ 218, 218, 221, 317, 82, 317, 265, 100, 265, 145,
	/* 1880 */ 148, 22, 277, 106, 107, 200, 158, 147, 279, 146,
	/* 1890 */ 25, 114, 202, 116, 117, 118, 13, 6, 121, 194,
	/* 1900 */ 194, 192, 192, 192, 248, 250, 249, 247, 250, 246,
	/* 1910 */ 303, 207, 300, 303, 213, 213, 222, 222, 4, 207,
	/* 1920 */ 213, 213, 207, 3, 22, 163, 15, 214, 214, 213,
	/* 1930 */ 153, 154, 155, 156, 157, 16, 23, 139, 23, 130,
	/* 1940 */ 151, 25, 24, 142, 20, 16, 144, 1, 142, 130,
	/* 1950 */ 130, 61, 53, 53, 37, 151, 53, 53, 130, 116,
	/* 1960 */ 34, 1, 141, 5, 22, 115, 161, 75, 25, 68,
	/* 1970 */ 141, 41, 115, 68, 24, 20, 19, 131, 125, 67,
	/* 1980 */ 24, 22, 59, 22, 22, 96, 23, 22, 67, 22,
	/* 1990 */ 37, 23, 28, 149, 67, 22, 25, 23, 23, 23,
	/* 2000 */ 23, 22, 141, 97, 23, 23, 34, 22, 25, 116,
	/* 2010 */ 143, 75, 34, 88, 34, 75, 23, 86, 34, 22,
	/* 2020 */ 34, 93, 34, 24, 34, 25, 25, 23, 23, 23,
	/* 2030 */ 23, 44, 23, 25, 23, 22, 11, 22, 22, 25,
	/* 2040 */ 23, 23, 22, 22, 135, 15, 23, 25, 141, 141,
	/* 2050 */ 1, 141, 1, 319, 319, 319, 319, 319, 319, 319,
	/* 2060 */ 319, 319, 319, 141, 319, 319, 319, 319, 319, 319,
	/* 2070 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2080 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2090 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2100 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2110 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2120 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2130 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2140 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2150 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2160 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2170 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2180 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2190 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2200 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2210 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2220 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2230 */ 319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	/* 2240 */ 319, 319, 319, 319, 319, 319, 319, 319, 319,
}

const YY_SHIFT_COUNT = 569
const YY_SHIFT_MIN = 0
const YY_SHIFT_MAX = 2051

var yy_shift_ofst = []uint16{
	/* 0 */ 1648, 1477, 1272, 322, 322, 1, 1319, 1478, 1491, 1662,
	/* 10 */ 1662, 1662, 471, 0, 0, 214, 1093, 1662, 1662, 1662,
	/* 20 */ 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
	/* 30 */ 271, 271, 1219, 1219, 216, 88, 1, 1, 1, 1,
	/* 40 */ 1, 40, 111, 258, 361, 469, 512, 583, 622, 693,
	/* 50 */ 732, 803, 842, 913, 1073, 1093, 1093, 1093, 1093, 1093,
	/* 60 */ 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
	/* 70 */ 1093, 1093, 1093, 1113, 1093, 1216, 957, 957, 1635, 1662,
	/* 80 */ 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
	/* 90 */ 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
	/* 100 */ 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
	/* 110 */ 1662, 1662, 1662, 1662, 1777, 1662, 1662, 1662, 1662, 1662,
	/* 120 */ 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 137, 181,
	/* 130 */ 181, 181, 181, 181, 94, 430, 66, 65, 112, 366,
	/* 140 */ 533, 533, 740, 1261, 533, 533, 79, 79, 533, 412,
	/* 150 */ 412, 412, 77, 412, 123, 113, 113, 22, 22, 2064,
	/* 160 */ 2064, 328, 328, 328, 239, 468, 468, 468, 468, 1015,
	/* 170 */ 1015, 409, 366, 1129, 1186, 533, 533, 533, 533, 533,
	/* 180 */ 533, 533, 533, 533, 533, 533, 533, 533, 533, 533,
	/* 190 */ 533, 533, 533, 533, 533, 969, 621, 621, 533, 642,
	/* 200 */ 788, 788, 1228, 1228, 822, 822, 67, 1274, 2064, 2064,
	/* 210 */ 2064, 2064, 2064, 2064, 2064, 1307, 954, 954, 585, 472,
	/* 220 */ 640, 387, 695, 538, 541, 700, 533, 533, 533, 533,
	/* 230 */ 533, 533, 533, 533, 533, 533, 222, 533, 533, 533,
	/* 240 */ 533, 533, 533, 533, 533, 533, 533, 533, 533, 1179,
	/* 250 */ 1179, 1179, 533, 533, 533, 565, 533, 533, 533, 916,
	/* 260 */ 1144, 533, 533, 1288, 533, 533, 533, 533, 533, 533,
	/* 270 */ 533, 533, 639, 1330, 209, 1076, 1076, 1076, 1076, 580,
	/* 280 */ 209, 209, 1313, 768, 917, 649, 1181, 1316, 405, 1316,
	/* 290 */ 1238, 249, 1181, 1181, 249, 1181, 405, 1238, 1369, 464,
	/* 300 */ 1259, 1012, 1012, 1012, 1368, 1368, 1368, 1368, 184, 184,
	/* 310 */ 1326, 904, 1287, 1480, 1703, 1703, 1625, 1625, 1729, 1729,
	/* 320 */ 1625, 1626, 1632, 1772, 1752, 1783, 1783, 1783, 1783, 1625,
	/* 330 */ 1788, 1659, 1632, 1632, 1659, 1772, 1752, 1659, 1752, 1659,
	/* 340 */ 1625, 1788, 1673, 1771, 1625, 1788, 1816, 1625, 1788, 1625,
	/* 350 */ 1788, 1816, 1731, 1731, 1731, 1780, 1827, 1827, 1816, 1731,
	/* 360 */ 1724, 1731, 1780, 1731, 1731, 1688, 1833, 1745, 1745, 1816,
	/* 370 */ 1625, 1776, 1776, 1792, 1792, 1732, 1734, 1859, 1625, 1728,
	/* 380 */ 1732, 1740, 1743, 1659, 1865, 1883, 1883, 1891, 1891, 1891,
	/* 390 */ 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064,
	/* 400 */ 2064, 2064, 2064, 2064, 2064, 207, 1095, 331, 620, 903,
	/* 410 */ 806, 1074, 1483, 1432, 1481, 1322, 1370, 1394, 1515, 1291,
	/* 420 */ 1546, 1547, 1557, 1595, 1598, 1599, 1434, 1453, 1618, 1462,
	/* 430 */ 1567, 1489, 1644, 1645, 1589, 1654, 1530, 1538, 1672, 1676,
	/* 440 */ 1579, 742, 1914, 1920, 1902, 1762, 1911, 1919, 1913, 1915,
	/* 450 */ 1798, 1789, 1809, 1916, 1916, 1918, 1801, 1924, 1802, 1929,
	/* 460 */ 1946, 1806, 1819, 1916, 1820, 1890, 1917, 1916, 1804, 1899,
	/* 470 */ 1900, 1903, 1904, 1828, 1843, 1926, 1821, 1960, 1958, 1942,
	/* 480 */ 1850, 1805, 1901, 1943, 1905, 1892, 1930, 1829, 1857, 1950,
	/* 490 */ 1955, 1957, 1846, 1853, 1959, 1912, 1961, 1962, 1963, 1965,
	/* 500 */ 1921, 1923, 1956, 1889, 1964, 1967, 1927, 1953, 1968, 1844,
	/* 510 */ 1973, 1974, 1975, 1976, 1971, 1977, 1979, 1906, 1861, 1981,
	/* 520 */ 1982, 1893, 1972, 1985, 1867, 1983, 1978, 1980, 1984, 1986,
	/* 530 */ 1925, 1936, 1931, 1987, 1940, 1928, 1988, 1993, 1997, 1999,
	/* 540 */ 2000, 2001, 1990, 2004, 1983, 2005, 2006, 2007, 2009, 2008,
	/* 550 */ 2011, 2013, 2025, 2015, 2016, 2017, 2018, 2020, 2021, 2014,
	/* 560 */ 1909, 1907, 1908, 1910, 1922, 2022, 2023, 2030, 2049, 2051,
}

const YY_REDUCE_COUNT = 404
const YY_REDUCE_MIN = -271
const YY_REDUCE_MAX = 1716

var yy_reduce_ofst = []int16{
	/* 0 */ -125, 733, 789, 241, 293, -123, -193, -191, -183, -187,
	/* 10 */ 166, 238, 133, -207, -199, -267, -176, -6, 204, 489,
	/* 20 */ 576, -175, 598, 686, 615, 725, 860, 778, 781, 857,
	/* 30 */ 616, 887, 87, 240, -192, 408, 626, 796, 843, 854,
	/* 40 */ 1003, -271, -271, -271, -271, -271, -271, -271, -271, -271,
	/* 50 */ -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
	/* 60 */ -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,
	/* 70 */ -271, -271, -271, -271, -271, -271, -271, -271, 80, 83,
	/* 80 */ 313, 886, 888, 996, 1034, 1059, 1081, 1100, 1117, 1152,
	/* 90 */ 1155, 1163, 1165, 1167, 1169, 1172, 1180, 1182, 1184, 1198,
	/* 100 */ 1200, 1213, 1215, 1225, 1227, 1252, 1254, 1264, 1299, 1303,
	/* 110 */ 1308, 1312, 1325, 1328, 1337, 1340, 1343, 1371, 1373, 1384,
	/* 120 */ 1386, 1411, 1420, 1424, 1426, 1458, 1470, 1473, -271, -271,
	/* 130 */ -271, -271, -271, -271, -271, -271, -271, 138, 459, 396,
	/* 140 */ -158, 470, 302, -212, 521, 201, -195, -92, 559, 630,
	/* 150 */ 632, 630, -271, 632, 901, 63, 407, -271, -271, -271,
	/* 160 */ -271, 161, 161, 161, 251, 335, 847, 960, 980, 537,
	/* 170 */ 588, 618, 628, 688, 688, -166, -161, 674, 790, 794,
	/* 180 */ 799, 851, 852, -122, 680, -120, 995, 1038, 415, 1051,
	/* 190 */ 893, 798, 962, 400, 1086, 779, 923, 924, 263, 1041,
	/* 200 */ 979, 990, 1083, 1097, 1031, 1194, 362, 994, 1139, 1005,
	/* 210 */ 1037, 1202, 1205, 1195, 1210, -194, 56, 185, -135, 232,
	/* 220 */ 522, 560, 601, 617, 669, 683, 711, 856, 908, 941,
	/* 230 */ 1048, 1101, 1147, 1257, 1262, 1265, 392, 1292, 1333, 1339,
	/* 240 */ 1342, 1346, 1350, 1359, 1374, 1418, 1421, 1436, 1437, 593,
	/* 250 */ 755, 770, 997, 1459, 1463, 1209, 1499, 1507, 1509, 1132,
	/* 260 */ 1243, 1510, 1511, 1440, 1512, 560, 1514, 1516, 1517, 1518,
	/* 270 */ 1519, 1520, 1427, 1429, 1466, 1464, 1465, 1467, 1468, 1209,
	/* 280 */ 1466, 1466, 1471, 1503, 1533, 1428, 1456, 1461, 1485, 1469,
	/* 290 */ 1438, 1486, 1474, 1476, 1488, 1479, 1492, 1445, 1524, 1525,
	/* 300 */ 1523, 1521, 1536, 1539, 1498, 1500, 1501, 1502, 1490, 1522,
	/* 310 */ 1484, 1527, 1531, 1569, 1487, 1496, 1570, 1573, 1504, 1506,
	/* 320 */ 1575, 1526, 1513, 1532, 1571, 1566, 1574, 1577, 1583, 1604,
	/* 330 */ 1608, 1576, 1540, 1549, 1578, 1553, 1591, 1580, 1593, 1582,
	/* 340 */ 1629, 1631, 1542, 1545, 1637, 1636, 1619, 1639, 1642, 1643,
	/* 350 */ 1646, 1621, 1633, 1634, 1638, 1620, 1630, 1640, 1641, 1647,
	/* 360 */ 1649, 1650, 1628, 1652, 1653, 1548, 1554, 1581, 1584, 1651,
	/* 370 */ 1661, 1556, 1558, 1611, 1613, 1655, 1657, 1605, 1685, 1609,
	/* 380 */ 1658, 1656, 1660, 1663, 1690, 1705, 1706, 1709, 1710, 1711,
	/* 390 */ 1607, 1610, 1612, 1704, 1701, 1702, 1707, 1708, 1712, 1694,
	/* 400 */ 1695, 1713, 1714, 1716, 1715,
}
var yy_default = []YYACTIONTYPE{
	/* 0 */ 1637, 1637, 1637, 1465, 1232, 1343, 1232, 1232, 1232, 1465,
	/* 10 */ 1465, 1465, 1232, 1373, 1373, 1518, 1265, 1232, 1232, 1232,
	/* 20 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1464, 1232, 1232,
	/* 30 */ 1232, 1232, 1553, 1553, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 40 */ 1232, 1232, 1382, 1232, 1389, 1232, 1232, 1232, 1232, 1232,
	/* 50 */ 1466, 1467, 1232, 1232, 1232, 1517, 1519, 1482, 1396, 1395,
	/* 60 */ 1394, 1393, 1500, 1361, 1387, 1380, 1384, 1460, 1461, 1459,
	/* 70 */ 1463, 1467, 1466, 1232, 1383, 1430, 1444, 1429, 1232, 1232,
	/* 80 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 90 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 100 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 110 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 120 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1438, 1443,
	/* 130 */ 1450, 1442, 1439, 1432, 1431, 1433, 1434, 1232, 1232, 1256,
	/* 140 */ 1232, 1232, 1253, 1307, 1232, 1232, 1232, 1232, 1232, 1537,
	/* 150 */ 1536, 1232, 1435, 1232, 1265, 1424, 1423, 1447, 1436, 1446,
	/* 160 */ 1445, 1525, 1589, 1588, 1483, 1232, 1232, 1232, 1232, 1232,
	/* 170 */ 1232, 1553, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 180 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 190 */ 1232, 1232, 1232, 1232, 1232, 1363, 1553, 1553, 1232, 1265,
	/* 200 */ 1553, 1553, 1364, 1364, 1261, 1261, 1367, 1232, 1532, 1334,
	/* 210 */ 1334, 1334, 1334, 1343, 1334, 1232, 1232, 1232, 1232, 1232,
	/* 220 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 230 */ 1522, 1520, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 240 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 250 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1339,
	/* 260 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 270 */ 1232, 1582, 1232, 1495, 1321, 1339, 1339, 1339, 1339, 1341,
	/* 280 */ 1322, 1320, 1333, 1266, 1239, 1629, 1399, 1388, 1340, 1388,
	/* 290 */ 1626, 1386, 1399, 1399, 1386, 1399, 1340, 1626, 1282, 1605,
	/* 300 */ 1277, 1373, 1373, 1373, 1363, 1363, 1363, 1363, 1367, 1367,
	/* 310 */ 1462, 1340, 1333, 1232, 1629, 1629, 1349, 1349, 1628, 1628,
	/* 320 */ 1349, 1483, 1613, 1408, 1310, 1316, 1316, 1316, 1316, 1349,
	/* 330 */ 1250, 1386, 1613, 1613, 1386, 1408, 1310, 1386, 1310, 1386,
	/* 340 */ 1349, 1250, 1499, 1623, 1349, 1250, 1473, 1349, 1250, 1349,
	/* 350 */ 1250, 1473, 1308, 1308, 1308, 1297, 1232, 1232, 1473, 1308,
	/* 360 */ 1282, 1308, 1297, 1308, 1308, 1571, 1232, 1477, 1477, 1473,
	/* 370 */ 1349, 1563, 1563, 1376, 1376, 1381, 1367, 1468, 1349, 1232,
	/* 380 */ 1381, 1379, 1377, 1386, 1300, 1585, 1585, 1581, 1581, 1581,
	/* 390 */ 1634, 1634, 1532, 1598, 1265, 1265, 1265, 1265, 1598, 1284,
	/* 400 */ 1284, 1266, 1266, 1265, 1598, 1232, 1232, 1232, 1232, 1232,
	/* 410 */ 1232, 1593, 1232, 1527, 1484, 1353, 1232, 1232, 1232, 1232,
	/* 420 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 430 */ 1538, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 440 */ 1232, 1413, 1232, 1235, 1529, 1232, 1232, 1232, 1232, 1232,
	/* 450 */ 1232, 1232, 1232, 1390, 1391, 1354, 1232, 1232, 1232, 1232,
	/* 460 */ 1232, 1232, 1232, 1405, 1232, 1232, 1232, 1400, 1232, 1232,
	/* 470 */ 1232, 1232, 1232, 1232, 1232, 1232, 1625, 1232, 1232, 1232,
	/* 480 */ 1232, 1232, 1232, 1498, 1497, 1232, 1232, 1351, 1232, 1232,
	/* 490 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 500 */ 1232, 1280, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 510 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 520 */ 1232, 1232, 1232, 1232, 1232, 1378, 1232, 1232, 1232, 1232,
	/* 530 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
	/* 540 */ 1568, 1368, 1232, 1232, 1616, 1232, 1232, 1232, 1232, 1232,
	/* 550 */ 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1609,
	/* 560 */ 1324, 1415, 1232, 1414, 1418, 1254, 1232, 1244, 1232, 1232,
}

/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.
** If a construct like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
 */
var yyFallback = []YYCODETYPE{
	//
	0,  /*          $ => nothing */
	0,  /*       SEMI => nothing */
	59,  /*    EXPLAIN => ID */
	59,  /*      QUERY => ID */
	59,  /*       PLAN => ID */
	59,  /*      BEGIN => ID */
	0,  /* TRANSACTION => nothing */
	59,  /*   DEFERRED => ID */
	59,  /*  IMMEDIATE => ID */
	59,  /*  EXCLUSIVE => ID */
	0,  /*     COMMIT => nothing */
	59,  /*        END => ID */
	59,  /*   ROLLBACK => ID */
	59,  /*  SAVEPOINT => ID */
	59,  /*    RELEASE => ID */
	0,  /*         TO => nothing */
	0,  /*      TABLE => nothing */
	0,  /*     CREATE => nothing */
	59,  /*         IF => ID */
	0,  /*        NOT => nothing */
	0,  /*     EXISTS => nothing */
	59,  /*       TEMP => ID */
	0,  /*         LP => nothing */
	0,  /*         RP => nothing */
	0,  /*         AS => nothing */
	0,  /*      COMMA => nothing */
	59,  /*    WITHOUT => ID */
	59,  /*      ABORT => ID */
	59,  /*     ACTION => ID */
	59,  /*      AFTER => ID */
	59,  /*    ANALYZE => ID */
	59,  /*        ASC => ID */
	59,  /*     ATTACH => ID */
	59,  /*     BEFORE => ID */
	59,  /*         BY => ID */
	59,  /*    CASCADE => ID */
	59,  /*       CAST => ID */
	59,  /*   CONFLICT => ID */
	59,  /*   DATABASE => ID */
	59,  /*       DESC => ID */
	59,  /*     DETACH => ID */
	59,  /*       EACH => ID */
	59,  /*       FAIL => ID */
	0,  /*         OR => nothing */
	0,  /*        AND => nothing */
	0,  /*         IS => nothing */
	59,  /*      MATCH => ID */
	59,  /*    LIKE_KW => ID */
	0,  /*    BETWEEN => nothing */
	0,  /*         IN => nothing */
	0,  /*     ISNULL => nothing */
	0,  /*    NOTNULL => nothing */
	0,  /*         NE => nothing */
	0,  /*         EQ => nothing */
	0,  /*         GT => nothing */
	0,  /*         LE => nothing */
	0,  /*         LT => nothing */
	0,  /*         GE => nothing */
	0,  /*     ESCAPE => nothing */
	0,  /*         ID => nothing */
	59,  /*   COLUMNKW => ID */
	59,  /*         DO => ID */
	59,  /*        FOR => ID */
	59,  /*     IGNORE => ID */
	59,  /*  INITIALLY => ID */
	59,  /*    INSTEAD => ID */
	59,  /*         NO => ID */
	59,  /*        KEY => ID */
	59,  /*         OF => ID */
	59,  /*     OFFSET => ID */
	59,  /*     PRAGMA => ID */
	59,  /*      RAISE => ID */
	59,  /*  RECURSIVE => ID */
	59,  /*    REPLACE => ID */
	59,  /*   RESTRICT => ID */
	59,  /*        ROW => ID */
	59,  /*       ROWS => ID */
	59,  /*    TRIGGER => ID */
	59,  /*     VACUUM => ID */
	59,  /*       VIEW => ID */
	59,  /*    VIRTUAL => ID */
	59,  /*       WITH => ID */
	59,  /*      NULLS => ID */
	59,  /*      FIRST => ID */
	59,  /*       LAST => ID */
	59,  /*    CURRENT => ID */
	59,  /*  FOLLOWING => ID */
	59,  /*  PARTITION => ID */
	59,  /*  PRECEDING => ID */
	59,  /*      RANGE => ID */
	59,  /*  UNBOUNDED => ID */
	59,  /*    EXCLUDE => ID */
	59,  /*     GROUPS => ID */
	59,  /*     OTHERS => ID */
	59,  /*       TIES => ID */
	59,  /*  GENERATED => ID */
	59,  /*     ALWAYS => ID */
	59,  /* MATERIALIZED => ID */
	59,  /*    REINDEX => ID */
	59,  /*     RENAME => ID */
	59,  /*   CTIME_KW => ID */
	0,  /*        ANY => nothing */
	0,  /*     BITAND => nothing */
	0,  /*      BITOR => nothing */
	0,  /*     LSHIFT => nothing */
	0,  /*     RSHIFT => nothing */
	0,  /*       PLUS => nothing */
	0,  /*      MINUS => nothing */
	0,  /*       STAR => nothing */
	0,  /*      SLASH => nothing */
	0,  /*        REM => nothing */
	0,  /*     CONCAT => nothing */
	0,  /*        PTR => nothing */
	0,  /*    COLLATE => nothing */
	0,  /*     BITNOT => nothing */
	0,  /*         ON => nothing */
	0,  /*    INDEXED => nothing */
	0,  /*     STRING => nothing */
	0,  /*    JOIN_KW => nothing */
	0,  /* CONSTRAINT => nothing */
	0,  /*    DEFAULT => nothing */
	0,  /*       NULL => nothing */
	0,  /*    PRIMARY => nothing */
	0,  /*     UNIQUE => nothing */
	0,  /*      CHECK => nothing */
	0,  /* REFERENCES => nothing */
	0,  /*   AUTOINCR => nothing */
	0,  /*     INSERT => nothing */
	0,  /*     DELETE => nothing */
	0,  /*     UPDATE => nothing */
	0,  /*        SET => nothing */
	0,  /* DEFERRABLE => nothing */
	0,  /*    FOREIGN => nothing */
	0,  /*       DROP => nothing */
	0,  /*      UNION => nothing */
	0,  /*        ALL => nothing */
	0,  /*     EXCEPT => nothing */
	0,  /*  INTERSECT => nothing */
	0,  /*     SELECT => nothing */
	0,  /*     VALUES => nothing */
	0,  /*   DISTINCT => nothing */
	0,  /*        DOT => nothing */
	0,  /*       FROM => nothing */
	0,  /*       JOIN => nothing */
	0,  /*      USING => nothing */
	0,  /*      ORDER => nothing */
	0,  /*      GROUP => nothing */
	0,  /*     HAVING => nothing */
	0,  /*      LIMIT => nothing */
	0,  /*      WHERE => nothing */
	0,  /*  RETURNING => nothing */
	0,  /*       INTO => nothing */
	0,  /*    NOTHING => nothing */
	0,  /*      FLOAT => nothing */
	0,  /*       BLOB => nothing */
	0,  /*    INTEGER => nothing */
	0,  /*   VARIABLE => nothing */
	0,  /*       CASE => nothing */
	0,  /*       WHEN => nothing */
	0,  /*       THEN => nothing */
	0,  /*       ELSE => nothing */
	0,  /*      INDEX => nothing */
	0,  /*      ALTER => nothing */
	0,  /*        ADD => nothing */
	0,  /*     WINDOW => nothing */
	0,  /*       OVER => nothing */
	0,  /*     FILTER => nothing */
	0,  /*     COLUMN => nothing */
	0,  /* AGG_FUNCTION => nothing */
	0,  /* AGG_COLUMN => nothing */
	0,  /*  TRUEFALSE => nothing */
	0,  /*      ISNOT => nothing */
	0,  /*   FUNCTION => nothing */
	0,  /*     UMINUS => nothing */
	0,  /*      UPLUS => nothing */
	0,  /*      TRUTH => nothing */
	0,  /*   REGISTER => nothing */
	0,  /*     VECTOR => nothing */
	0,  /* SELECT_COLUMN => nothing */
	0,  /* IF_NULL_ROW => nothing */
	0,  /*   ASTERISK => nothing */
	0,  /*       SPAN => nothing */
	0,  /*      ERROR => nothing */
	0,  /*      SPACE => nothing */
	0,  /*    ILLEGAL => nothing */
}

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
 */
type yyStackEntry struct {
	stateno YYACTIONTYPE /* The state-number, or reduce action in SHIFTREDUCE */
	major   YYCODETYPE   /* The major token value.  This is the code
	 ** number for the token at this stack level */
	minor YYMINORTYPE /* The user-supplied minor token value.  This
	 ** is the value of the token  */
}

/* The state of the parser is completely contained in an instance of
** the following structure */
type yyParser struct {
	yytos int /* Index of top element on the stack */
	// #ifdef YYTRACKMAXSTACKDEPTH
	yyhwm int /* High-water mark of the stack */
	// #endif
	// #ifndef YYNOERRORRECOVERY
	yyerrcnt int /* Shifts left before out of the error */
	// #endif
	/* A place to hold %extra_argument */
	pParse *ctxDecl/* A place to hold %extra_context */
	yystack []yyStackEntry
}

var yyTraceFILE *os.File
var yyTracePrompt string

/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
 */
func sqlite3ParserTrace(TraceFILE *os.File, zTracePrompt string) {
	yyTraceFILE = TraceFILE
	yyTracePrompt = zTracePrompt
	if yyTraceFILE == nil {
		yyTracePrompt = ""
	} else if yyTracePrompt == "" {
		yyTraceFILE = nil
	}
}

/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
var yyTokenName = []string{
	/*    0 */ "$",
	/*    1 */ "SEMI",
	/*    2 */ "EXPLAIN",
	/*    3 */ "QUERY",
	/*    4 */ "PLAN",
	/*    5 */ "BEGIN",
	/*    6 */ "TRANSACTION",
	/*    7 */ "DEFERRED",
	/*    8 */ "IMMEDIATE",
	/*    9 */ "EXCLUSIVE",
	/*   10 */ "COMMIT",
	/*   11 */ "END",
	/*   12 */ "ROLLBACK",
	/*   13 */ "SAVEPOINT",
	/*   14 */ "RELEASE",
	/*   15 */ "TO",
	/*   16 */ "TABLE",
	/*   17 */ "CREATE",
	/*   18 */ "IF",
	/*   19 */ "NOT",
	/*   20 */ "EXISTS",
	/*   21 */ "TEMP",
	/*   22 */ "LP",
	/*   23 */ "RP",
	/*   24 */ "AS",
	/*   25 */ "COMMA",
	/*   26 */ "WITHOUT",
	/*   27 */ "ABORT",
	/*   28 */ "ACTION",
	/*   29 */ "AFTER",
	/*   30 */ "ANALYZE",
	/*   31 */ "ASC",
	/*   32 */ "ATTACH",
	/*   33 */ "BEFORE",
	/*   34 */ "BY",
	/*   35 */ "CASCADE",
	/*   36 */ "CAST",
	/*   37 */ "CONFLICT",
	/*   38 */ "DATABASE",
	/*   39 */ "DESC",
	/*   40 */ "DETACH",
	/*   41 */ "EACH",
	/*   42 */ "FAIL",
	/*   43 */ "OR",
	/*   44 */ "AND",
	/*   45 */ "IS",
	/*   46 */ "MATCH",
	/*   47 */ "LIKE_KW",
	/*   48 */ "BETWEEN",
	/*   49 */ "IN",
	/*   50 */ "ISNULL",
	/*   51 */ "NOTNULL",
	/*   52 */ "NE",
	/*   53 */ "EQ",
	/*   54 */ "GT",
	/*   55 */ "LE",
	/*   56 */ "LT",
	/*   57 */ "GE",
	/*   58 */ "ESCAPE",
	/*   59 */ "ID",
	/*   60 */ "COLUMNKW",
	/*   61 */ "DO",
	/*   62 */ "FOR",
	/*   63 */ "IGNORE",
	/*   64 */ "INITIALLY",
	/*   65 */ "INSTEAD",
	/*   66 */ "NO",
	/*   67 */ "KEY",
	/*   68 */ "OF",
	/*   69 */ "OFFSET",
	/*   70 */ "PRAGMA",
	/*   71 */ "RAISE",
	/*   72 */ "RECURSIVE",
	/*   73 */ "REPLACE",
	/*   74 */ "RESTRICT",
	/*   75 */ "ROW",
	/*   76 */ "ROWS",
	/*   77 */ "TRIGGER",
	/*   78 */ "VACUUM",
	/*   79 */ "VIEW",
	/*   80 */ "VIRTUAL",
	/*   81 */ "WITH",
	/*   82 */ "NULLS",
	/*   83 */ "FIRST",
	/*   84 */ "LAST",
	/*   85 */ "CURRENT",
	/*   86 */ "FOLLOWING",
	/*   87 */ "PARTITION",
	/*   88 */ "PRECEDING",
	/*   89 */ "RANGE",
	/*   90 */ "UNBOUNDED",
	/*   91 */ "EXCLUDE",
	/*   92 */ "GROUPS",
	/*   93 */ "OTHERS",
	/*   94 */ "TIES",
	/*   95 */ "GENERATED",
	/*   96 */ "ALWAYS",
	/*   97 */ "MATERIALIZED",
	/*   98 */ "REINDEX",
	/*   99 */ "RENAME",
	/*  100 */ "CTIME_KW",
	/*  101 */ "ANY",
	/*  102 */ "BITAND",
	/*  103 */ "BITOR",
	/*  104 */ "LSHIFT",
	/*  105 */ "RSHIFT",
	/*  106 */ "PLUS",
	/*  107 */ "MINUS",
	/*  108 */ "STAR",
	/*  109 */ "SLASH",
	/*  110 */ "REM",
	/*  111 */ "CONCAT",
	/*  112 */ "PTR",
	/*  113 */ "COLLATE",
	/*  114 */ "BITNOT",
	/*  115 */ "ON",
	/*  116 */ "INDEXED",
	/*  117 */ "STRING",
	/*  118 */ "JOIN_KW",
	/*  119 */ "CONSTRAINT",
	/*  120 */ "DEFAULT",
	/*  121 */ "NULL",
	/*  122 */ "PRIMARY",
	/*  123 */ "UNIQUE",
	/*  124 */ "CHECK",
	/*  125 */ "REFERENCES",
	/*  126 */ "AUTOINCR",
	/*  127 */ "INSERT",
	/*  128 */ "DELETE",
	/*  129 */ "UPDATE",
	/*  130 */ "SET",
	/*  131 */ "DEFERRABLE",
	/*  132 */ "FOREIGN",
	/*  133 */ "DROP",
	/*  134 */ "UNION",
	/*  135 */ "ALL",
	/*  136 */ "EXCEPT",
	/*  137 */ "INTERSECT",
	/*  138 */ "SELECT",
	/*  139 */ "VALUES",
	/*  140 */ "DISTINCT",
	/*  141 */ "DOT",
	/*  142 */ "FROM",
	/*  143 */ "JOIN",
	/*  144 */ "USING",
	/*  145 */ "ORDER",
	/*  146 */ "GROUP",
	/*  147 */ "HAVING",
	/*  148 */ "LIMIT",
	/*  149 */ "WHERE",
	/*  150 */ "RETURNING",
	/*  151 */ "INTO",
	/*  152 */ "NOTHING",
	/*  153 */ "FLOAT",
	/*  154 */ "BLOB",
	/*  155 */ "INTEGER",
	/*  156 */ "VARIABLE",
	/*  157 */ "CASE",
	/*  158 */ "WHEN",
	/*  159 */ "THEN",
	/*  160 */ "ELSE",
	/*  161 */ "INDEX",
	/*  162 */ "ALTER",
	/*  163 */ "ADD",
	/*  164 */ "WINDOW",
	/*  165 */ "OVER",
	/*  166 */ "FILTER",
	/*  167 */ "COLUMN",
	/*  168 */ "AGG_FUNCTION",
	/*  169 */ "AGG_COLUMN",
	/*  170 */ "TRUEFALSE",
	/*  171 */ "ISNOT",
	/*  172 */ "FUNCTION",
	/*  173 */ "UMINUS",
	/*  174 */ "UPLUS",
	/*  175 */ "TRUTH",
	/*  176 */ "REGISTER",
	/*  177 */ "VECTOR",
	/*  178 */ "SELECT_COLUMN",
	/*  179 */ "IF_NULL_ROW",
	/*  180 */ "ASTERISK",
	/*  181 */ "SPAN",
	/*  182 */ "ERROR",
	/*  183 */ "SPACE",
	/*  184 */ "ILLEGAL",
	/*  185 */ "input",
	/*  186 */ "cmdlist",
	/*  187 */ "ecmd",
	/*  188 */ "cmdx",
	/*  189 */ "explain",
	/*  190 */ "cmd",
	/*  191 */ "transtype",
	/*  192 */ "trans_opt",
	/*  193 */ "nm",
	/*  194 */ "savepoint_opt",
	/*  195 */ "create_table",
	/*  196 */ "create_table_args",
	/*  197 */ "createkw",
	/*  198 */ "temp",
	/*  199 */ "ifnotexists",
	/*  200 */ "dbnm",
	/*  201 */ "columnlist",
	/*  202 */ "conslist_opt",
	/*  203 */ "table_option_set",
	/*  204 */ "select",
	/*  205 */ "table_option",
	/*  206 */ "columnname",
	/*  207 */ "carglist",
	/*  208 */ "typetoken",
	/*  209 */ "typename",
	/*  210 */ "signed",
	/*  211 */ "plus_num",
	/*  212 */ "minus_num",
	/*  213 */ "scanpt",
	/*  214 */ "scantok",
	/*  215 */ "ccons",
	/*  216 */ "term",
	/*  217 */ "expr",
	/*  218 */ "onconf",
	/*  219 */ "sortorder",
	/*  220 */ "autoinc",
	/*  221 */ "eidlist_opt",
	/*  222 */ "refargs",
	/*  223 */ "defer_subclause",
	/*  224 */ "generated",
	/*  225 */ "refarg",
	/*  226 */ "refact",
	/*  227 */ "init_deferred_pred_opt",
	/*  228 */ "conslist",
	/*  229 */ "tconscomma",
	/*  230 */ "tcons",
	/*  231 */ "sortlist",
	/*  232 */ "eidlist",
	/*  233 */ "defer_subclause_opt",
	/*  234 */ "orconf",
	/*  235 */ "resolvetype",
	/*  236 */ "raisetype",
	/*  237 */ "ifexists",
	/*  238 */ "fullname",
	/*  239 */ "selectnowith",
	/*  240 */ "oneselect",
	/*  241 */ "wqlist",
	/*  242 */ "multiselect_op",
	/*  243 */ "distinct",
	/*  244 */ "selcollist",
	/*  245 */ "from",
	/*  246 */ "where_opt",
	/*  247 */ "groupby_opt",
	/*  248 */ "having_opt",
	/*  249 */ "orderby_opt",
	/*  250 */ "limit_opt",
	/*  251 */ "window_clause",
	/*  252 */ "values",
	/*  253 */ "nexprlist",
	/*  254 */ "sclp",
	/*  255 */ "as",
	/*  256 */ "seltablist",
	/*  257 */ "stl_prefix",
	/*  258 */ "joinop",
	/*  259 */ "on_using",
	/*  260 */ "indexed_by",
	/*  261 */ "exprlist",
	/*  262 */ "xfullname",
	/*  263 */ "idlist",
	/*  264 */ "indexed_opt",
	/*  265 */ "nulls",
	/*  266 */ "with",
	/*  267 */ "where_opt_ret",
	/*  268 */ "setlist",
	/*  269 */ "insert_cmd",
	/*  270 */ "idlist_opt",
	/*  271 */ "upsert",
	/*  272 */ "returning",
	/*  273 */ "filter_over",
	/*  274 */ "likeop",
	/*  275 */ "between_op",
	/*  276 */ "in_op",
	/*  277 */ "paren_exprlist",
	/*  278 */ "case_operand",
	/*  279 */ "case_exprlist",
	/*  280 */ "case_else",
	/*  281 */ "uniqueflag",
	/*  282 */ "collate",
	/*  283 */ "vinto",
	/*  284 */ "nmnum",
	/*  285 */ "trigger_decl",
	/*  286 */ "trigger_cmd_list",
	/*  287 */ "trigger_time",
	/*  288 */ "trigger_event",
	/*  289 */ "foreach_clause",
	/*  290 */ "when_clause",
	/*  291 */ "trigger_cmd",
	/*  292 */ "trnm",
	/*  293 */ "tridxby",
	/*  294 */ "database_kw_opt",
	/*  295 */ "key_opt",
	/*  296 */ "add_column_fullname",
	/*  297 */ "kwcolumn_opt",
	/*  298 */ "create_vtab",
	/*  299 */ "vtabarglist",
	/*  300 */ "vtabarg",
	/*  301 */ "vtabargtoken",
	/*  302 */ "lp",
	/*  303 */ "anylist",
	/*  304 */ "wqitem",
	/*  305 */ "wqas",
	/*  306 */ "windowdefn_list",
	/*  307 */ "windowdefn",
	/*  308 */ "window",
	/*  309 */ "frame_opt",
	/*  310 */ "part_opt",
	/*  311 */ "filter_clause",
	/*  312 */ "over_clause",
	/*  313 */ "range_or_rows",
	/*  314 */ "frame_bound",
	/*  315 */ "frame_bound_s",
	/*  316 */ "frame_bound_e",
	/*  317 */ "frame_exclude_opt",
	/*  318 */ "frame_exclude",
}

/* For tracing reduce actions, the names of all rules are required.
 */
var yyRuleName = []string{
	/*   0 */ "explain ::= EXPLAIN",
	/*   1 */ "explain ::= EXPLAIN QUERY PLAN",
	/*   2 */ "cmdx ::= cmd",
	/*   3 */ "cmd ::= BEGIN transtype trans_opt",
	/*   4 */ "transtype ::=",
	/*   5 */ "transtype ::= DEFERRED",
	/*   6 */ "transtype ::= IMMEDIATE",
	/*   7 */ "transtype ::= EXCLUSIVE",
	/*   8 */ "cmd ::= COMMIT|END trans_opt",
	/*   9 */ "cmd ::= ROLLBACK trans_opt",
	/*  10 */ "cmd ::= SAVEPOINT nm",
	/*  11 */ "cmd ::= RELEASE savepoint_opt nm",
	/*  12 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
	/*  13 */ "create_table ::= createkw temp TABLE ifnotexists nm dbnm",
	/*  14 */ "createkw ::= CREATE",
	/*  15 */ "ifnotexists ::=",
	/*  16 */ "ifnotexists ::= IF NOT EXISTS",
	/*  17 */ "temp ::= TEMP",
	/*  18 */ "temp ::=",
	/*  19 */ "create_table_args ::= LP columnlist conslist_opt RP table_option_set",
	/*  20 */ "create_table_args ::= AS select",
	/*  21 */ "table_option_set ::=",
	/*  22 */ "table_option_set ::= table_option_set COMMA table_option",
	/*  23 */ "table_option ::= WITHOUT nm",
	/*  24 */ "table_option ::= nm",
	/*  25 */ "columnname ::= nm typetoken",
	/*  26 */ "typetoken ::=",
	/*  27 */ "typetoken ::= typename LP signed RP",
	/*  28 */ "typetoken ::= typename LP signed COMMA signed RP",
	/*  29 */ "typename ::= typename ID|STRING",
	/*  30 */ "scanpt ::=",
	/*  31 */ "scantok ::=",
	/*  32 */ "ccons ::= CONSTRAINT nm",
	/*  33 */ "ccons ::= DEFAULT scantok term",
	/*  34 */ "ccons ::= DEFAULT LP expr RP",
	/*  35 */ "ccons ::= DEFAULT PLUS scantok term",
	/*  36 */ "ccons ::= DEFAULT MINUS scantok term",
	/*  37 */ "ccons ::= DEFAULT scantok ID|INDEXED",
	/*  38 */ "ccons ::= NOT NULL onconf",
	/*  39 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
	/*  40 */ "ccons ::= UNIQUE onconf",
	/*  41 */ "ccons ::= CHECK LP expr RP",
	/*  42 */ "ccons ::= REFERENCES nm eidlist_opt refargs",
	/*  43 */ "ccons ::= defer_subclause",
	/*  44 */ "ccons ::= COLLATE ID|STRING",
	/*  45 */ "generated ::= LP expr RP",
	/*  46 */ "generated ::= LP expr RP ID",
	/*  47 */ "autoinc ::=",
	/*  48 */ "autoinc ::= AUTOINCR",
	/*  49 */ "refargs ::=",
	/*  50 */ "refargs ::= refargs refarg",
	/*  51 */ "refarg ::= MATCH nm",
	/*  52 */ "refarg ::= ON INSERT refact",
	/*  53 */ "refarg ::= ON DELETE refact",
	/*  54 */ "refarg ::= ON UPDATE refact",
	/*  55 */ "refact ::= SET NULL",
	/*  56 */ "refact ::= SET DEFAULT",
	/*  57 */ "refact ::= CASCADE",
	/*  58 */ "refact ::= RESTRICT",
	/*  59 */ "refact ::= NO ACTION",
	/*  60 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
	/*  61 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
	/*  62 */ "init_deferred_pred_opt ::=",
	/*  63 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
	/*  64 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
	/*  65 */ "conslist_opt ::=",
	/*  66 */ "tconscomma ::= COMMA",
	/*  67 */ "tcons ::= CONSTRAINT nm",
	/*  68 */ "tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf",
	/*  69 */ "tcons ::= UNIQUE LP sortlist RP onconf",
	/*  70 */ "tcons ::= CHECK LP expr RP onconf",
	/*  71 */ "tcons ::= FOREIGN KEY LP eidlist RP REFERENCES nm eidlist_opt refargs defer_subclause_opt",
	/*  72 */ "defer_subclause_opt ::=",
	/*  73 */ "onconf ::=",
	/*  74 */ "onconf ::= ON CONFLICT resolvetype",
	/*  75 */ "orconf ::=",
	/*  76 */ "orconf ::= OR resolvetype",
	/*  77 */ "resolvetype ::= IGNORE",
	/*  78 */ "resolvetype ::= REPLACE",
	/*  79 */ "cmd ::= DROP TABLE ifexists fullname",
	/*  80 */ "ifexists ::= IF EXISTS",
	/*  81 */ "ifexists ::=",
	/*  82 */ "cmd ::= createkw temp VIEW ifnotexists nm dbnm eidlist_opt AS select",
	/*  83 */ "cmd ::= DROP VIEW ifexists fullname",
	/*  84 */ "cmd ::= select",
	/*  85 */ "select ::= WITH wqlist selectnowith",
	/*  86 */ "select ::= WITH RECURSIVE wqlist selectnowith",
	/*  87 */ "select ::= selectnowith",
	/*  88 */ "selectnowith ::= selectnowith multiselect_op oneselect",
	/*  89 */ "multiselect_op ::= UNION",
	/*  90 */ "multiselect_op ::= UNION ALL",
	/*  91 */ "multiselect_op ::= EXCEPT|INTERSECT",
	/*  92 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
	/*  93 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt",
	/*  94 */ "values ::= VALUES LP nexprlist RP",
	/*  95 */ "values ::= values COMMA LP nexprlist RP",
	/*  96 */ "distinct ::= DISTINCT",
	/*  97 */ "distinct ::= ALL",
	/*  98 */ "distinct ::=",
	/*  99 */ "sclp ::=",
	/* 100 */ "selcollist ::= sclp scanpt expr scanpt as",
	/* 101 */ "selcollist ::= sclp scanpt STAR",
	/* 102 */ "selcollist ::= sclp scanpt nm DOT STAR",
	/* 103 */ "as ::= AS nm",
	/* 104 */ "as ::=",
	/* 105 */ "from ::=",
	/* 106 */ "from ::= FROM seltablist",
	/* 107 */ "stl_prefix ::= seltablist joinop",
	/* 108 */ "stl_prefix ::=",
	/* 109 */ "seltablist ::= stl_prefix nm dbnm as on_using",
	/* 110 */ "seltablist ::= stl_prefix nm dbnm as indexed_by on_using",
	/* 111 */ "seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_using",
	/* 112 */ "seltablist ::= stl_prefix LP select RP as on_using",
	/* 113 */ "seltablist ::= stl_prefix LP seltablist RP as on_using",
	/* 114 */ "dbnm ::=",
	/* 115 */ "dbnm ::= DOT nm",
	/* 116 */ "fullname ::= nm",
	/* 117 */ "fullname ::= nm DOT nm",
	/* 118 */ "xfullname ::= nm",
	/* 119 */ "xfullname ::= nm DOT nm",
	/* 120 */ "xfullname ::= nm DOT nm AS nm",
	/* 121 */ "xfullname ::= nm AS nm",
	/* 122 */ "joinop ::= COMMA|JOIN",
	/* 123 */ "joinop ::= JOIN_KW JOIN",
	/* 124 */ "joinop ::= JOIN_KW nm JOIN",
	/* 125 */ "joinop ::= JOIN_KW nm nm JOIN",
	/* 126 */ "on_using ::= ON expr",
	/* 127 */ "on_using ::= USING LP idlist RP",
	/* 128 */ "on_using ::=",
	/* 129 */ "indexed_opt ::=",
	/* 130 */ "indexed_by ::= INDEXED BY nm",
	/* 131 */ "indexed_by ::= NOT INDEXED",
	/* 132 */ "orderby_opt ::=",
	/* 133 */ "orderby_opt ::= ORDER BY sortlist",
	/* 134 */ "sortlist ::= sortlist COMMA expr sortorder nulls",
	/* 135 */ "sortlist ::= expr sortorder nulls",
	/* 136 */ "sortorder ::= ASC",
	/* 137 */ "sortorder ::= DESC",
	/* 138 */ "sortorder ::=",
	/* 139 */ "nulls ::= NULLS FIRST",
	/* 140 */ "nulls ::= NULLS LAST",
	/* 141 */ "nulls ::=",
	/* 142 */ "groupby_opt ::=",
	/* 143 */ "groupby_opt ::= GROUP BY nexprlist",
	/* 144 */ "having_opt ::=",
	/* 145 */ "having_opt ::= HAVING expr",
	/* 146 */ "limit_opt ::=",
	/* 147 */ "limit_opt ::= LIMIT expr",
	/* 148 */ "limit_opt ::= LIMIT expr OFFSET expr",
	/* 149 */ "limit_opt ::= LIMIT expr COMMA expr",
	/* 150 */ "cmd ::= with DELETE FROM xfullname indexed_opt where_opt_ret",
	/* 151 */ "where_opt ::=",
	/* 152 */ "where_opt ::= WHERE expr",
	/* 153 */ "where_opt_ret ::=",
	/* 154 */ "where_opt_ret ::= WHERE expr",
	/* 155 */ "where_opt_ret ::= RETURNING selcollist",
	/* 156 */ "where_opt_ret ::= WHERE expr RETURNING selcollist",
	/* 157 */ "cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt_ret",
	/* 158 */ "setlist ::= setlist COMMA nm EQ expr",
	/* 159 */ "setlist ::= setlist COMMA LP idlist RP EQ expr",
	/* 160 */ "setlist ::= nm EQ expr",
	/* 161 */ "setlist ::= LP idlist RP EQ expr",
	/* 162 */ "cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert",
	/* 163 */ "cmd ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning",
	/* 164 */ "upsert ::=",
	/* 165 */ "upsert ::= RETURNING selcollist",
	/* 166 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt upsert",
	/* 167 */ "upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING upsert",
	/* 168 */ "upsert ::= ON CONFLICT DO NOTHING returning",
	/* 169 */ "upsert ::= ON CONFLICT DO UPDATE SET setlist where_opt returning",
	/* 170 */ "returning ::= RETURNING selcollist",
	/* 171 */ "insert_cmd ::= INSERT orconf",
	/* 172 */ "insert_cmd ::= REPLACE",
	/* 173 */ "idlist_opt ::=",
	/* 174 */ "idlist_opt ::= LP idlist RP",
	/* 175 */ "idlist ::= idlist COMMA nm",
	/* 176 */ "idlist ::= nm",
	/* 177 */ "expr ::= LP expr RP",
	/* 178 */ "expr ::= ID|INDEXED",
	/* 179 */ "expr ::= JOIN_KW",
	/* 180 */ "expr ::= nm DOT nm",
	/* 181 */ "expr ::= nm DOT nm DOT nm",
	/* 182 */ "term ::= NULL|FLOAT|BLOB",
	/* 183 */ "term ::= STRING",
	/* 184 */ "term ::= INTEGER",
	/* 185 */ "expr ::= VARIABLE",
	/* 186 */ "expr ::= expr COLLATE ID|STRING",
	/* 187 */ "expr ::= CAST LP expr AS typetoken RP",
	/* 188 */ "expr ::= ID|INDEXED LP distinct exprlist RP",
	/* 189 */ "expr ::= ID|INDEXED LP STAR RP",
	/* 190 */ "expr ::= ID|INDEXED LP distinct exprlist RP filter_over",
	/* 191 */ "expr ::= ID|INDEXED LP STAR RP filter_over",
	/* 192 */ "term ::= CTIME_KW",
	/* 193 */ "expr ::= LP nexprlist COMMA expr RP",
	/* 194 */ "expr ::= expr AND expr",
	/* 195 */ "expr ::= expr OR expr",
	/* 196 */ "expr ::= expr LT|GT|GE|LE expr",
	/* 197 */ "expr ::= expr EQ|NE expr",
	/* 198 */ "expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
	/* 199 */ "expr ::= expr PLUS|MINUS expr",
	/* 200 */ "expr ::= expr STAR|SLASH|REM expr",
	/* 201 */ "expr ::= expr CONCAT expr",
	/* 202 */ "likeop ::= NOT LIKE_KW|MATCH",
	/* 203 */ "expr ::= expr likeop expr",
	/* 204 */ "expr ::= expr likeop expr ESCAPE expr",
	/* 205 */ "expr ::= expr ISNULL|NOTNULL",
	/* 206 */ "expr ::= expr NOT NULL",
	/* 207 */ "expr ::= expr IS expr",
	/* 208 */ "expr ::= expr IS NOT expr",
	/* 209 */ "expr ::= NOT expr",
	/* 210 */ "expr ::= BITNOT expr",
	/* 211 */ "expr ::= PLUS|MINUS expr",
	/* 212 */ "expr ::= expr PTR expr",
	/* 213 */ "between_op ::= BETWEEN",
	/* 214 */ "between_op ::= NOT BETWEEN",
	/* 215 */ "expr ::= expr between_op expr AND expr",
	/* 216 */ "in_op ::= IN",
	/* 217 */ "in_op ::= NOT IN",
	/* 218 */ "expr ::= expr in_op LP exprlist RP",
	/* 219 */ "expr ::= LP select RP",
	/* 220 */ "expr ::= expr in_op LP select RP",
	/* 221 */ "expr ::= expr in_op nm dbnm paren_exprlist",
	/* 222 */ "expr ::= EXISTS LP select RP",
	/* 223 */ "expr ::= CASE case_operand case_exprlist case_else END",
	/* 224 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
	/* 225 */ "case_exprlist ::= WHEN expr THEN expr",
	/* 226 */ "case_else ::= ELSE expr",
	/* 227 */ "case_else ::=",
	/* 228 */ "case_operand ::= expr",
	/* 229 */ "case_operand ::=",
	/* 230 */ "exprlist ::=",
	/* 231 */ "nexprlist ::= nexprlist COMMA expr",
	/* 232 */ "nexprlist ::= expr",
	/* 233 */ "paren_exprlist ::=",
	/* 234 */ "paren_exprlist ::= LP exprlist RP",
	/* 235 */ "cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt",
	/* 236 */ "uniqueflag ::= UNIQUE",
	/* 237 */ "uniqueflag ::=",
	/* 238 */ "eidlist_opt ::=",
	/* 239 */ "eidlist_opt ::= LP eidlist RP",
	/* 240 */ "eidlist ::= eidlist COMMA nm collate sortorder",
	/* 241 */ "eidlist ::= nm collate sortorder",
	/* 242 */ "collate ::=",
	/* 243 */ "collate ::= COLLATE ID|STRING",
	/* 244 */ "cmd ::= DROP INDEX ifexists fullname",
	/* 245 */ "cmd ::= VACUUM vinto",
	/* 246 */ "cmd ::= VACUUM nm vinto",
	/* 247 */ "vinto ::= INTO expr",
	/* 248 */ "vinto ::=",
	/* 249 */ "cmd ::= PRAGMA nm dbnm",
	/* 250 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
	/* 251 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
	/* 252 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
	/* 253 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
	/* 254 */ "plus_num ::= PLUS INTEGER|FLOAT",
	/* 255 */ "minus_num ::= MINUS INTEGER|FLOAT",
	/* 256 */ "cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END",
	/* 257 */ "trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause",
	/* 258 */ "trigger_time ::= BEFORE|AFTER",
	/* 259 */ "trigger_time ::= INSTEAD OF",
	/* 260 */ "trigger_time ::=",
	/* 261 */ "trigger_event ::= DELETE|INSERT",
	/* 262 */ "trigger_event ::= UPDATE",
	/* 263 */ "trigger_event ::= UPDATE OF idlist",
	/* 264 */ "when_clause ::=",
	/* 265 */ "when_clause ::= WHEN expr",
	/* 266 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
	/* 267 */ "trigger_cmd_list ::= trigger_cmd SEMI",
	/* 268 */ "trnm ::= nm DOT nm",
	/* 269 */ "tridxby ::= INDEXED BY nm",
	/* 270 */ "tridxby ::= NOT INDEXED",
	/* 271 */ "trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt",
	/* 272 */ "trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt",
	/* 273 */ "trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt",
	/* 274 */ "trigger_cmd ::= scanpt select scanpt",
	/* 275 */ "expr ::= RAISE LP IGNORE RP",
	/* 276 */ "expr ::= RAISE LP raisetype COMMA nm RP",
	/* 277 */ "raisetype ::= ROLLBACK",
	/* 278 */ "raisetype ::= ABORT",
	/* 279 */ "raisetype ::= FAIL",
	/* 280 */ "cmd ::= DROP TRIGGER ifexists fullname",
	/* 281 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
	/* 282 */ "cmd ::= DETACH database_kw_opt expr",
	/* 283 */ "key_opt ::=",
	/* 284 */ "key_opt ::= KEY expr",
	/* 285 */ "cmd ::= REINDEX",
	/* 286 */ "cmd ::= REINDEX nm dbnm",
	/* 287 */ "cmd ::= ANALYZE",
	/* 288 */ "cmd ::= ANALYZE nm dbnm",
	/* 289 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
	/* 290 */ "cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist",
	/* 291 */ "cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm",
	/* 292 */ "add_column_fullname ::= fullname",
	/* 293 */ "cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm",
	/* 294 */ "cmd ::= create_vtab",
	/* 295 */ "cmd ::= create_vtab LP vtabarglist RP",
	/* 296 */ "create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm",
	/* 297 */ "vtabarg ::=",
	/* 298 */ "vtabargtoken ::= ANY",
	/* 299 */ "vtabargtoken ::= lp anylist RP",
	/* 300 */ "lp ::= LP",
	/* 301 */ "with ::= WITH wqlist",
	/* 302 */ "with ::= WITH RECURSIVE wqlist",
	/* 303 */ "wqas ::= AS",
	/* 304 */ "wqas ::= AS MATERIALIZED",
	/* 305 */ "wqas ::= AS NOT MATERIALIZED",
	/* 306 */ "wqitem ::= nm eidlist_opt wqas LP select RP",
	/* 307 */ "wqlist ::= wqitem",
	/* 308 */ "wqlist ::= wqlist COMMA wqitem",
	/* 309 */ "windowdefn_list ::= windowdefn",
	/* 310 */ "windowdefn_list ::= windowdefn_list COMMA windowdefn",
	/* 311 */ "windowdefn ::= nm AS LP window RP",
	/* 312 */ "window ::= PARTITION BY nexprlist orderby_opt frame_opt",
	/* 313 */ "window ::= nm PARTITION BY nexprlist orderby_opt frame_opt",
	/* 314 */ "window ::= ORDER BY sortlist frame_opt",
	/* 315 */ "window ::= nm ORDER BY sortlist frame_opt",
	/* 316 */ "window ::= frame_opt",
	/* 317 */ "window ::= nm frame_opt",
	/* 318 */ "frame_opt ::=",
	/* 319 */ "frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt",
	/* 320 */ "frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt",
	/* 321 */ "range_or_rows ::= RANGE|ROWS|GROUPS",
	/* 322 */ "frame_bound_s ::= frame_bound",
	/* 323 */ "frame_bound_s ::= UNBOUNDED PRECEDING",
	/* 324 */ "frame_bound_e ::= frame_bound",
	/* 325 */ "frame_bound_e ::= UNBOUNDED FOLLOWING",
	/* 326 */ "frame_bound ::= expr PRECEDING|FOLLOWING",
	/* 327 */ "frame_bound ::= CURRENT ROW",
	/* 328 */ "frame_exclude_opt ::=",
	/* 329 */ "frame_exclude_opt ::= EXCLUDE frame_exclude",
	/* 330 */ "frame_exclude ::= NO OTHERS",
	/* 331 */ "frame_exclude ::= CURRENT ROW",
	/* 332 */ "frame_exclude ::= GROUP|TIES",
	/* 333 */ "window_clause ::= WINDOW windowdefn_list",
	/* 334 */ "filter_over ::= filter_clause over_clause",
	/* 335 */ "filter_over ::= over_clause",
	/* 336 */ "filter_over ::= filter_clause",
	/* 337 */ "over_clause ::= OVER LP window RP",
	/* 338 */ "over_clause ::= OVER nm",
	/* 339 */ "filter_clause ::= FILTER LP WHERE expr RP",
	/* 340 */ "input ::= cmdlist",
	/* 341 */ "cmdlist ::= cmdlist ecmd",
	/* 342 */ "cmdlist ::= ecmd",
	/* 343 */ "ecmd ::= SEMI",
	/* 344 */ "ecmd ::= cmdx SEMI",
	/* 345 */ "ecmd ::= explain cmdx SEMI",
	/* 346 */ "trans_opt ::=",
	/* 347 */ "trans_opt ::= TRANSACTION",
	/* 348 */ "trans_opt ::= TRANSACTION nm",
	/* 349 */ "savepoint_opt ::= SAVEPOINT",
	/* 350 */ "savepoint_opt ::=",
	/* 351 */ "cmd ::= create_table create_table_args",
	/* 352 */ "table_option_set ::= table_option",
	/* 353 */ "columnlist ::= columnlist COMMA columnname carglist",
	/* 354 */ "columnlist ::= columnname carglist",
	/* 355 */ "nm ::= ID|INDEXED",
	/* 356 */ "nm ::= STRING",
	/* 357 */ "nm ::= JOIN_KW",
	/* 358 */ "typetoken ::= typename",
	/* 359 */ "typename ::= ID|STRING",
	/* 360 */ "signed ::= plus_num",
	/* 361 */ "signed ::= minus_num",
	/* 362 */ "carglist ::= carglist ccons",
	/* 363 */ "carglist ::=",
	/* 364 */ "ccons ::= NULL onconf",
	/* 365 */ "ccons ::= GENERATED ALWAYS AS generated",
	/* 366 */ "ccons ::= AS generated",
	/* 367 */ "conslist_opt ::= COMMA conslist",
	/* 368 */ "conslist ::= conslist tconscomma tcons",
	/* 369 */ "conslist ::= tcons",
	/* 370 */ "tconscomma ::=",
	/* 371 */ "defer_subclause_opt ::= defer_subclause",
	/* 372 */ "resolvetype ::= raisetype",
	/* 373 */ "selectnowith ::= oneselect",
	/* 374 */ "oneselect ::= values",
	/* 375 */ "sclp ::= selcollist COMMA",
	/* 376 */ "as ::= ID|STRING",
	/* 377 */ "indexed_opt ::= indexed_by",
	/* 378 */ "returning ::=",
	/* 379 */ "expr ::= term",
	/* 380 */ "likeop ::= LIKE_KW|MATCH",
	/* 381 */ "exprlist ::= nexprlist",
	/* 382 */ "nmnum ::= plus_num",
	/* 383 */ "nmnum ::= nm",
	/* 384 */ "nmnum ::= ON",
	/* 385 */ "nmnum ::= DELETE",
	/* 386 */ "nmnum ::= DEFAULT",
	/* 387 */ "plus_num ::= INTEGER|FLOAT",
	/* 388 */ "foreach_clause ::=",
	/* 389 */ "foreach_clause ::= FOR EACH ROW",
	/* 390 */ "trnm ::= nm",
	/* 391 */ "tridxby ::=",
	/* 392 */ "database_kw_opt ::= DATABASE",
	/* 393 */ "database_kw_opt ::=",
	/* 394 */ "kwcolumn_opt ::=",
	/* 395 */ "kwcolumn_opt ::= COLUMNKW",
	/* 396 */ "vtabarglist ::= vtabarg",
	/* 397 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
	/* 398 */ "vtabarg ::= vtabarg vtabargtoken",
	/* 399 */ "anylist ::=",
	/* 400 */ "anylist ::= anylist LP anylist RP",
	/* 401 */ "anylist ::= anylist ANY",
	/* 402 */ "with ::=",
}

/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
func (p *yyParser) yyGrowStack(){
	oldSize := len(p.yystack)
	newSize := oldSize * 2 + 100
	pNew := make([]yyStackEntry, newSize)
	copy(pNew, p.yystack)
	p.yystack = pNew

	if !NDEBUG { // #ifndef NDEBUG
    if yyTraceFILE != nil {
      fmt.Fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
				yyTracePrompt, oldSize, newSize);
    }
	} // #endif
}

/* Datatype of the argument to the memory allocated passed as the
** second argument to sqlite3ParserAlloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
 */
// #ifndef YYMALLOCARGTYPE
// # define YYMALLOCARGTYPE size_t
// #endif

/* Initialize a new parser that has already been allocated.
 */
func (yypParser *yyParser) sqlite3ParserInit(pParse *ctxDecl) {
	yypParser.pParse=pParse

	if !YYNOERRORRECOVERY {
		yypParser.yyerrcnt = -1
	}
	if YYSTACKDEPTH > 0 {
		yypParser.yystack = make([]yyStackEntry, YYSTACKDEPTH)
	} else {
		yypParser.yystack = []yyStackEntry{{}}
	}
	yypParser.yytos = 0
}

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3Parser and sqlite3ParserFree.
 */
func sqlite3ParserAlloc(pParse *ctxDecl) *yyParser {
	yypParser := &yyParser{}
	yypParser.pParse=pParse

	yypParser.sqlite3ParserInit(pParse)
	return yypParser
}

/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
 */
func (yypParser *yyParser) yy_destructor(
	yymajor YYCODETYPE, /* Type code for object to destroy */
	yypminor *YYMINORTYPE, /* The object to be destroyed */
) {
	
	pParse := yypParser.pParse; _ = pParse

	switch yymajor {
	/* Here is inserted the actions which take place when a
	 ** terminal or non-terminal is destroyed.  This can happen
	 ** when the symbol is popped from the stack during a
	 ** reduce or during error processing or when a parser is
	 ** being destroyed before it is finished parsing.
	 **
	 ** Note: during a reduce, the only symbols destroyed are those
	 ** which appear on the RHS of the rule, but which are *not* used
	 ** inside the C code.
	 */
	/********* Begin destructor definitions ***************************************/
    case 204: /* select */
    case 239: /* selectnowith */
    case 240: /* oneselect */
    case 252: /* values */
{
//line 513 "parse.y"
sqlite3SelectDelete(pParse.db, (yypminor.yy361));
//line 2346 "parse.go"
}
      break
    case 216: /* term */
    case 217: /* expr */
    case 246: /* where_opt */
    case 248: /* having_opt */
    case 267: /* where_opt_ret */
    case 278: /* case_operand */
    case 280: /* case_else */
    case 283: /* vinto */
    case 290: /* when_clause */
    case 295: /* key_opt */
    case 311: /* filter_clause */
{
//line 1059 "parse.y"
sqlite3ExprDelete(pParse.db, (yypminor.yy634));
//line 2363 "parse.go"
}
      break
    case 221: /* eidlist_opt */
    case 231: /* sortlist */
    case 232: /* eidlist */
    case 244: /* selcollist */
    case 247: /* groupby_opt */
    case 249: /* orderby_opt */
    case 253: /* nexprlist */
    case 254: /* sclp */
    case 261: /* exprlist */
    case 268: /* setlist */
    case 277: /* paren_exprlist */
    case 279: /* case_exprlist */
    case 310: /* part_opt */
{
//line 1477 "parse.y"
sqlite3ExprListDelete(pParse.db, (yypminor.yy614));
//line 2382 "parse.go"
}
      break
    case 238: /* fullname */
    case 245: /* from */
    case 256: /* seltablist */
    case 257: /* stl_prefix */
    case 262: /* xfullname */
{
//line 779 "parse.y"
sqlite3SrcListDelete(pParse.db, (yypminor.yy157));
//line 2393 "parse.go"
}
      break
    case 241: /* wqlist */
{
//line 1768 "parse.y"
sqlite3WithDelete(pParse.db, (yypminor.yy357));
//line 2400 "parse.go"
}
      break
    case 251: /* window_clause */
    case 306: /* windowdefn_list */
{
//line 1897 "parse.y"
sqlite3WindowListDelete(pParse.db, (yypminor.yy179));
//line 2408 "parse.go"
}
      break
    case 263: /* idlist */
    case 270: /* idlist_opt */
{
//line 1044 "parse.y"
sqlite3IdListDelete(pParse.db, (yypminor.yy106));
//line 2416 "parse.go"
}
      break
    case 273: /* filter_over */
    case 307: /* windowdefn */
    case 308: /* window */
    case 309: /* frame_opt */
    case 312: /* over_clause */
{
//line 1834 "parse.y"
sqlite3WindowDelete(pParse.db, (yypminor.yy179));
//line 2427 "parse.go"
}
      break
    case 286: /* trigger_cmd_list */
    case 291: /* trigger_cmd */
{
//line 1596 "parse.y"
sqlite3DeleteTriggerStep(pParse.db, (yypminor.yy429));
//line 2435 "parse.go"
}
      break
    case 288: /* trigger_event */
{
//line 1582 "parse.y"
sqlite3IdListDelete(pParse.db, (yypminor.yy121).b);
//line 2442 "parse.go"
}
      break
    case 314: /* frame_bound */
    case 315: /* frame_bound_s */
    case 316: /* frame_bound_e */
{
//line 1839 "parse.y"
sqlite3ExprDelete(pParse.db, (yypminor.yy600).pExpr);
//line 2451 "parse.go"
}
      break
	/********* End destructor definitions *****************************************/
	default:
		break /* If no destructor action specified: do nothing */
	}
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
 */
func (pParser *yyParser) yy_pop_parser_stack() {
	assert(pParser.yytos>0, "pParser.yytos>0")
	yytos := pParser.yystack[pParser.yytos]
	pParser.yytos--
	if !NDEBUG {
		if yyTraceFILE != nil {
			fmt.Fprintf(yyTraceFILE, "%sPopping %s\n",
				yyTracePrompt,
				yyTokenName[yytos.major])
		}
	}
	pParser.yy_destructor(yytos.major, &yytos.minor)
}

/*
** Clear all secondary memory allocations from the parser
 */
func (pParser *yyParser) sqlite3ParserFinalize() {
	for pParser.yytos > 0 {
		pParser.yy_pop_parser_stack()
	}
}

/*
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
 */
func (pParser *yyParser) sqlite3ParserFree() {
	pParser.sqlite3ParserFinalize()
}

/*
** Return the peak depth of the stack for a parser.
 */
func (pParser *yyParser) sqlite3ParserStackPeak() int {
	return pParser.yyhwm
}

/* This array of booleans keeps track of the parser statement
** coverage.  The element yycoverage[X][Y] is set when the parser
** is in state X and has a lookahead token Y.  In a well-tested
** systems, every element of this matrix should end up being set.
 */
var yycoverage = [YYNSTATE][YYNTOKEN]bool{}

/*
** Write into out a description of every state/lookahead combination that
**
**   (1)  has not been used by the parser, and
**   (2)  is not a syntax error.
**
** Return the number of missed state/lookahead combinations.
 */
func sqlite3ParserCoverage(out io.Writer) int {
	nMissed := 0
	for stateno := 0; stateno < YYNSTATE; stateno++ {
		i := yy_shift_ofst[stateno]
		for iLookAhead := 0; iLookAhead < YYNTOKEN; iLookAhead++ {
			if yy_lookahead[int(i)+iLookAhead] != YYCODETYPE(iLookAhead) {
				continue
			}
			if !yycoverage[stateno][iLookAhead] {
				nMissed++
			}
			if out != nil {
				ok := "missed"
				if yycoverage[stateno][iLookAhead] {
					ok = "ok"
				}
				fmt.Fprintf(out, "State %d lookahead %s %s\n", stateno,
					yyTokenName[iLookAhead],
					ok)
			}
		}
	}
	return nMissed
}

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
 */
func yy_find_shift_action(
	lookAhead YYCODETYPE, /* The look-ahead token */
	stateno YYACTIONTYPE, /* Current state number */
) YYACTIONTYPE {
	iLookAhead := int(lookAhead)

	if stateno > YY_MAX_SHIFT {
		return stateno
	}
	assert(stateno <= YY_SHIFT_COUNT, "stateno <= YY_SHIFT_COUNT")
	if YYCOVERAGE {
		yycoverage[stateno][iLookAhead] = true
	}
	for {
		i := int(yy_shift_ofst[stateno])
		assert(i >= 0, "i>=0")
		assert(i <= YY_ACTTAB_COUNT, "i<=YY_ACTTAB_COUNT")
		assert(i+YYNTOKEN <= len(yy_lookahead), "i+YYNTOKEN<=len(yy_lookahead)")
		assert(iLookAhead != YYNOCODE, "iLookAhead!=YYNOCODE")
		assert(iLookAhead < YYNTOKEN, "iLookAhead < YYNTOKEN")
		i += iLookAhead
		assert(i < len(yy_lookahead), "i<len(yy_lookahead)")
		if int(yy_lookahead[i]) != iLookAhead {
			if YYFALLBACK {
				assert(iLookAhead < len(yyFallback), "iLookAhead<len(yyfallback)")
				iFallback := int(yyFallback[iLookAhead])
				if iFallback != 0 {
					if !NDEBUG {
						if yyTraceFILE != nil {
							fmt.Fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
								yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback])
						}
					}
					assert(yyFallback[iFallback] == 0, "yyFallback[iFallback]==0") /* Fallback loop must terminate */
					iLookAhead = iFallback
					continue
				}
			}
			if YYWILDCARD > 0 {
				{
					j := i - iLookAhead + YYWILDCARD
					assert(j < len(yy_lookahead), "j < len(yy_lookahead)")
					if int(yy_lookahead[j]) == YYWILDCARD && iLookAhead > 0 {
						if !NDEBUG {
							if yyTraceFILE != nil {
								fmt.Fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
									yyTracePrompt, yyTokenName[iLookAhead],
									yyTokenName[YYWILDCARD])
							}
						} /* NDEBUG */
						return yy_action[j]
					}
				}
			} /* YYWILDCARD */
			return yy_default[stateno]
		} else {
			assert(i >= 0 && i < len(yy_action), "i >= 0 && i < len(yy_action)")
			return yy_action[i]
		}
	}
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
 */
func yy_find_reduce_action(
	stateno YYACTIONTYPE, /* Current state number */
	lookAhead YYCODETYPE, /* The look-ahead token */
) YYACTIONTYPE {
	iLookAhead := int(lookAhead)
	if YYERRORSYMBOL > 0 {
		if stateno > YY_REDUCE_COUNT {
			return yy_default[stateno]
		}
	} else {
		assert(stateno <= YY_REDUCE_COUNT, "stateno <= YY_REDUCE_COUNT")
	}
	i := int(yy_reduce_ofst[stateno])
	assert(iLookAhead != YYNOCODE, "iLookAhead != YYNOCODE")
	i += iLookAhead
	if YYERRORSYMBOL > 0 {
		if i < 0 || i >= YY_ACTTAB_COUNT || int(yy_lookahead[i]) != iLookAhead {
			return yy_default[stateno]
		}
	} else {
		assert(i >= 0 && i < YY_ACTTAB_COUNT, "i >= 0 && i < YY_ACTTAB_COUNT")
		assert(int(yy_lookahead[i]) == iLookAhead, "int(yy_lookahead[i]) == iLookAhead")
	}
	return yy_action[i]
}

/*
** The following routine is called if the stack overflows.
 */
func (yypParser *yyParser) yyStackOverflow() {
	
	pParse := yypParser.pParse; _ = pParse

	if !NDEBUG {
		if yyTraceFILE != nil {
			fmt.Fprintf(yyTraceFILE, "%sStack Overflow!\n", yyTracePrompt)
		}
	}
	for yypParser.yytos > 0 {
		yypParser.yy_pop_parser_stack()
	}
	/* Here code is inserted which will execute if the parser
	 ** stack every overflows */
	/******** Begin %stack_overflow code ******************************************/
//line 47 "parse.y"

  sqlite3ErrorMsg(pParse, "parser stack overflow");
//line 2665 "parse.go"
	/******** End %stack_overflow code ********************************************/
	 /* Suppress warning about unused %extra_argument var */
	yypParser.pParse=pParse

}

/*
** Print tracing information for a SHIFT action
 */
func (yypParser *yyParser) yyTraceShift(yyNewState int, zTag string) {
	if !NDEBUG {
		if yyTraceFILE != nil {
			if yyNewState < YYNSTATE {
				fmt.Fprintf(yyTraceFILE, "%s%s '%s', go to state %d\n",
					yyTracePrompt, zTag, yyTokenName[yypParser.yystack[yypParser.yytos].major],
					yyNewState)
			} else {
				fmt.Fprintf(yyTraceFILE, "%s%s '%s', pending reduce %d\n",
					yyTracePrompt, zTag, yyTokenName[yypParser.yystack[yypParser.yytos].major],
					yyNewState-YY_MIN_REDUCE)
			}
		}
	}
}

/*
** Perform a shift action.
 */
func (yypParser *yyParser) yy_shift(
	yyNewState YYACTIONTYPE, /* The new state to shift in */
	yyMajor YYCODETYPE, /* The major token to shift in */
	yyMinor sqlite3ParserTOKENTYPE, /* The minor token to shift in */
) {
	yypParser.yytos++

	if YYTRACKMAXSTACKDEPTH {
		if yypParser.yytos > yypParser.yyhwm {
			yypParser.yyhwm++
			assert(yypParser.yyhwm == yypParser.yytos, "yypParser.yyhwm == yypParser.yytos")
		}
	}
	if YYSTACKDEPTH > 0 {
		if yypParser.yytos >= YYSTACKDEPTH {
			yypParser.yyStackOverflow()
			return
		}
	} else {
		if yypParser.yytos+1 >= len(yypParser.yystack) {
			yypParser.yyGrowStack()
		}
	}

	if yyNewState > YY_MAX_SHIFT {
		yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE
	}

	yytos := &yypParser.yystack[yypParser.yytos]
	yytos.stateno = yyNewState
	yytos.major = yyMajor
	yytos.minor.yy0 = yyMinor

	yypParser.yyTraceShift(int(yyNewState), "Shift")
}

/* For rule J, yyRuleInfoLhs[J] contains the symbol on the left-hand side
** of that rule */
var yyRuleInfoLhs = []YYCODETYPE{
	189, /* (0) explain ::= EXPLAIN */
	189, /* (1) explain ::= EXPLAIN QUERY PLAN */
	188, /* (2) cmdx ::= cmd */
	190, /* (3) cmd ::= BEGIN transtype trans_opt */
	191, /* (4) transtype ::= */
	191, /* (5) transtype ::= DEFERRED */
	191, /* (6) transtype ::= IMMEDIATE */
	191, /* (7) transtype ::= EXCLUSIVE */
	190, /* (8) cmd ::= COMMIT|END trans_opt */
	190, /* (9) cmd ::= ROLLBACK trans_opt */
	190, /* (10) cmd ::= SAVEPOINT nm */
	190, /* (11) cmd ::= RELEASE savepoint_opt nm */
	190, /* (12) cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
	195, /* (13) create_table ::= createkw temp TABLE ifnotexists nm dbnm */
	197, /* (14) createkw ::= CREATE */
	199, /* (15) ifnotexists ::= */
	199, /* (16) ifnotexists ::= IF NOT EXISTS */
	198, /* (17) temp ::= TEMP */
	198, /* (18) temp ::= */
	196, /* (19) create_table_args ::= LP columnlist conslist_opt RP table_option_set */
	196, /* (20) create_table_args ::= AS select */
	203, /* (21) table_option_set ::= */
	203, /* (22) table_option_set ::= table_option_set COMMA table_option */
	205, /* (23) table_option ::= WITHOUT nm */
	205, /* (24) table_option ::= nm */
	206, /* (25) columnname ::= nm typetoken */
	208, /* (26) typetoken ::= */
	208, /* (27) typetoken ::= typename LP signed RP */
	208, /* (28) typetoken ::= typename LP signed COMMA signed RP */
	209, /* (29) typename ::= typename ID|STRING */
	213, /* (30) scanpt ::= */
	214, /* (31) scantok ::= */
	215, /* (32) ccons ::= CONSTRAINT nm */
	215, /* (33) ccons ::= DEFAULT scantok term */
	215, /* (34) ccons ::= DEFAULT LP expr RP */
	215, /* (35) ccons ::= DEFAULT PLUS scantok term */
	215, /* (36) ccons ::= DEFAULT MINUS scantok term */
	215, /* (37) ccons ::= DEFAULT scantok ID|INDEXED */
	215, /* (38) ccons ::= NOT NULL onconf */
	215, /* (39) ccons ::= PRIMARY KEY sortorder onconf autoinc */
	215, /* (40) ccons ::= UNIQUE onconf */
	215, /* (41) ccons ::= CHECK LP expr RP */
	215, /* (42) ccons ::= REFERENCES nm eidlist_opt refargs */
	215, /* (43) ccons ::= defer_subclause */
	215, /* (44) ccons ::= COLLATE ID|STRING */
	224, /* (45) generated ::= LP expr RP */
	224, /* (46) generated ::= LP expr RP ID */
	220, /* (47) autoinc ::= */
	220, /* (48) autoinc ::= AUTOINCR */
	222, /* (49) refargs ::= */
	222, /* (50) refargs ::= refargs refarg */
	225, /* (51) refarg ::= MATCH nm */
	225, /* (52) refarg ::= ON INSERT refact */
	225, /* (53) refarg ::= ON DELETE refact */
	225, /* (54) refarg ::= ON UPDATE refact */
	226, /* (55) refact ::= SET NULL */
	226, /* (56) refact ::= SET DEFAULT */
	226, /* (57) refact ::= CASCADE */
	226, /* (58) refact ::= RESTRICT */
	226, /* (59) refact ::= NO ACTION */
	223, /* (60) defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
	223, /* (61) defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
	227, /* (62) init_deferred_pred_opt ::= */
	227, /* (63) init_deferred_pred_opt ::= INITIALLY DEFERRED */
	227, /* (64) init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
	202, /* (65) conslist_opt ::= */
	229, /* (66) tconscomma ::= COMMA */
	230, /* (67) tcons ::= CONSTRAINT nm */
	230, /* (68) tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf */
	230, /* (69) tcons ::= UNIQUE LP sortlist RP onconf */
	230, /* (70) tcons ::= CHECK LP expr RP onconf */
	230, /* (71) tcons ::= FOREIGN KEY LP eidlist RP REFERENCES nm eidlist_opt refargs defer_subclause_opt */
	233, /* (72) defer_subclause_opt ::= */
	218, /* (73) onconf ::= */
	218, /* (74) onconf ::= ON CONFLICT resolvetype */
	234, /* (75) orconf ::= */
	234, /* (76) orconf ::= OR resolvetype */
	235, /* (77) resolvetype ::= IGNORE */
	235, /* (78) resolvetype ::= REPLACE */
	190, /* (79) cmd ::= DROP TABLE ifexists fullname */
	237, /* (80) ifexists ::= IF EXISTS */
	237, /* (81) ifexists ::= */
	190, /* (82) cmd ::= createkw temp VIEW ifnotexists nm dbnm eidlist_opt AS select */
	190, /* (83) cmd ::= DROP VIEW ifexists fullname */
	190, /* (84) cmd ::= select */
	204, /* (85) select ::= WITH wqlist selectnowith */
	204, /* (86) select ::= WITH RECURSIVE wqlist selectnowith */
	204, /* (87) select ::= selectnowith */
	239, /* (88) selectnowith ::= selectnowith multiselect_op oneselect */
	242, /* (89) multiselect_op ::= UNION */
	242, /* (90) multiselect_op ::= UNION ALL */
	242, /* (91) multiselect_op ::= EXCEPT|INTERSECT */
	240, /* (92) oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
	240, /* (93) oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
	252, /* (94) values ::= VALUES LP nexprlist RP */
	252, /* (95) values ::= values COMMA LP nexprlist RP */
	243, /* (96) distinct ::= DISTINCT */
	243, /* (97) distinct ::= ALL */
	243, /* (98) distinct ::= */
	254, /* (99) sclp ::= */
	244, /* (100) selcollist ::= sclp scanpt expr scanpt as */
	244, /* (101) selcollist ::= sclp scanpt STAR */
	244, /* (102) selcollist ::= sclp scanpt nm DOT STAR */
	255, /* (103) as ::= AS nm */
	255, /* (104) as ::= */
	245, /* (105) from ::= */
	245, /* (106) from ::= FROM seltablist */
	257, /* (107) stl_prefix ::= seltablist joinop */
	257, /* (108) stl_prefix ::= */
	256, /* (109) seltablist ::= stl_prefix nm dbnm as on_using */
	256, /* (110) seltablist ::= stl_prefix nm dbnm as indexed_by on_using */
	256, /* (111) seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_using */
	256, /* (112) seltablist ::= stl_prefix LP select RP as on_using */
	256, /* (113) seltablist ::= stl_prefix LP seltablist RP as on_using */
	200, /* (114) dbnm ::= */
	200, /* (115) dbnm ::= DOT nm */
	238, /* (116) fullname ::= nm */
	238, /* (117) fullname ::= nm DOT nm */
	262, /* (118) xfullname ::= nm */
	262, /* (119) xfullname ::= nm DOT nm */
	262, /* (120) xfullname ::= nm DOT nm AS nm */
	262, /* (121) xfullname ::= nm AS nm */
	258, /* (122) joinop ::= COMMA|JOIN */
	258, /* (123) joinop ::= JOIN_KW JOIN */
	258, /* (124) joinop ::= JOIN_KW nm JOIN */
	258, /* (125) joinop ::= JOIN_KW nm nm JOIN */
	259, /* (126) on_using ::= ON expr */
	259, /* (127) on_using ::= USING LP idlist RP */
	259, /* (128) on_using ::= */
	264, /* (129) indexed_opt ::= */
	260, /* (130) indexed_by ::= INDEXED BY nm */
	260, /* (131) indexed_by ::= NOT INDEXED */
	249, /* (132) orderby_opt ::= */
	249, /* (133) orderby_opt ::= ORDER BY sortlist */
	231, /* (134) sortlist ::= sortlist COMMA expr sortorder nulls */
	231, /* (135) sortlist ::= expr sortorder nulls */
	219, /* (136) sortorder ::= ASC */
	219, /* (137) sortorder ::= DESC */
	219, /* (138) sortorder ::= */
	265, /* (139) nulls ::= NULLS FIRST */
	265, /* (140) nulls ::= NULLS LAST */
	265, /* (141) nulls ::= */
	247, /* (142) groupby_opt ::= */
	247, /* (143) groupby_opt ::= GROUP BY nexprlist */
	248, /* (144) having_opt ::= */
	248, /* (145) having_opt ::= HAVING expr */
	250, /* (146) limit_opt ::= */
	250, /* (147) limit_opt ::= LIMIT expr */
	250, /* (148) limit_opt ::= LIMIT expr OFFSET expr */
	250, /* (149) limit_opt ::= LIMIT expr COMMA expr */
	190, /* (150) cmd ::= with DELETE FROM xfullname indexed_opt where_opt_ret */
	246, /* (151) where_opt ::= */
	246, /* (152) where_opt ::= WHERE expr */
	267, /* (153) where_opt_ret ::= */
	267, /* (154) where_opt_ret ::= WHERE expr */
	267, /* (155) where_opt_ret ::= RETURNING selcollist */
	267, /* (156) where_opt_ret ::= WHERE expr RETURNING selcollist */
	190, /* (157) cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt_ret */
	268, /* (158) setlist ::= setlist COMMA nm EQ expr */
	268, /* (159) setlist ::= setlist COMMA LP idlist RP EQ expr */
	268, /* (160) setlist ::= nm EQ expr */
	268, /* (161) setlist ::= LP idlist RP EQ expr */
	190, /* (162) cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert */
	190, /* (163) cmd ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning */
	271, /* (164) upsert ::= */
	271, /* (165) upsert ::= RETURNING selcollist */
	271, /* (166) upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt upsert */
	271, /* (167) upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING upsert */
	271, /* (168) upsert ::= ON CONFLICT DO NOTHING returning */
	271, /* (169) upsert ::= ON CONFLICT DO UPDATE SET setlist where_opt returning */
	272, /* (170) returning ::= RETURNING selcollist */
	269, /* (171) insert_cmd ::= INSERT orconf */
	269, /* (172) insert_cmd ::= REPLACE */
	270, /* (173) idlist_opt ::= */
	270, /* (174) idlist_opt ::= LP idlist RP */
	263, /* (175) idlist ::= idlist COMMA nm */
	263, /* (176) idlist ::= nm */
	217, /* (177) expr ::= LP expr RP */
	217, /* (178) expr ::= ID|INDEXED */
	217, /* (179) expr ::= JOIN_KW */
	217, /* (180) expr ::= nm DOT nm */
	217, /* (181) expr ::= nm DOT nm DOT nm */
	216, /* (182) term ::= NULL|FLOAT|BLOB */
	216, /* (183) term ::= STRING */
	216, /* (184) term ::= INTEGER */
	217, /* (185) expr ::= VARIABLE */
	217, /* (186) expr ::= expr COLLATE ID|STRING */
	217, /* (187) expr ::= CAST LP expr AS typetoken RP */
	217, /* (188) expr ::= ID|INDEXED LP distinct exprlist RP */
	217, /* (189) expr ::= ID|INDEXED LP STAR RP */
	217, /* (190) expr ::= ID|INDEXED LP distinct exprlist RP filter_over */
	217, /* (191) expr ::= ID|INDEXED LP STAR RP filter_over */
	216, /* (192) term ::= CTIME_KW */
	217, /* (193) expr ::= LP nexprlist COMMA expr RP */
	217, /* (194) expr ::= expr AND expr */
	217, /* (195) expr ::= expr OR expr */
	217, /* (196) expr ::= expr LT|GT|GE|LE expr */
	217, /* (197) expr ::= expr EQ|NE expr */
	217, /* (198) expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */
	217, /* (199) expr ::= expr PLUS|MINUS expr */
	217, /* (200) expr ::= expr STAR|SLASH|REM expr */
	217, /* (201) expr ::= expr CONCAT expr */
	274, /* (202) likeop ::= NOT LIKE_KW|MATCH */
	217, /* (203) expr ::= expr likeop expr */
	217, /* (204) expr ::= expr likeop expr ESCAPE expr */
	217, /* (205) expr ::= expr ISNULL|NOTNULL */
	217, /* (206) expr ::= expr NOT NULL */
	217, /* (207) expr ::= expr IS expr */
	217, /* (208) expr ::= expr IS NOT expr */
	217, /* (209) expr ::= NOT expr */
	217, /* (210) expr ::= BITNOT expr */
	217, /* (211) expr ::= PLUS|MINUS expr */
	217, /* (212) expr ::= expr PTR expr */
	275, /* (213) between_op ::= BETWEEN */
	275, /* (214) between_op ::= NOT BETWEEN */
	217, /* (215) expr ::= expr between_op expr AND expr */
	276, /* (216) in_op ::= IN */
	276, /* (217) in_op ::= NOT IN */
	217, /* (218) expr ::= expr in_op LP exprlist RP */
	217, /* (219) expr ::= LP select RP */
	217, /* (220) expr ::= expr in_op LP select RP */
	217, /* (221) expr ::= expr in_op nm dbnm paren_exprlist */
	217, /* (222) expr ::= EXISTS LP select RP */
	217, /* (223) expr ::= CASE case_operand case_exprlist case_else END */
	279, /* (224) case_exprlist ::= case_exprlist WHEN expr THEN expr */
	279, /* (225) case_exprlist ::= WHEN expr THEN expr */
	280, /* (226) case_else ::= ELSE expr */
	280, /* (227) case_else ::= */
	278, /* (228) case_operand ::= expr */
	278, /* (229) case_operand ::= */
	261, /* (230) exprlist ::= */
	253, /* (231) nexprlist ::= nexprlist COMMA expr */
	253, /* (232) nexprlist ::= expr */
	277, /* (233) paren_exprlist ::= */
	277, /* (234) paren_exprlist ::= LP exprlist RP */
	190, /* (235) cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
	281, /* (236) uniqueflag ::= UNIQUE */
	281, /* (237) uniqueflag ::= */
	221, /* (238) eidlist_opt ::= */
	221, /* (239) eidlist_opt ::= LP eidlist RP */
	232, /* (240) eidlist ::= eidlist COMMA nm collate sortorder */
	232, /* (241) eidlist ::= nm collate sortorder */
	282, /* (242) collate ::= */
	282, /* (243) collate ::= COLLATE ID|STRING */
	190, /* (244) cmd ::= DROP INDEX ifexists fullname */
	190, /* (245) cmd ::= VACUUM vinto */
	190, /* (246) cmd ::= VACUUM nm vinto */
	283, /* (247) vinto ::= INTO expr */
	283, /* (248) vinto ::= */
	190, /* (249) cmd ::= PRAGMA nm dbnm */
	190, /* (250) cmd ::= PRAGMA nm dbnm EQ nmnum */
	190, /* (251) cmd ::= PRAGMA nm dbnm LP nmnum RP */
	190, /* (252) cmd ::= PRAGMA nm dbnm EQ minus_num */
	190, /* (253) cmd ::= PRAGMA nm dbnm LP minus_num RP */
	211, /* (254) plus_num ::= PLUS INTEGER|FLOAT */
	212, /* (255) minus_num ::= MINUS INTEGER|FLOAT */
	190, /* (256) cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END */
	285, /* (257) trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause */
	287, /* (258) trigger_time ::= BEFORE|AFTER */
	287, /* (259) trigger_time ::= INSTEAD OF */
	287, /* (260) trigger_time ::= */
	288, /* (261) trigger_event ::= DELETE|INSERT */
	288, /* (262) trigger_event ::= UPDATE */
	288, /* (263) trigger_event ::= UPDATE OF idlist */
	290, /* (264) when_clause ::= */
	290, /* (265) when_clause ::= WHEN expr */
	286, /* (266) trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
	286, /* (267) trigger_cmd_list ::= trigger_cmd SEMI */
	292, /* (268) trnm ::= nm DOT nm */
	293, /* (269) tridxby ::= INDEXED BY nm */
	293, /* (270) tridxby ::= NOT INDEXED */
	291, /* (271) trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt */
	291, /* (272) trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt */
	291, /* (273) trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt */
	291, /* (274) trigger_cmd ::= scanpt select scanpt */
	217, /* (275) expr ::= RAISE LP IGNORE RP */
	217, /* (276) expr ::= RAISE LP raisetype COMMA nm RP */
	236, /* (277) raisetype ::= ROLLBACK */
	236, /* (278) raisetype ::= ABORT */
	236, /* (279) raisetype ::= FAIL */
	190, /* (280) cmd ::= DROP TRIGGER ifexists fullname */
	190, /* (281) cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
	190, /* (282) cmd ::= DETACH database_kw_opt expr */
	295, /* (283) key_opt ::= */
	295, /* (284) key_opt ::= KEY expr */
	190, /* (285) cmd ::= REINDEX */
	190, /* (286) cmd ::= REINDEX nm dbnm */
	190, /* (287) cmd ::= ANALYZE */
	190, /* (288) cmd ::= ANALYZE nm dbnm */
	190, /* (289) cmd ::= ALTER TABLE fullname RENAME TO nm */
	190, /* (290) cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist */
	190, /* (291) cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
	296, /* (292) add_column_fullname ::= fullname */
	190, /* (293) cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm */
	190, /* (294) cmd ::= create_vtab */
	190, /* (295) cmd ::= create_vtab LP vtabarglist RP */
	298, /* (296) create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm */
	300, /* (297) vtabarg ::= */
	301, /* (298) vtabargtoken ::= ANY */
	301, /* (299) vtabargtoken ::= lp anylist RP */
	302, /* (300) lp ::= LP */
	266, /* (301) with ::= WITH wqlist */
	266, /* (302) with ::= WITH RECURSIVE wqlist */
	305, /* (303) wqas ::= AS */
	305, /* (304) wqas ::= AS MATERIALIZED */
	305, /* (305) wqas ::= AS NOT MATERIALIZED */
	304, /* (306) wqitem ::= nm eidlist_opt wqas LP select RP */
	241, /* (307) wqlist ::= wqitem */
	241, /* (308) wqlist ::= wqlist COMMA wqitem */
	306, /* (309) windowdefn_list ::= windowdefn */
	306, /* (310) windowdefn_list ::= windowdefn_list COMMA windowdefn */
	307, /* (311) windowdefn ::= nm AS LP window RP */
	308, /* (312) window ::= PARTITION BY nexprlist orderby_opt frame_opt */
	308, /* (313) window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
	308, /* (314) window ::= ORDER BY sortlist frame_opt */
	308, /* (315) window ::= nm ORDER BY sortlist frame_opt */
	308, /* (316) window ::= frame_opt */
	308, /* (317) window ::= nm frame_opt */
	309, /* (318) frame_opt ::= */
	309, /* (319) frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
	309, /* (320) frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
	313, /* (321) range_or_rows ::= RANGE|ROWS|GROUPS */
	315, /* (322) frame_bound_s ::= frame_bound */
	315, /* (323) frame_bound_s ::= UNBOUNDED PRECEDING */
	316, /* (324) frame_bound_e ::= frame_bound */
	316, /* (325) frame_bound_e ::= UNBOUNDED FOLLOWING */
	314, /* (326) frame_bound ::= expr PRECEDING|FOLLOWING */
	314, /* (327) frame_bound ::= CURRENT ROW */
	317, /* (328) frame_exclude_opt ::= */
	317, /* (329) frame_exclude_opt ::= EXCLUDE frame_exclude */
	318, /* (330) frame_exclude ::= NO OTHERS */
	318, /* (331) frame_exclude ::= CURRENT ROW */
	318, /* (332) frame_exclude ::= GROUP|TIES */
	251, /* (333) window_clause ::= WINDOW windowdefn_list */
	273, /* (334) filter_over ::= filter_clause over_clause */
	273, /* (335) filter_over ::= over_clause */
	273, /* (336) filter_over ::= filter_clause */
	312, /* (337) over_clause ::= OVER LP window RP */
	312, /* (338) over_clause ::= OVER nm */
	311, /* (339) filter_clause ::= FILTER LP WHERE expr RP */
	185, /* (340) input ::= cmdlist */
	186, /* (341) cmdlist ::= cmdlist ecmd */
	186, /* (342) cmdlist ::= ecmd */
	187, /* (343) ecmd ::= SEMI */
	187, /* (344) ecmd ::= cmdx SEMI */
	187, /* (345) ecmd ::= explain cmdx SEMI */
	192, /* (346) trans_opt ::= */
	192, /* (347) trans_opt ::= TRANSACTION */
	192, /* (348) trans_opt ::= TRANSACTION nm */
	194, /* (349) savepoint_opt ::= SAVEPOINT */
	194, /* (350) savepoint_opt ::= */
	190, /* (351) cmd ::= create_table create_table_args */
	203, /* (352) table_option_set ::= table_option */
	201, /* (353) columnlist ::= columnlist COMMA columnname carglist */
	201, /* (354) columnlist ::= columnname carglist */
	193, /* (355) nm ::= ID|INDEXED */
	193, /* (356) nm ::= STRING */
	193, /* (357) nm ::= JOIN_KW */
	208, /* (358) typetoken ::= typename */
	209, /* (359) typename ::= ID|STRING */
	210, /* (360) signed ::= plus_num */
	210, /* (361) signed ::= minus_num */
	207, /* (362) carglist ::= carglist ccons */
	207, /* (363) carglist ::= */
	215, /* (364) ccons ::= NULL onconf */
	215, /* (365) ccons ::= GENERATED ALWAYS AS generated */
	215, /* (366) ccons ::= AS generated */
	202, /* (367) conslist_opt ::= COMMA conslist */
	228, /* (368) conslist ::= conslist tconscomma tcons */
	228, /* (369) conslist ::= tcons */
	229, /* (370) tconscomma ::= */
	233, /* (371) defer_subclause_opt ::= defer_subclause */
	235, /* (372) resolvetype ::= raisetype */
	239, /* (373) selectnowith ::= oneselect */
	240, /* (374) oneselect ::= values */
	254, /* (375) sclp ::= selcollist COMMA */
	255, /* (376) as ::= ID|STRING */
	264, /* (377) indexed_opt ::= indexed_by */
	272, /* (378) returning ::= */
	217, /* (379) expr ::= term */
	274, /* (380) likeop ::= LIKE_KW|MATCH */
	261, /* (381) exprlist ::= nexprlist */
	284, /* (382) nmnum ::= plus_num */
	284, /* (383) nmnum ::= nm */
	284, /* (384) nmnum ::= ON */
	284, /* (385) nmnum ::= DELETE */
	284, /* (386) nmnum ::= DEFAULT */
	211, /* (387) plus_num ::= INTEGER|FLOAT */
	289, /* (388) foreach_clause ::= */
	289, /* (389) foreach_clause ::= FOR EACH ROW */
	292, /* (390) trnm ::= nm */
	293, /* (391) tridxby ::= */
	294, /* (392) database_kw_opt ::= DATABASE */
	294, /* (393) database_kw_opt ::= */
	297, /* (394) kwcolumn_opt ::= */
	297, /* (395) kwcolumn_opt ::= COLUMNKW */
	299, /* (396) vtabarglist ::= vtabarg */
	299, /* (397) vtabarglist ::= vtabarglist COMMA vtabarg */
	300, /* (398) vtabarg ::= vtabarg vtabargtoken */
	303, /* (399) anylist ::= */
	303, /* (400) anylist ::= anylist LP anylist RP */
	303, /* (401) anylist ::= anylist ANY */
	266, /* (402) with ::= */
}

/* For rule J, yyRuleInfoNRhs[J] contains the negative of the number
** of symbols on the right-hand side of that rule. */
var yyRuleInfoNRhs = []int8{
	-1, /* (0) explain ::= EXPLAIN */
	-3, /* (1) explain ::= EXPLAIN QUERY PLAN */
	-1, /* (2) cmdx ::= cmd */
	-3, /* (3) cmd ::= BEGIN transtype trans_opt */
	0, /* (4) transtype ::= */
	-1, /* (5) transtype ::= DEFERRED */
	-1, /* (6) transtype ::= IMMEDIATE */
	-1, /* (7) transtype ::= EXCLUSIVE */
	-2, /* (8) cmd ::= COMMIT|END trans_opt */
	-2, /* (9) cmd ::= ROLLBACK trans_opt */
	-2, /* (10) cmd ::= SAVEPOINT nm */
	-3, /* (11) cmd ::= RELEASE savepoint_opt nm */
	-5, /* (12) cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
	-6, /* (13) create_table ::= createkw temp TABLE ifnotexists nm dbnm */
	-1, /* (14) createkw ::= CREATE */
	0, /* (15) ifnotexists ::= */
	-3, /* (16) ifnotexists ::= IF NOT EXISTS */
	-1, /* (17) temp ::= TEMP */
	0, /* (18) temp ::= */
	-5, /* (19) create_table_args ::= LP columnlist conslist_opt RP table_option_set */
	-2, /* (20) create_table_args ::= AS select */
	0, /* (21) table_option_set ::= */
	-3, /* (22) table_option_set ::= table_option_set COMMA table_option */
	-2, /* (23) table_option ::= WITHOUT nm */
	-1, /* (24) table_option ::= nm */
	-2, /* (25) columnname ::= nm typetoken */
	0, /* (26) typetoken ::= */
	-4, /* (27) typetoken ::= typename LP signed RP */
	-6, /* (28) typetoken ::= typename LP signed COMMA signed RP */
	-2, /* (29) typename ::= typename ID|STRING */
	0, /* (30) scanpt ::= */
	0, /* (31) scantok ::= */
	-2, /* (32) ccons ::= CONSTRAINT nm */
	-3, /* (33) ccons ::= DEFAULT scantok term */
	-4, /* (34) ccons ::= DEFAULT LP expr RP */
	-4, /* (35) ccons ::= DEFAULT PLUS scantok term */
	-4, /* (36) ccons ::= DEFAULT MINUS scantok term */
	-3, /* (37) ccons ::= DEFAULT scantok ID|INDEXED */
	-3, /* (38) ccons ::= NOT NULL onconf */
	-5, /* (39) ccons ::= PRIMARY KEY sortorder onconf autoinc */
	-2, /* (40) ccons ::= UNIQUE onconf */
	-4, /* (41) ccons ::= CHECK LP expr RP */
	-4, /* (42) ccons ::= REFERENCES nm eidlist_opt refargs */
	-1, /* (43) ccons ::= defer_subclause */
	-2, /* (44) ccons ::= COLLATE ID|STRING */
	-3, /* (45) generated ::= LP expr RP */
	-4, /* (46) generated ::= LP expr RP ID */
	0, /* (47) autoinc ::= */
	-1, /* (48) autoinc ::= AUTOINCR */
	0, /* (49) refargs ::= */
	-2, /* (50) refargs ::= refargs refarg */
	-2, /* (51) refarg ::= MATCH nm */
	-3, /* (52) refarg ::= ON INSERT refact */
	-3, /* (53) refarg ::= ON DELETE refact */
	-3, /* (54) refarg ::= ON UPDATE refact */
	-2, /* (55) refact ::= SET NULL */
	-2, /* (56) refact ::= SET DEFAULT */
	-1, /* (57) refact ::= CASCADE */
	-1, /* (58) refact ::= RESTRICT */
	-2, /* (59) refact ::= NO ACTION */
	-3, /* (60) defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
	-2, /* (61) defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
	0, /* (62) init_deferred_pred_opt ::= */
	-2, /* (63) init_deferred_pred_opt ::= INITIALLY DEFERRED */
	-2, /* (64) init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
	0, /* (65) conslist_opt ::= */
	-1, /* (66) tconscomma ::= COMMA */
	-2, /* (67) tcons ::= CONSTRAINT nm */
	-7, /* (68) tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf */
	-5, /* (69) tcons ::= UNIQUE LP sortlist RP onconf */
	-5, /* (70) tcons ::= CHECK LP expr RP onconf */
	-10, /* (71) tcons ::= FOREIGN KEY LP eidlist RP REFERENCES nm eidlist_opt refargs defer_subclause_opt */
	0, /* (72) defer_subclause_opt ::= */
	0, /* (73) onconf ::= */
	-3, /* (74) onconf ::= ON CONFLICT resolvetype */
	0, /* (75) orconf ::= */
	-2, /* (76) orconf ::= OR resolvetype */
	-1, /* (77) resolvetype ::= IGNORE */
	-1, /* (78) resolvetype ::= REPLACE */
	-4, /* (79) cmd ::= DROP TABLE ifexists fullname */
	-2, /* (80) ifexists ::= IF EXISTS */
	0, /* (81) ifexists ::= */
	-9, /* (82) cmd ::= createkw temp VIEW ifnotexists nm dbnm eidlist_opt AS select */
	-4, /* (83) cmd ::= DROP VIEW ifexists fullname */
	-1, /* (84) cmd ::= select */
	-3, /* (85) select ::= WITH wqlist selectnowith */
	-4, /* (86) select ::= WITH RECURSIVE wqlist selectnowith */
	-1, /* (87) select ::= selectnowith */
	-3, /* (88) selectnowith ::= selectnowith multiselect_op oneselect */
	-1, /* (89) multiselect_op ::= UNION */
	-2, /* (90) multiselect_op ::= UNION ALL */
	-1, /* (91) multiselect_op ::= EXCEPT|INTERSECT */
	-9, /* (92) oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
	-10, /* (93) oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
	-4, /* (94) values ::= VALUES LP nexprlist RP */
	-5, /* (95) values ::= values COMMA LP nexprlist RP */
	-1, /* (96) distinct ::= DISTINCT */
	-1, /* (97) distinct ::= ALL */
	0, /* (98) distinct ::= */
	0, /* (99) sclp ::= */
	-5, /* (100) selcollist ::= sclp scanpt expr scanpt as */
	-3, /* (101) selcollist ::= sclp scanpt STAR */
	-5, /* (102) selcollist ::= sclp scanpt nm DOT STAR */
	-2, /* (103) as ::= AS nm */
	0, /* (104) as ::= */
	0, /* (105) from ::= */
	-2, /* (106) from ::= FROM seltablist */
	-2, /* (107) stl_prefix ::= seltablist joinop */
	0, /* (108) stl_prefix ::= */
	-5, /* (109) seltablist ::= stl_prefix nm dbnm as on_using */
	-6, /* (110) seltablist ::= stl_prefix nm dbnm as indexed_by on_using */
	-8, /* (111) seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_using */
	-6, /* (112) seltablist ::= stl_prefix LP select RP as on_using */
	-6, /* (113) seltablist ::= stl_prefix LP seltablist RP as on_using */
	0, /* (114) dbnm ::= */
	-2, /* (115) dbnm ::= DOT nm */
	-1, /* (116) fullname ::= nm */
	-3, /* (117) fullname ::= nm DOT nm */
	-1, /* (118) xfullname ::= nm */
	-3, /* (119) xfullname ::= nm DOT nm */
	-5, /* (120) xfullname ::= nm DOT nm AS nm */
	-3, /* (121) xfullname ::= nm AS nm */
	-1, /* (122) joinop ::= COMMA|JOIN */
	-2, /* (123) joinop ::= JOIN_KW JOIN */
	-3, /* (124) joinop ::= JOIN_KW nm JOIN */
	-4, /* (125) joinop ::= JOIN_KW nm nm JOIN */
	-2, /* (126) on_using ::= ON expr */
	-4, /* (127) on_using ::= USING LP idlist RP */
	0, /* (128) on_using ::= */
	0, /* (129) indexed_opt ::= */
	-3, /* (130) indexed_by ::= INDEXED BY nm */
	-2, /* (131) indexed_by ::= NOT INDEXED */
	0, /* (132) orderby_opt ::= */
	-3, /* (133) orderby_opt ::= ORDER BY sortlist */
	-5, /* (134) sortlist ::= sortlist COMMA expr sortorder nulls */
	-3, /* (135) sortlist ::= expr sortorder nulls */
	-1, /* (136) sortorder ::= ASC */
	-1, /* (137) sortorder ::= DESC */
	0, /* (138) sortorder ::= */
	-2, /* (139) nulls ::= NULLS FIRST */
	-2, /* (140) nulls ::= NULLS LAST */
	0, /* (141) nulls ::= */
	0, /* (142) groupby_opt ::= */
	-3, /* (143) groupby_opt ::= GROUP BY nexprlist */
	0, /* (144) having_opt ::= */
	-2, /* (145) having_opt ::= HAVING expr */
	0, /* (146) limit_opt ::= */
	-2, /* (147) limit_opt ::= LIMIT expr */
	-4, /* (148) limit_opt ::= LIMIT expr OFFSET expr */
	-4, /* (149) limit_opt ::= LIMIT expr COMMA expr */
	-6, /* (150) cmd ::= with DELETE FROM xfullname indexed_opt where_opt_ret */
	0, /* (151) where_opt ::= */
	-2, /* (152) where_opt ::= WHERE expr */
	0, /* (153) where_opt_ret ::= */
	-2, /* (154) where_opt_ret ::= WHERE expr */
	-2, /* (155) where_opt_ret ::= RETURNING selcollist */
	-4, /* (156) where_opt_ret ::= WHERE expr RETURNING selcollist */
	-9, /* (157) cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt_ret */
	-5, /* (158) setlist ::= setlist COMMA nm EQ expr */
	-7, /* (159) setlist ::= setlist COMMA LP idlist RP EQ expr */
	-3, /* (160) setlist ::= nm EQ expr */
	-5, /* (161) setlist ::= LP idlist RP EQ expr */
	-7, /* (162) cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert */
	-8, /* (163) cmd ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning */
	0, /* (164) upsert ::= */
	-2, /* (165) upsert ::= RETURNING selcollist */
	-12, /* (166) upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt upsert */
	-9, /* (167) upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING upsert */
	-5, /* (168) upsert ::= ON CONFLICT DO NOTHING returning */
	-8, /* (169) upsert ::= ON CONFLICT DO UPDATE SET setlist where_opt returning */
	-2, /* (170) returning ::= RETURNING selcollist */
	-2, /* (171) insert_cmd ::= INSERT orconf */
	-1, /* (172) insert_cmd ::= REPLACE */
	0, /* (173) idlist_opt ::= */
	-3, /* (174) idlist_opt ::= LP idlist RP */
	-3, /* (175) idlist ::= idlist COMMA nm */
	-1, /* (176) idlist ::= nm */
	-3, /* (177) expr ::= LP expr RP */
	-1, /* (178) expr ::= ID|INDEXED */
	-1, /* (179) expr ::= JOIN_KW */
	-3, /* (180) expr ::= nm DOT nm */
	-5, /* (181) expr ::= nm DOT nm DOT nm */
	-1, /* (182) term ::= NULL|FLOAT|BLOB */
	-1, /* (183) term ::= STRING */
	-1, /* (184) term ::= INTEGER */
	-1, /* (185) expr ::= VARIABLE */
	-3, /* (186) expr ::= expr COLLATE ID|STRING */
	-6, /* (187) expr ::= CAST LP expr AS typetoken RP */
	-5, /* (188) expr ::= ID|INDEXED LP distinct exprlist RP */
	-4, /* (189) expr ::= ID|INDEXED LP STAR RP */
	-6, /* (190) expr ::= ID|INDEXED LP distinct exprlist RP filter_over */
	-5, /* (191) expr ::= ID|INDEXED LP STAR RP filter_over */
	-1, /* (192) term ::= CTIME_KW */
	-5, /* (193) expr ::= LP nexprlist COMMA expr RP */
	-3, /* (194) expr ::= expr AND expr */
	-3, /* (195) expr ::= expr OR expr */
	-3, /* (196) expr ::= expr LT|GT|GE|LE expr */
	-3, /* (197) expr ::= expr EQ|NE expr */
	-3, /* (198) expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */
	-3, /* (199) expr ::= expr PLUS|MINUS expr */
	-3, /* (200) expr ::= expr STAR|SLASH|REM expr */
	-3, /* (201) expr ::= expr CONCAT expr */
	-2, /* (202) likeop ::= NOT LIKE_KW|MATCH */
	-3, /* (203) expr ::= expr likeop expr */
	-5, /* (204) expr ::= expr likeop expr ESCAPE expr */
	-2, /* (205) expr ::= expr ISNULL|NOTNULL */
	-3, /* (206) expr ::= expr NOT NULL */
	-3, /* (207) expr ::= expr IS expr */
	-4, /* (208) expr ::= expr IS NOT expr */
	-2, /* (209) expr ::= NOT expr */
	-2, /* (210) expr ::= BITNOT expr */
	-2, /* (211) expr ::= PLUS|MINUS expr */
	-3, /* (212) expr ::= expr PTR expr */
	-1, /* (213) between_op ::= BETWEEN */
	-2, /* (214) between_op ::= NOT BETWEEN */
	-5, /* (215) expr ::= expr between_op expr AND expr */
	-1, /* (216) in_op ::= IN */
	-2, /* (217) in_op ::= NOT IN */
	-5, /* (218) expr ::= expr in_op LP exprlist RP */
	-3, /* (219) expr ::= LP select RP */
	-5, /* (220) expr ::= expr in_op LP select RP */
	-5, /* (221) expr ::= expr in_op nm dbnm paren_exprlist */
	-4, /* (222) expr ::= EXISTS LP select RP */
	-5, /* (223) expr ::= CASE case_operand case_exprlist case_else END */
	-5, /* (224) case_exprlist ::= case_exprlist WHEN expr THEN expr */
	-4, /* (225) case_exprlist ::= WHEN expr THEN expr */
	-2, /* (226) case_else ::= ELSE expr */
	0, /* (227) case_else ::= */
	-1, /* (228) case_operand ::= expr */
	0, /* (229) case_operand ::= */
	0, /* (230) exprlist ::= */
	-3, /* (231) nexprlist ::= nexprlist COMMA expr */
	-1, /* (232) nexprlist ::= expr */
	0, /* (233) paren_exprlist ::= */
	-3, /* (234) paren_exprlist ::= LP exprlist RP */
	-12, /* (235) cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
	-1, /* (236) uniqueflag ::= UNIQUE */
	0, /* (237) uniqueflag ::= */
	0, /* (238) eidlist_opt ::= */
	-3, /* (239) eidlist_opt ::= LP eidlist RP */
	-5, /* (240) eidlist ::= eidlist COMMA nm collate sortorder */
	-3, /* (241) eidlist ::= nm collate sortorder */
	0, /* (242) collate ::= */
	-2, /* (243) collate ::= COLLATE ID|STRING */
	-4, /* (244) cmd ::= DROP INDEX ifexists fullname */
	-2, /* (245) cmd ::= VACUUM vinto */
	-3, /* (246) cmd ::= VACUUM nm vinto */
	-2, /* (247) vinto ::= INTO expr */
	0, /* (248) vinto ::= */
	-3, /* (249) cmd ::= PRAGMA nm dbnm */
	-5, /* (250) cmd ::= PRAGMA nm dbnm EQ nmnum */
	-6, /* (251) cmd ::= PRAGMA nm dbnm LP nmnum RP */
	-5, /* (252) cmd ::= PRAGMA nm dbnm EQ minus_num */
	-6, /* (253) cmd ::= PRAGMA nm dbnm LP minus_num RP */
	-2, /* (254) plus_num ::= PLUS INTEGER|FLOAT */
	-2, /* (255) minus_num ::= MINUS INTEGER|FLOAT */
	-5, /* (256) cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END */
	-11, /* (257) trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause */
	-1, /* (258) trigger_time ::= BEFORE|AFTER */
	-2, /* (259) trigger_time ::= INSTEAD OF */
	0, /* (260) trigger_time ::= */
	-1, /* (261) trigger_event ::= DELETE|INSERT */
	-1, /* (262) trigger_event ::= UPDATE */
	-3, /* (263) trigger_event ::= UPDATE OF idlist */
	0, /* (264) when_clause ::= */
	-2, /* (265) when_clause ::= WHEN expr */
	-3, /* (266) trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
	-2, /* (267) trigger_cmd_list ::= trigger_cmd SEMI */
	-3, /* (268) trnm ::= nm DOT nm */
	-3, /* (269) tridxby ::= INDEXED BY nm */
	-2, /* (270) tridxby ::= NOT INDEXED */
	-9, /* (271) trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt */
	-8, /* (272) trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt */
	-6, /* (273) trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt */
	-3, /* (274) trigger_cmd ::= scanpt select scanpt */
	-4, /* (275) expr ::= RAISE LP IGNORE RP */
	-6, /* (276) expr ::= RAISE LP raisetype COMMA nm RP */
	-1, /* (277) raisetype ::= ROLLBACK */
	-1, /* (278) raisetype ::= ABORT */
	-1, /* (279) raisetype ::= FAIL */
	-4, /* (280) cmd ::= DROP TRIGGER ifexists fullname */
	-6, /* (281) cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
	-3, /* (282) cmd ::= DETACH database_kw_opt expr */
	0, /* (283) key_opt ::= */
	-2, /* (284) key_opt ::= KEY expr */
	-1, /* (285) cmd ::= REINDEX */
	-3, /* (286) cmd ::= REINDEX nm dbnm */
	-1, /* (287) cmd ::= ANALYZE */
	-3, /* (288) cmd ::= ANALYZE nm dbnm */
	-6, /* (289) cmd ::= ALTER TABLE fullname RENAME TO nm */
	-7, /* (290) cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist */
	-6, /* (291) cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
	-1, /* (292) add_column_fullname ::= fullname */
	-8, /* (293) cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm */
	-1, /* (294) cmd ::= create_vtab */
	-4, /* (295) cmd ::= create_vtab LP vtabarglist RP */
	-8, /* (296) create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm */
	0, /* (297) vtabarg ::= */
	-1, /* (298) vtabargtoken ::= ANY */
	-3, /* (299) vtabargtoken ::= lp anylist RP */
	-1, /* (300) lp ::= LP */
	-2, /* (301) with ::= WITH wqlist */
	-3, /* (302) with ::= WITH RECURSIVE wqlist */
	-1, /* (303) wqas ::= AS */
	-2, /* (304) wqas ::= AS MATERIALIZED */
	-3, /* (305) wqas ::= AS NOT MATERIALIZED */
	-6, /* (306) wqitem ::= nm eidlist_opt wqas LP select RP */
	-1, /* (307) wqlist ::= wqitem */
	-3, /* (308) wqlist ::= wqlist COMMA wqitem */
	-1, /* (309) windowdefn_list ::= windowdefn */
	-3, /* (310) windowdefn_list ::= windowdefn_list COMMA windowdefn */
	-5, /* (311) windowdefn ::= nm AS LP window RP */
	-5, /* (312) window ::= PARTITION BY nexprlist orderby_opt frame_opt */
	-6, /* (313) window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
	-4, /* (314) window ::= ORDER BY sortlist frame_opt */
	-5, /* (315) window ::= nm ORDER BY sortlist frame_opt */
	-1, /* (316) window ::= frame_opt */
	-2, /* (317) window ::= nm frame_opt */
	0, /* (318) frame_opt ::= */
	-3, /* (319) frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
	-6, /* (320) frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
	-1, /* (321) range_or_rows ::= RANGE|ROWS|GROUPS */
	-1, /* (322) frame_bound_s ::= frame_bound */
	-2, /* (323) frame_bound_s ::= UNBOUNDED PRECEDING */
	-1, /* (324) frame_bound_e ::= frame_bound */
	-2, /* (325) frame_bound_e ::= UNBOUNDED FOLLOWING */
	-2, /* (326) frame_bound ::= expr PRECEDING|FOLLOWING */
	-2, /* (327) frame_bound ::= CURRENT ROW */
	0, /* (328) frame_exclude_opt ::= */
	-2, /* (329) frame_exclude_opt ::= EXCLUDE frame_exclude */
	-2, /* (330) frame_exclude ::= NO OTHERS */
	-2, /* (331) frame_exclude ::= CURRENT ROW */
	-1, /* (332) frame_exclude ::= GROUP|TIES */
	-2, /* (333) window_clause ::= WINDOW windowdefn_list */
	-2, /* (334) filter_over ::= filter_clause over_clause */
	-1, /* (335) filter_over ::= over_clause */
	-1, /* (336) filter_over ::= filter_clause */
	-4, /* (337) over_clause ::= OVER LP window RP */
	-2, /* (338) over_clause ::= OVER nm */
	-5, /* (339) filter_clause ::= FILTER LP WHERE expr RP */
	-1, /* (340) input ::= cmdlist */
	-2, /* (341) cmdlist ::= cmdlist ecmd */
	-1, /* (342) cmdlist ::= ecmd */
	-1, /* (343) ecmd ::= SEMI */
	-2, /* (344) ecmd ::= cmdx SEMI */
	-3, /* (345) ecmd ::= explain cmdx SEMI */
	0, /* (346) trans_opt ::= */
	-1, /* (347) trans_opt ::= TRANSACTION */
	-2, /* (348) trans_opt ::= TRANSACTION nm */
	-1, /* (349) savepoint_opt ::= SAVEPOINT */
	0, /* (350) savepoint_opt ::= */
	-2, /* (351) cmd ::= create_table create_table_args */
	-1, /* (352) table_option_set ::= table_option */
	-4, /* (353) columnlist ::= columnlist COMMA columnname carglist */
	-2, /* (354) columnlist ::= columnname carglist */
	-1, /* (355) nm ::= ID|INDEXED */
	-1, /* (356) nm ::= STRING */
	-1, /* (357) nm ::= JOIN_KW */
	-1, /* (358) typetoken ::= typename */
	-1, /* (359) typename ::= ID|STRING */
	-1, /* (360) signed ::= plus_num */
	-1, /* (361) signed ::= minus_num */
	-2, /* (362) carglist ::= carglist ccons */
	0, /* (363) carglist ::= */
	-2, /* (364) ccons ::= NULL onconf */
	-4, /* (365) ccons ::= GENERATED ALWAYS AS generated */
	-2, /* (366) ccons ::= AS generated */
	-2, /* (367) conslist_opt ::= COMMA conslist */
	-3, /* (368) conslist ::= conslist tconscomma tcons */
	-1, /* (369) conslist ::= tcons */
	0, /* (370) tconscomma ::= */
	-1, /* (371) defer_subclause_opt ::= defer_subclause */
	-1, /* (372) resolvetype ::= raisetype */
	-1, /* (373) selectnowith ::= oneselect */
	-1, /* (374) oneselect ::= values */
	-2, /* (375) sclp ::= selcollist COMMA */
	-1, /* (376) as ::= ID|STRING */
	-1, /* (377) indexed_opt ::= indexed_by */
	0, /* (378) returning ::= */
	-1, /* (379) expr ::= term */
	-1, /* (380) likeop ::= LIKE_KW|MATCH */
	-1, /* (381) exprlist ::= nexprlist */
	-1, /* (382) nmnum ::= plus_num */
	-1, /* (383) nmnum ::= nm */
	-1, /* (384) nmnum ::= ON */
	-1, /* (385) nmnum ::= DELETE */
	-1, /* (386) nmnum ::= DEFAULT */
	-1, /* (387) plus_num ::= INTEGER|FLOAT */
	0, /* (388) foreach_clause ::= */
	-3, /* (389) foreach_clause ::= FOR EACH ROW */
	-1, /* (390) trnm ::= nm */
	0, /* (391) tridxby ::= */
	-1, /* (392) database_kw_opt ::= DATABASE */
	0, /* (393) database_kw_opt ::= */
	0, /* (394) kwcolumn_opt ::= */
	-1, /* (395) kwcolumn_opt ::= COLUMNKW */
	-1, /* (396) vtabarglist ::= vtabarg */
	-3, /* (397) vtabarglist ::= vtabarglist COMMA vtabarg */
	-2, /* (398) vtabarg ::= vtabarg vtabargtoken */
	0, /* (399) anylist ::= */
	-4, /* (400) anylist ::= anylist LP anylist RP */
	-2, /* (401) anylist ::= anylist ANY */
	0, /* (402) with ::= */
}

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
**
** The yyLookahead and yyLookaheadToken parameters provide reduce actions
** access to the lookahead token (if any).  The yyLookahead will be YYNOCODE
** if the lookahead token has already been consumed.  As this procedure is
** only called from one place, optimizing compilers will in-line it, which
** means that the extra parameters have no performance impact.
 */
func (yypParser *yyParser) yy_reduce(
	yyruleno YYACTIONTYPE, /* Number of the rule by which to reduce */
	yyLookahead YYCODETYPE, /* Lookahead token, or YYNOCODE if none */
	yyLookaheadToken sqlite3ParserTOKENTYPE, /* Value of the lookahead token */
	pParse *ctxDecl/* %extra_context */) YYACTIONTYPE {
	var (
		yygoto YYCODETYPE    /* The next state */
		yyact  YYACTIONTYPE  /* The next action */
		yymsp int            /* The top of the parser's stack */
		yysize int           /* Amount to pop the stack */
		yylhsminor YYMINORTYPE
	)
	yymsp = yypParser.yytos
	_ = yylhsminor

	

	switch yyruleno {
	/* Beginning here are the reduction cases.  A typical example
	 ** follows:
	 **   case 0:
	 **  #line <lineno> <grammarfile>
	 **     { ... }           // User supplied code
	 **  #line <lineno> <thisfile>
	 **     break;
	 */
	/********** Begin reduce actions **********************************************/
      case 0: /* explain ::= EXPLAIN */
//line 162 "parse.y"
{ pParse.explain = 1; }
//line 3586 "parse.go"
        break
      case 1: /* explain ::= EXPLAIN QUERY PLAN */
//line 163 "parse.y"
{ pParse.explain = 2; }
//line 3591 "parse.go"
        break
      case 2: /* cmdx ::= cmd */
//line 165 "parse.y"
{ sqlite3FinishCoding(pParse); }
//line 3596 "parse.go"
        break
      case 3: /* cmd ::= BEGIN transtype trans_opt */
//line 170 "parse.y"
{sqlite3BeginTransaction(pParse, yypParser.yystack[yypParser.yytos+ -1].minor.yy236);}
//line 3601 "parse.go"
        break
      case 4: /* transtype ::= */
//line 175 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy236 = TK_DEFERRED;}
//line 3606 "parse.go"
        break
      case 5: /* transtype ::= DEFERRED */
        fallthrough
      case 6: /* transtype ::= IMMEDIATE */ yytestcase(yyruleno==6);
        fallthrough
      case 7: /* transtype ::= EXCLUSIVE */ yytestcase(yyruleno==7);
//line 176 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy236 = yypParser.yystack[yypParser.yytos+ 0].major; /*A-overwrites-X*/}
//line 3615 "parse.go"
        break
      case 8: /* cmd ::= COMMIT|END trans_opt */
        fallthrough
      case 9: /* cmd ::= ROLLBACK trans_opt */ yytestcase(yyruleno==9);
//line 179 "parse.y"
{sqlite3EndTransaction(pParse,yypParser.yystack[yypParser.yytos+ -1].major);}
//line 3622 "parse.go"
        break
      case 10: /* cmd ::= SAVEPOINT nm */
//line 184 "parse.y"
{
  sqlite3Savepoint(pParse, SAVEPOINT_BEGIN, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
}
//line 3629 "parse.go"
        break
      case 11: /* cmd ::= RELEASE savepoint_opt nm */
//line 187 "parse.y"
{
  sqlite3Savepoint(pParse, SAVEPOINT_RELEASE, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
}
//line 3636 "parse.go"
        break
      case 12: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
//line 190 "parse.y"
{
  sqlite3Savepoint(pParse, SAVEPOINT_ROLLBACK, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
}
//line 3643 "parse.go"
        break
      case 13: /* create_table ::= createkw temp TABLE ifnotexists nm dbnm */
//line 197 "parse.y"
{
   sqlite3StartTable(pParse,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0,yypParser.yystack[yypParser.yytos+ -4].minor.yy394,0,0,yypParser.yystack[yypParser.yytos+ -2].minor.yy394);
}
//line 3650 "parse.go"
        break
      case 14: /* createkw ::= CREATE */
//line 200 "parse.y"
{disableLookaside(pParse);}
//line 3655 "parse.go"
        break
      case 15: /* ifnotexists ::= */
        fallthrough
      case 18: /* temp ::= */ yytestcase(yyruleno==18);
        fallthrough
      case 47: /* autoinc ::= */ yytestcase(yyruleno==47);
        fallthrough
      case 62: /* init_deferred_pred_opt ::= */ yytestcase(yyruleno==62);
        fallthrough
      case 72: /* defer_subclause_opt ::= */ yytestcase(yyruleno==72);
        fallthrough
      case 81: /* ifexists ::= */ yytestcase(yyruleno==81);
        fallthrough
      case 98: /* distinct ::= */ yytestcase(yyruleno==98);
        fallthrough
      case 242: /* collate ::= */ yytestcase(yyruleno==242);
//line 203 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy394 = 0;}
//line 3674 "parse.go"
        break
      case 16: /* ifnotexists ::= IF NOT EXISTS */
//line 204 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy394 = 1;}
//line 3679 "parse.go"
        break
      case 17: /* temp ::= TEMP */
//line 207 "parse.y"
{
  if pParse.db.init.busy==0 {
    yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = 1;
  } else {
    yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = 0;
  }
}
//line 3690 "parse.go"
        break
      case 19: /* create_table_args ::= LP columnlist conslist_opt RP table_option_set */
//line 216 "parse.y"
{
  sqlite3EndTable(pParse,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,yypParser.yystack[yypParser.yytos+ 0].minor.yy338,nil);
}
//line 3697 "parse.go"
        break
      case 20: /* create_table_args ::= AS select */
//line 219 "parse.y"
{
  sqlite3EndTable(pParse,nil,nil,0,yypParser.yystack[yypParser.yytos+ 0].minor.yy361);
  sqlite3SelectDelete(pParse.db, yypParser.yystack[yypParser.yytos+ 0].minor.yy361);
}
//line 3705 "parse.go"
        break
      case 21: /* table_option_set ::= */
//line 225 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy338 = 0;}
//line 3710 "parse.go"
        break
      case 22: /* table_option_set ::= table_option_set COMMA table_option */
//line 227 "parse.y"
{yylhsminor.yy338 = yypParser.yystack[yypParser.yytos+ -2].minor.yy338|yypParser.yystack[yypParser.yytos+ 0].minor.yy338;}
//line 3715 "parse.go"
  yypParser.yystack[yypParser.yytos+ -2].minor.yy338 = yylhsminor.yy338;
        break
      case 23: /* table_option ::= WITHOUT nm */
//line 228 "parse.y"
{
  if( yypParser.yystack[yypParser.yytos+ 0].minor.yy0.n==5 && sqlite3_strnicmp(yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z,[]byte("rowid"),5)==0 ){
    yypParser.yystack[yypParser.yytos+ -1].minor.yy338 = TF_WithoutRowid | TF_NoVisibleRowid;
  }else{
    yypParser.yystack[yypParser.yytos+ -1].minor.yy338 = 0;
    sqlite3ErrorMsg(pParse, "unknown table option: %.*s", yypParser.yystack[yypParser.yytos+ 0].minor.yy0.n, yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z);
  }
}
//line 3728 "parse.go"
        break
      case 24: /* table_option ::= nm */
//line 236 "parse.y"
{
  if( yypParser.yystack[yypParser.yytos+ 0].minor.yy0.n==6 && sqlite3_strnicmp(yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z,[]byte("strict"),6)==0 ){
    yylhsminor.yy338 = TF_Strict;
  }else{
    yylhsminor.yy338 = 0;
    sqlite3ErrorMsg(pParse, "unknown table option: %.*s", yypParser.yystack[yypParser.yytos+ 0].minor.yy0.n, yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z);
  }
}
//line 3740 "parse.go"
  yypParser.yystack[yypParser.yytos+ 0].minor.yy338 = yylhsminor.yy338;
        break
      case 25: /* columnname ::= nm typetoken */
//line 246 "parse.y"
{sqlite3AddColumn(pParse,yypParser.yystack[yypParser.yytos+ -1].minor.yy0,yypParser.yystack[yypParser.yytos+ 0].minor.yy0);}
//line 3746 "parse.go"
        break
      case 26: /* typetoken ::= */
//line 333 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy0.n = 0; yypParser.yystack[yypParser.yytos+ 1].minor.yy0.z = []byte{};}
//line 3751 "parse.go"
        break
      case 27: /* typetoken ::= typename LP signed RP */
//line 335 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -3].minor.yy0.n = uint(len(yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z) - len(yypParser.yystack[yypParser.yytos+ -3].minor.yy0.z));
}
//line 3758 "parse.go"
        break
      case 28: /* typetoken ::= typename LP signed COMMA signed RP */
//line 338 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -5].minor.yy0.n = uint(len(yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z) - len(yypParser.yystack[yypParser.yytos+ -5].minor.yy0.z));
}
//line 3765 "parse.go"
        break
      case 29: /* typename ::= typename ID|STRING */
//line 343 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy0.n=yypParser.yystack[yypParser.yytos+ 0].minor.yy0.n+(int)(yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z-yypParser.yystack[yypParser.yytos+ -1].minor.yy0.z);}
//line 3770 "parse.go"
        break
      case 30: /* scanpt ::= */
//line 361 "parse.y"
{
  assert( yyLookahead!=YYNOCODE, "yyLookahead!=YYNOCODE");
  yypParser.yystack[yypParser.yytos+ 1].minor.yy79 = yyLookaheadToken.z;
}
//line 3778 "parse.go"
        break
      case 31: /* scantok ::= */
//line 365 "parse.y"
{
  assert( yyLookahead!=YYNOCODE, "yyLookahead!=YYNOCODE");
  yypParser.yystack[yypParser.yytos+ 1].minor.yy0 = yyLookaheadToken;
}
//line 3786 "parse.go"
        break
      case 32: /* ccons ::= CONSTRAINT nm */
        fallthrough
      case 67: /* tcons ::= CONSTRAINT nm */ yytestcase(yyruleno==67);
//line 375 "parse.y"
{pParse.constraintName = yypParser.yystack[yypParser.yytos+ 0].minor.yy0;}
//line 3793 "parse.go"
        break
      case 33: /* ccons ::= DEFAULT scantok term */
//line 377 "parse.y"
{/*sqlite3AddDefaultValue(pParse,yypParser.yystack[yypParser.yytos+ 0].minor.yy634,yypParser.yystack[yypParser.yytos+ -1].minor.yy0.z,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0.z[yypParser.yystack[yypParser.yytos+ -1].minor.yy0.n]);*/}
//line 3798 "parse.go"
        break
      case 34: /* ccons ::= DEFAULT LP expr RP */
//line 379 "parse.y"
{/*sqlite3AddDefaultValue(pParse,yypParser.yystack[yypParser.yytos+ -1].minor.yy634,yypParser.yystack[yypParser.yytos+ -2].minor.yy0.z+1,yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z);*/}
//line 3803 "parse.go"
        break
      case 35: /* ccons ::= DEFAULT PLUS scantok term */
//line 381 "parse.y"
{/*sqlite3AddDefaultValue(pParse,yypParser.yystack[yypParser.yytos+ 0].minor.yy634,yypParser.yystack[yypParser.yytos+ -2].minor.yy0.z,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0.z[yypParser.yystack[yypParser.yytos+ -1].minor.yy0.n]);*/}
//line 3808 "parse.go"
        break
      case 36: /* ccons ::= DEFAULT MINUS scantok term */
//line 382 "parse.y"
{
  p := sqlite3PExpr(pParse, TK_UMINUS, yypParser.yystack[yypParser.yytos+ 0].minor.yy634, nil);
  // sqlite3AddDefaultValue(pParse,p,yypParser.yystack[yypParser.yytos+ -2].minor.yy0.z,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0.z[yypParser.yystack[yypParser.yytos+ -1].minor.yy0.n]);
}
//line 3816 "parse.go"
        break
      case 37: /* ccons ::= DEFAULT scantok ID|INDEXED */
//line 386 "parse.y"
{
  p := tokenExpr(pParse, TK_STRING, yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
  if( p != nil){
    sqlite3ExprIdToTrueFalse(p);
    testcase( p.op==TK_TRUEFALSE && sqlite3ExprTruthValue(p) );
  }
  // sqlite3AddDefaultValue(pParse,p,yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z,yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z+yypParser.yystack[yypParser.yytos+ 0].minor.yy0.n);
}
//line 3828 "parse.go"
        break
      case 38: /* ccons ::= NOT NULL onconf */
//line 399 "parse.y"
{sqlite3AddNotNull(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy394);}
//line 3833 "parse.go"
        break
      case 39: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
//line 401 "parse.y"
{sqlite3AddPrimaryKey(pParse,nil,yypParser.yystack[yypParser.yytos+ -1].minor.yy394,yypParser.yystack[yypParser.yytos+ 0].minor.yy394,yypParser.yystack[yypParser.yytos+ -2].minor.yy394);}
//line 3838 "parse.go"
        break
      case 40: /* ccons ::= UNIQUE onconf */
//line 402 "parse.y"
{sqlite3CreateIndex(pParse,nil,nil,nil,nil,yypParser.yystack[yypParser.yytos+ 0].minor.yy394,nil,nil,0,0,
                                   SQLITE_IDXTYPE_UNIQUE);}
//line 3844 "parse.go"
        break
      case 41: /* ccons ::= CHECK LP expr RP */
//line 404 "parse.y"
{sqlite3AddCheckConstraint(pParse,yypParser.yystack[yypParser.yytos+ -1].minor.yy634,yypParser.yystack[yypParser.yytos+ -2].minor.yy0.z,yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z);}
//line 3849 "parse.go"
        break
      case 42: /* ccons ::= REFERENCES nm eidlist_opt refargs */
//line 406 "parse.y"
{sqlite3CreateForeignKey(pParse,nil,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,yypParser.yystack[yypParser.yytos+ -1].minor.yy614,yypParser.yystack[yypParser.yytos+ 0].minor.yy394);}
//line 3854 "parse.go"
        break
      case 43: /* ccons ::= defer_subclause */
//line 407 "parse.y"
{sqlite3DeferForeignKey(pParse,yypParser.yystack[yypParser.yytos+ 0].minor.yy394);}
//line 3859 "parse.go"
        break
      case 44: /* ccons ::= COLLATE ID|STRING */
//line 408 "parse.y"
{sqlite3AddCollateType(pParse, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);}
//line 3864 "parse.go"
        break
      case 45: /* generated ::= LP expr RP */
//line 411 "parse.y"
{sqlite3AddGenerated(pParse,yypParser.yystack[yypParser.yytos+ -1].minor.yy634,nil);}
//line 3869 "parse.go"
        break
      case 46: /* generated ::= LP expr RP ID */
//line 412 "parse.y"
{sqlite3AddGenerated(pParse,yypParser.yystack[yypParser.yytos+ -2].minor.yy634,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0);}
//line 3874 "parse.go"
        break
      case 48: /* autoinc ::= AUTOINCR */
//line 417 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = 1;}
//line 3879 "parse.go"
        break
      case 49: /* refargs ::= */
//line 425 "parse.y"
{ yypParser.yystack[yypParser.yytos+ 1].minor.yy394 = OE_None*0x0101; /* EV: R-19803-45884 */}
//line 3884 "parse.go"
        break
      case 50: /* refargs ::= refargs refarg */
//line 426 "parse.y"
{ /* yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = (yypParser.yystack[yypParser.yytos+ -1].minor.yy394 & ~yypParser.yystack[yypParser.yytos+ 0].minor.yy533.mask) | yypParser.yystack[yypParser.yytos+ 0].minor.yy533.value; */}
//line 3889 "parse.go"
        break
      case 51: /* refarg ::= MATCH nm */
//line 428 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -1].minor.yy533.value = 0;     yypParser.yystack[yypParser.yytos+ -1].minor.yy533.mask = 0x000000; }
//line 3894 "parse.go"
        break
      case 52: /* refarg ::= ON INSERT refact */
//line 429 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -2].minor.yy533.value = 0;     yypParser.yystack[yypParser.yytos+ -2].minor.yy533.mask = 0x000000; }
//line 3899 "parse.go"
        break
      case 53: /* refarg ::= ON DELETE refact */
//line 430 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -2].minor.yy533.value = yypParser.yystack[yypParser.yytos+ 0].minor.yy394;     yypParser.yystack[yypParser.yytos+ -2].minor.yy533.mask = 0x0000ff; }
//line 3904 "parse.go"
        break
      case 54: /* refarg ::= ON UPDATE refact */
//line 431 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -2].minor.yy533.value = yypParser.yystack[yypParser.yytos+ 0].minor.yy394<<8;  yypParser.yystack[yypParser.yytos+ -2].minor.yy533.mask = 0x00ff00; }
//line 3909 "parse.go"
        break
      case 55: /* refact ::= SET NULL */
//line 433 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = OE_SetNull;  /* EV: R-33326-45252 */}
//line 3914 "parse.go"
        break
      case 56: /* refact ::= SET DEFAULT */
//line 434 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = OE_SetDflt;  /* EV: R-33326-45252 */}
//line 3919 "parse.go"
        break
      case 57: /* refact ::= CASCADE */
//line 435 "parse.y"
{ yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = OE_Cascade;  /* EV: R-33326-45252 */}
//line 3924 "parse.go"
        break
      case 58: /* refact ::= RESTRICT */
//line 436 "parse.y"
{ yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = OE_Restrict; /* EV: R-33326-45252 */}
//line 3929 "parse.go"
        break
      case 59: /* refact ::= NO ACTION */
//line 437 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = OE_None;     /* EV: R-33326-45252 */}
//line 3934 "parse.go"
        break
      case 60: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
//line 439 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy394 = 0;}
//line 3939 "parse.go"
        break
      case 61: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
        fallthrough
      case 76: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==76);
        fallthrough
      case 171: /* insert_cmd ::= INSERT orconf */ yytestcase(yyruleno==171);
//line 440 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = yypParser.yystack[yypParser.yytos+ 0].minor.yy394;}
//line 3948 "parse.go"
        break
      case 63: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
        fallthrough
      case 80: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==80);
        fallthrough
      case 214: /* between_op ::= NOT BETWEEN */ yytestcase(yyruleno==214);
        fallthrough
      case 217: /* in_op ::= NOT IN */ yytestcase(yyruleno==217);
        fallthrough
      case 243: /* collate ::= COLLATE ID|STRING */ yytestcase(yyruleno==243);
//line 443 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = 1;}
//line 3961 "parse.go"
        break
      case 64: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
//line 444 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = 0;}
//line 3966 "parse.go"
        break
      case 65: /* conslist_opt ::= */
        fallthrough
      case 104: /* as ::= */ yytestcase(yyruleno==104);
//line 446 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy0.n = 0; yypParser.yystack[yypParser.yytos+ 1].minor.yy0.z = 0;}
//line 3973 "parse.go"
        break
      case 66: /* tconscomma ::= COMMA */
//line 450 "parse.y"
{pParse.constraintName.n = 0;}
//line 3978 "parse.go"
        break
      case 68: /* tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf */
//line 454 "parse.y"
{sqlite3AddPrimaryKey(pParse,yypParser.yystack[yypParser.yytos+ -3].minor.yy614,yypParser.yystack[yypParser.yytos+ 0].minor.yy394,yypParser.yystack[yypParser.yytos+ -2].minor.yy394,0);}
//line 3983 "parse.go"
        break
      case 69: /* tcons ::= UNIQUE LP sortlist RP onconf */
//line 456 "parse.y"
{sqlite3CreateIndex(pParse,nil,nil,nil,nil,yypParser.yystack[yypParser.yytos+ -2].minor.yy614,yypParser.yystack[yypParser.yytos+ 0].minor.yy394,nil,0,0,
                                       SQLITE_IDXTYPE_UNIQUE);}
//line 3989 "parse.go"
        break
      case 70: /* tcons ::= CHECK LP expr RP onconf */
//line 459 "parse.y"
{sqlite3AddCheckConstraint(pParse,yypParser.yystack[yypParser.yytos+ -2].minor.yy634,yypParser.yystack[yypParser.yytos+ -3].minor.yy0.z,yypParser.yystack[yypParser.yytos+ -1].minor.yy0.z);}
//line 3994 "parse.go"
        break
      case 71: /* tcons ::= FOREIGN KEY LP eidlist RP REFERENCES nm eidlist_opt refargs defer_subclause_opt */
//line 461 "parse.y"
{
    sqlite3CreateForeignKey(pParse, yypParser.yystack[yypParser.yytos+ -6].minor.yy614, &yypParser.yystack[yypParser.yytos+ -3].minor.yy0, yypParser.yystack[yypParser.yytos+ -2].minor.yy614, yypParser.yystack[yypParser.yytos+ -1].minor.yy394);
    sqlite3DeferForeignKey(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy394);
}
//line 4002 "parse.go"
        break
      case 73: /* onconf ::= */
        fallthrough
      case 75: /* orconf ::= */ yytestcase(yyruleno==75);
//line 475 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy394 = OE_Default;}
//line 4009 "parse.go"
        break
      case 74: /* onconf ::= ON CONFLICT resolvetype */
//line 476 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy394 = yypParser.yystack[yypParser.yytos+ 0].minor.yy394;}
//line 4014 "parse.go"
        break
      case 77: /* resolvetype ::= IGNORE */
//line 480 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = OE_Ignore;}
//line 4019 "parse.go"
        break
      case 78: /* resolvetype ::= REPLACE */
        fallthrough
      case 172: /* insert_cmd ::= REPLACE */ yytestcase(yyruleno==172);
//line 481 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = OE_Replace;}
//line 4026 "parse.go"
        break
      case 79: /* cmd ::= DROP TABLE ifexists fullname */
//line 485 "parse.y"
{
  sqlite3DropTable(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy157, 0, yypParser.yystack[yypParser.yytos+ -1].minor.yy394);
}
//line 4033 "parse.go"
        break
      case 82: /* cmd ::= createkw temp VIEW ifnotexists nm dbnm eidlist_opt AS select */
//line 496 "parse.y"
{
  sqlite3CreateView(pParse, &yypParser.yystack[yypParser.yytos+ -8].minor.yy0, &yypParser.yystack[yypParser.yytos+ -4].minor.yy0, &yypParser.yystack[yypParser.yytos+ -3].minor.yy0, yypParser.yystack[yypParser.yytos+ -2].minor.yy614, yypParser.yystack[yypParser.yytos+ 0].minor.yy361, yypParser.yystack[yypParser.yytos+ -7].minor.yy394, yypParser.yystack[yypParser.yytos+ -5].minor.yy394);
}
//line 4040 "parse.go"
        break
      case 83: /* cmd ::= DROP VIEW ifexists fullname */
//line 499 "parse.y"
{
  sqlite3DropTable(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy157, 1, yypParser.yystack[yypParser.yytos+ -1].minor.yy394);
}
//line 4047 "parse.go"
        break
      case 84: /* cmd ::= select */
//line 506 "parse.y"
{
  dest := SelectDest{eDest: SRT_Output};
  sqlite3Select(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy361, &dest);
  sqlite3SelectDelete(pParse.db, yypParser.yystack[yypParser.yytos+ 0].minor.yy361);
}
//line 4056 "parse.go"
        break
      case 85: /* select ::= WITH wqlist selectnowith */
//line 568 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy361 = attachWithToSelect(pParse,yypParser.yystack[yypParser.yytos+ 0].minor.yy361,yypParser.yystack[yypParser.yytos+ -1].minor.yy357);}
//line 4061 "parse.go"
        break
      case 86: /* select ::= WITH RECURSIVE wqlist selectnowith */
//line 570 "parse.y"
{yypParser.yystack[yypParser.yytos+ -3].minor.yy361 = attachWithToSelect(pParse,yypParser.yystack[yypParser.yytos+ 0].minor.yy361,yypParser.yystack[yypParser.yytos+ -1].minor.yy357);}
//line 4066 "parse.go"
        break
      case 87: /* select ::= selectnowith */
//line 572 "parse.y"
{
  p := yypParser.yystack[yypParser.yytos+ 0].minor.yy361;
  if( p != nil){
    parserDoubleLinkSelect(pParse, p);
  }
  yypParser.yystack[yypParser.yytos+ 0].minor.yy361 = p; /*A-overwrites-X*/
}
//line 4077 "parse.go"
        break
      case 88: /* selectnowith ::= selectnowith multiselect_op oneselect */
//line 582 "parse.y"
{
  pRhs := yypParser.yystack[yypParser.yytos+ 0].minor.yy361;
  pLhs := yypParser.yystack[yypParser.yytos+ -2].minor.yy361;
  if( pRhs != nil && pRhs.pPrior != nil){
    var pFrom *SrcList;
    var x Token;
    x.n = 0;
    parserDoubleLinkSelect(pParse, pRhs);
    pFrom = sqlite3SrcListAppendFromTerm(pParse,nil,nil,nil,&x,pRhs,nil);
    pRhs = sqlite3SelectNew(pParse,nil,pFrom,nil,nil,nil,nil,0,nil);
  }
  if( pRhs != nil ){
    pRhs.op = uint8(yypParser.yystack[yypParser.yytos+ -1].minor.yy394);
    pRhs.pPrior = pLhs;
    if( ALWAYS(pLhs != nil) ) {
      // pLhs.selFlags &= ~SF_MultiValue;
    }
    // pRhs.selFlags &= ~SF_MultiValue;
    if( yypParser.yystack[yypParser.yytos+ -1].minor.yy394!=TK_ALL ) {
      pParse.hasCompound = 1;
    }
  }else{
    sqlite3SelectDelete(pParse.db, pLhs);
  }
  yypParser.yystack[yypParser.yytos+ -2].minor.yy361 = pRhs;
}
//line 4107 "parse.go"
        break
      case 89: /* multiselect_op ::= UNION */
        fallthrough
      case 91: /* multiselect_op ::= EXCEPT|INTERSECT */ yytestcase(yyruleno==91);
//line 609 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = yypParser.yystack[yypParser.yytos+ 0].major; /*A-overwrites-OP*/}
//line 4114 "parse.go"
        break
      case 90: /* multiselect_op ::= UNION ALL */
//line 610 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = TK_ALL;}
//line 4119 "parse.go"
        break
      case 92: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
//line 616 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -8].minor.yy361 = sqlite3SelectNew(pParse,yypParser.yystack[yypParser.yytos+ -6].minor.yy614,yypParser.yystack[yypParser.yytos+ -5].minor.yy157,yypParser.yystack[yypParser.yytos+ -4].minor.yy634,yypParser.yystack[yypParser.yytos+ -3].minor.yy614,yypParser.yystack[yypParser.yytos+ -2].minor.yy634,yypParser.yystack[yypParser.yytos+ -1].minor.yy614,yypParser.yystack[yypParser.yytos+ -7].minor.yy394,yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
}
//line 4126 "parse.go"
        break
      case 93: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt */
//line 622 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -9].minor.yy361 = sqlite3SelectNew(pParse,yypParser.yystack[yypParser.yytos+ -7].minor.yy614,yypParser.yystack[yypParser.yytos+ -6].minor.yy157,yypParser.yystack[yypParser.yytos+ -5].minor.yy634,yypParser.yystack[yypParser.yytos+ -4].minor.yy614,yypParser.yystack[yypParser.yytos+ -3].minor.yy634,yypParser.yystack[yypParser.yytos+ -1].minor.yy614,yypParser.yystack[yypParser.yytos+ -8].minor.yy394,yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
  if( yypParser.yystack[yypParser.yytos+ -9].minor.yy361 != nil){
    yypParser.yystack[yypParser.yytos+ -9].minor.yy361.pWinDefn = yypParser.yystack[yypParser.yytos+ -2].minor.yy179;
  }else{
    sqlite3WindowListDelete(pParse.db, yypParser.yystack[yypParser.yytos+ -2].minor.yy179);
  }
}
//line 4138 "parse.go"
        break
      case 94: /* values ::= VALUES LP nexprlist RP */
//line 637 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -3].minor.yy361 = sqlite3SelectNew(pParse,yypParser.yystack[yypParser.yytos+ -1].minor.yy614,nil,nil,nil,nil,nil,SF_Values,nil);
}
//line 4145 "parse.go"
        break
      case 95: /* values ::= values COMMA LP nexprlist RP */
//line 640 "parse.y"
{
  pRight, pLeft := yypParser.yystack[yypParser.yytos+ -4].minor.yy361;
  pRight = sqlite3SelectNew(pParse,yypParser.yystack[yypParser.yytos+ -1].minor.yy614,nil,nil,nil,nil,nil,SF_Values|SF_MultiValue,nil);
  if( ALWAYS(pLeft != nil) ) {
    // pLeft.selFlags &= ~SF_MultiValue;
  } 
  if( pRight != nil){
    pRight.op = TK_ALL;
    pRight.pPrior = pLeft;
    yypParser.yystack[yypParser.yytos+ -4].minor.yy361 = pRight;
  }else{
    yypParser.yystack[yypParser.yytos+ -4].minor.yy361 = pLeft;
  }
}
//line 4163 "parse.go"
        break
      case 96: /* distinct ::= DISTINCT */
//line 659 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = SF_Distinct;}
//line 4168 "parse.go"
        break
      case 97: /* distinct ::= ALL */
//line 660 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = SF_All;}
//line 4173 "parse.go"
        break
      case 99: /* sclp ::= */
        fallthrough
      case 132: /* orderby_opt ::= */ yytestcase(yyruleno==132);
        fallthrough
      case 142: /* groupby_opt ::= */ yytestcase(yyruleno==142);
        fallthrough
      case 230: /* exprlist ::= */ yytestcase(yyruleno==230);
        fallthrough
      case 233: /* paren_exprlist ::= */ yytestcase(yyruleno==233);
        fallthrough
      case 238: /* eidlist_opt ::= */ yytestcase(yyruleno==238);
//line 673 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy614 = 0;}
//line 4188 "parse.go"
        break
      case 100: /* selcollist ::= sclp scanpt expr scanpt as */
//line 674 "parse.y"
{
   yypParser.yystack[yypParser.yytos+ -4].minor.yy614 = sqlite3ExprListAppend(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy614, yypParser.yystack[yypParser.yytos+ -2].minor.yy634);
   if( yypParser.yystack[yypParser.yytos+ 0].minor.yy0.n>0 ) {
     sqlite3ExprListSetName(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy614, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0, 1);
   }
   sqlite3ExprListSetSpan(pParse,yypParser.yystack[yypParser.yytos+ -4].minor.yy614,yypParser.yystack[yypParser.yytos+ -3].minor.yy79,yypParser.yystack[yypParser.yytos+ -1].minor.yy79);
}
//line 4199 "parse.go"
        break
      case 101: /* selcollist ::= sclp scanpt STAR */
//line 681 "parse.y"
{
  Expr *p = sqlite3Expr(pParse.db, TK_ASTERISK, 0);
  yypParser.yystack[yypParser.yytos+ -2].minor.yy614 = sqlite3ExprListAppend(pParse, yypParser.yystack[yypParser.yytos+ -2].minor.yy614, p);
}
//line 4207 "parse.go"
        break
      case 102: /* selcollist ::= sclp scanpt nm DOT STAR */
//line 685 "parse.y"
{
  pRight := sqlite3PExpr(pParse, TK_ASTERISK, 0, 0);
  pLeft := tokenExpr(pParse, TK_ID, yypParser.yystack[yypParser.yytos+ -2].minor.yy0);
  pDot := sqlite3PExpr(pParse, TK_DOT, pLeft, pRight);
  yypParser.yystack[yypParser.yytos+ -4].minor.yy614 = sqlite3ExprListAppend(pParse,yypParser.yystack[yypParser.yytos+ -4].minor.yy614, pDot);
}
//line 4217 "parse.go"
        break
      case 103: /* as ::= AS nm */
        fallthrough
      case 115: /* dbnm ::= DOT nm */ yytestcase(yyruleno==115);
        fallthrough
      case 254: /* plus_num ::= PLUS INTEGER|FLOAT */ yytestcase(yyruleno==254);
        fallthrough
      case 255: /* minus_num ::= MINUS INTEGER|FLOAT */ yytestcase(yyruleno==255);
//line 696 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy0 = yypParser.yystack[yypParser.yytos+ 0].minor.yy0;}
//line 4228 "parse.go"
        break
      case 105: /* from ::= */
        fallthrough
      case 108: /* stl_prefix ::= */ yytestcase(yyruleno==108);
//line 710 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy157 = 0;}
//line 4235 "parse.go"
        break
      case 106: /* from ::= FROM seltablist */
//line 711 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -1].minor.yy157 = yypParser.yystack[yypParser.yytos+ 0].minor.yy157;
  sqlite3SrcListShiftJoinType(pParse,yypParser.yystack[yypParser.yytos+ -1].minor.yy157);
}
//line 4243 "parse.go"
        break
      case 107: /* stl_prefix ::= seltablist joinop */
//line 719 "parse.y"
{
   if( ALWAYS(yypParser.yystack[yypParser.yytos+ -1].minor.yy157 && yypParser.yystack[yypParser.yytos+ -1].minor.yy157.nSrc>0) ) {
     yypParser.yystack[yypParser.yytos+ -1].minor.yy157.a[yypParser.yystack[yypParser.yytos+ -1].minor.yy157.nSrc-1].fg.jointype = uint8(yypParser.yystack[yypParser.yytos+ 0].minor.yy394);
   }
}
//line 4252 "parse.go"
        break
      case 109: /* seltablist ::= stl_prefix nm dbnm as on_using */
//line 725 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -4].minor.yy157 = sqlite3SrcListAppendFromTerm(pParse,yypParser.yystack[yypParser.yytos+ -4].minor.yy157,&yypParser.yystack[yypParser.yytos+ -3].minor.yy0,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy561);
}
//line 4259 "parse.go"
        break
      case 110: /* seltablist ::= stl_prefix nm dbnm as indexed_by on_using */
//line 728 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -5].minor.yy157 = sqlite3SrcListAppendFromTerm(pParse,yypParser.yystack[yypParser.yytos+ -5].minor.yy157,&yypParser.yystack[yypParser.yytos+ -4].minor.yy0,&yypParser.yystack[yypParser.yytos+ -3].minor.yy0,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy561);
  sqlite3SrcListIndexedBy(pParse, yypParser.yystack[yypParser.yytos+ -5].minor.yy157, &yypParser.yystack[yypParser.yytos+ -1].minor.yy0);
}
//line 4267 "parse.go"
        break
      case 111: /* seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_using */
//line 732 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -7].minor.yy157 = sqlite3SrcListAppendFromTerm(pParse,yypParser.yystack[yypParser.yytos+ -7].minor.yy157,&yypParser.yystack[yypParser.yytos+ -6].minor.yy0,&yypParser.yystack[yypParser.yytos+ -5].minor.yy0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy561);
  sqlite3SrcListFuncArgs(pParse, yypParser.yystack[yypParser.yytos+ -7].minor.yy157, yypParser.yystack[yypParser.yytos+ -3].minor.yy614);
}
//line 4275 "parse.go"
        break
      case 112: /* seltablist ::= stl_prefix LP select RP as on_using */
//line 737 "parse.y"
{
    yypParser.yystack[yypParser.yytos+ -5].minor.yy157 = sqlite3SrcListAppendFromTerm(pParse,yypParser.yystack[yypParser.yytos+ -5].minor.yy157,0,0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,yypParser.yystack[yypParser.yytos+ -3].minor.yy361,&yypParser.yystack[yypParser.yytos+ 0].minor.yy561);
  }
//line 4282 "parse.go"
        break
      case 113: /* seltablist ::= stl_prefix LP seltablist RP as on_using */
//line 740 "parse.y"
{
    if( yypParser.yystack[yypParser.yytos+ -5].minor.yy157==0 && yypParser.yystack[yypParser.yytos+ -1].minor.yy0.n==0 && yypParser.yystack[yypParser.yytos+ 0].minor.yy561.pOn==0 && yypParser.yystack[yypParser.yytos+ 0].minor.yy561.pUsing==0 ){
      yypParser.yystack[yypParser.yytos+ -5].minor.yy157 = yypParser.yystack[yypParser.yytos+ -3].minor.yy157;
    }else if( yypParser.yystack[yypParser.yytos+ -3].minor.yy157.nSrc==1 ){
      yypParser.yystack[yypParser.yytos+ -5].minor.yy157 = sqlite3SrcListAppendFromTerm(pParse,yypParser.yystack[yypParser.yytos+ -5].minor.yy157,0,0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy561);
      if( yypParser.yystack[yypParser.yytos+ -5].minor.yy157 ){
        pNew := &yypParser.yystack[yypParser.yytos+ -5].minor.yy157.a[yypParser.yystack[yypParser.yytos+ -5].minor.yy157.nSrc-1];
        pOld := yypParser.yystack[yypParser.yytos+ -3].minor.yy157.a;
        pNew.zName = pOld.zName;
        pNew.zDatabase = pOld.zDatabase;
        pNew.pSelect = pOld.pSelect;
        if( pNew.pSelect && (pNew.pSelect.selFlags & SF_NestedFrom)!=0 ){
          pNew.fg.isNestedFrom = 1;
        }
        if( pOld.fg.isTabFunc ){
          pNew.u1.pFuncArg = pOld.u1.pFuncArg;
          pOld.u1.pFuncArg = 0;
          pOld.fg.isTabFunc = 0;
          pNew.fg.isTabFunc = 1;
        }
        pOld.zName = 0;
        pOld.zDatabase = 0;
        pOld.pSelect = 0;
      }
      sqlite3SrcListDelete(pParse.db, yypParser.yystack[yypParser.yytos+ -3].minor.yy157);
    }else{
      var pSubquery *Select;
      sqlite3SrcListShiftJoinType(pParse,yypParser.yystack[yypParser.yytos+ -3].minor.yy157);
      pSubquery = sqlite3SelectNew(pParse,0,yypParser.yystack[yypParser.yytos+ -3].minor.yy157,0,0,0,0,SF_NestedFrom,0);
      yypParser.yystack[yypParser.yytos+ -5].minor.yy157 = sqlite3SrcListAppendFromTerm(pParse,yypParser.yystack[yypParser.yytos+ -5].minor.yy157,0,0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,pSubquery,&yypParser.yystack[yypParser.yytos+ 0].minor.yy561);
    }
  }
//line 4318 "parse.go"
        break
      case 114: /* dbnm ::= */
        fallthrough
      case 129: /* indexed_opt ::= */ yytestcase(yyruleno==129);
//line 775 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy0.z=0; yypParser.yystack[yypParser.yytos+ 1].minor.yy0.n=0;}
//line 4325 "parse.go"
        break
      case 116: /* fullname ::= nm */
//line 780 "parse.y"
{
  yylhsminor.yy157 = sqlite3SrcListAppend(pParse,0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0,0);
  if( IN_RENAME_OBJECT && yylhsminor.yy157 ) {
    sqlite3RenameTokenMap(pParse, yylhsminor.yy157.a[0].zName, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
  }
}
//line 4335 "parse.go"
  yypParser.yystack[yypParser.yytos+ 0].minor.yy157 = yylhsminor.yy157;
        break
      case 117: /* fullname ::= nm DOT nm */
//line 786 "parse.y"
{
  yylhsminor.yy157 = sqlite3SrcListAppend(pParse,0,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
  if( IN_RENAME_OBJECT && yylhsminor.yy157 ) {
    sqlite3RenameTokenMap(pParse, yylhsminor.yy157.a[0].zName, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
  }
}
//line 4346 "parse.go"
  yypParser.yystack[yypParser.yytos+ -2].minor.yy157 = yylhsminor.yy157;
        break
      case 118: /* xfullname ::= nm */
//line 796 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy157 = sqlite3SrcListAppend(pParse,0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0,0); /*A-overwrites-X*/}
//line 4352 "parse.go"
        break
      case 119: /* xfullname ::= nm DOT nm */
//line 798 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy157 = sqlite3SrcListAppend(pParse,0,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0); /*A-overwrites-X*/}
//line 4357 "parse.go"
        break
      case 120: /* xfullname ::= nm DOT nm AS nm */
//line 799 "parse.y"
{
   yypParser.yystack[yypParser.yytos+ -4].minor.yy157 = sqlite3SrcListAppend(pParse,0,&yypParser.yystack[yypParser.yytos+ -4].minor.yy0,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0); /*A-overwrites-X*/
   if( yypParser.yystack[yypParser.yytos+ -4].minor.yy157 ) {
     yypParser.yystack[yypParser.yytos+ -4].minor.yy157.a[0].zAlias = sqlite3NameFromToken(pParse.db, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
   }
}
//line 4367 "parse.go"
        break
      case 121: /* xfullname ::= nm AS nm */
//line 805 "parse.y"
{  
   yypParser.yystack[yypParser.yytos+ -2].minor.yy157 = sqlite3SrcListAppend(pParse,0,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,0); /*A-overwrites-X*/
   if( yypParser.yystack[yypParser.yytos+ -2].minor.yy157 ) {
     yypParser.yystack[yypParser.yytos+ -2].minor.yy157.a[0].zAlias = sqlite3NameFromToken(pParse.db, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
   }
}
//line 4377 "parse.go"
        break
      case 122: /* joinop ::= COMMA|JOIN */
//line 813 "parse.y"
{ yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = JT_INNER; }
//line 4382 "parse.go"
        break
      case 123: /* joinop ::= JOIN_KW JOIN */
//line 815 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = sqlite3JoinType(pParse,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,0,0);  /*X-overwrites-A*/}
//line 4387 "parse.go"
        break
      case 124: /* joinop ::= JOIN_KW nm JOIN */
//line 817 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy394 = sqlite3JoinType(pParse,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,0); /*X-overwrites-A*/}
//line 4392 "parse.go"
        break
      case 125: /* joinop ::= JOIN_KW nm nm JOIN */
//line 819 "parse.y"
{yypParser.yystack[yypParser.yytos+ -3].minor.yy394 = sqlite3JoinType(pParse,&yypParser.yystack[yypParser.yytos+ -3].minor.yy0,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0);/*X-overwrites-A*/}
//line 4397 "parse.go"
        break
      case 126: /* on_using ::= ON expr */
//line 840 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy561.pOn = yypParser.yystack[yypParser.yytos+ 0].minor.yy634; yypParser.yystack[yypParser.yytos+ -1].minor.yy561.pUsing = 0;}
//line 4402 "parse.go"
        break
      case 127: /* on_using ::= USING LP idlist RP */
//line 841 "parse.y"
{yypParser.yystack[yypParser.yytos+ -3].minor.yy561.pOn = 0; yypParser.yystack[yypParser.yytos+ -3].minor.yy561.pUsing = yypParser.yystack[yypParser.yytos+ -1].minor.yy106;}
//line 4407 "parse.go"
        break
      case 128: /* on_using ::= */
//line 842 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy561.pOn = 0; yypParser.yystack[yypParser.yytos+ 1].minor.yy561.pUsing = 0;}
//line 4412 "parse.go"
        break
      case 130: /* indexed_by ::= INDEXED BY nm */
//line 858 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy0 = yypParser.yystack[yypParser.yytos+ 0].minor.yy0;}
//line 4417 "parse.go"
        break
      case 131: /* indexed_by ::= NOT INDEXED */
//line 859 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy0.z=0; yypParser.yystack[yypParser.yytos+ -1].minor.yy0.n=1;}
//line 4422 "parse.go"
        break
      case 133: /* orderby_opt ::= ORDER BY sortlist */
        fallthrough
      case 143: /* groupby_opt ::= GROUP BY nexprlist */ yytestcase(yyruleno==143);
//line 872 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy614 = yypParser.yystack[yypParser.yytos+ 0].minor.yy614;}
//line 4429 "parse.go"
        break
      case 134: /* sortlist ::= sortlist COMMA expr sortorder nulls */
//line 873 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -4].minor.yy614 = sqlite3ExprListAppend(pParse,yypParser.yystack[yypParser.yytos+ -4].minor.yy614,yypParser.yystack[yypParser.yytos+ -2].minor.yy634);
  sqlite3ExprListSetSortOrder(yypParser.yystack[yypParser.yytos+ -4].minor.yy614,yypParser.yystack[yypParser.yytos+ -1].minor.yy394,yypParser.yystack[yypParser.yytos+ 0].minor.yy394);
}
//line 4437 "parse.go"
        break
      case 135: /* sortlist ::= expr sortorder nulls */
//line 877 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -2].minor.yy614 = sqlite3ExprListAppend(pParse,0,yypParser.yystack[yypParser.yytos+ -2].minor.yy634); /*A-overwrites-Y*/
  sqlite3ExprListSetSortOrder(yypParser.yystack[yypParser.yytos+ -2].minor.yy614,yypParser.yystack[yypParser.yytos+ -1].minor.yy394,yypParser.yystack[yypParser.yytos+ 0].minor.yy394);
}
//line 4445 "parse.go"
        break
      case 136: /* sortorder ::= ASC */
//line 884 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = SQLITE_SO_ASC;}
//line 4450 "parse.go"
        break
      case 137: /* sortorder ::= DESC */
//line 885 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = SQLITE_SO_DESC;}
//line 4455 "parse.go"
        break
      case 138: /* sortorder ::= */
        fallthrough
      case 141: /* nulls ::= */ yytestcase(yyruleno==141);
//line 886 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy394 = SQLITE_SO_UNDEFINED;}
//line 4462 "parse.go"
        break
      case 139: /* nulls ::= NULLS FIRST */
//line 889 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = SQLITE_SO_ASC;}
//line 4467 "parse.go"
        break
      case 140: /* nulls ::= NULLS LAST */
//line 890 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = SQLITE_SO_DESC;}
//line 4472 "parse.go"
        break
      case 144: /* having_opt ::= */
        fallthrough
      case 146: /* limit_opt ::= */ yytestcase(yyruleno==146);
        fallthrough
      case 151: /* where_opt ::= */ yytestcase(yyruleno==151);
        fallthrough
      case 153: /* where_opt_ret ::= */ yytestcase(yyruleno==153);
        fallthrough
      case 227: /* case_else ::= */ yytestcase(yyruleno==227);
        fallthrough
      case 229: /* case_operand ::= */ yytestcase(yyruleno==229);
        fallthrough
      case 248: /* vinto ::= */ yytestcase(yyruleno==248);
//line 900 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy634 = 0;}
//line 4489 "parse.go"
        break
      case 145: /* having_opt ::= HAVING expr */
        fallthrough
      case 152: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==152);
        fallthrough
      case 154: /* where_opt_ret ::= WHERE expr */ yytestcase(yyruleno==154);
        fallthrough
      case 226: /* case_else ::= ELSE expr */ yytestcase(yyruleno==226);
        fallthrough
      case 247: /* vinto ::= INTO expr */ yytestcase(yyruleno==247);
//line 901 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy634 = yypParser.yystack[yypParser.yytos+ 0].minor.yy634;}
//line 4502 "parse.go"
        break
      case 147: /* limit_opt ::= LIMIT expr */
//line 915 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy634 = sqlite3PExpr(pParse,TK_LIMIT,yypParser.yystack[yypParser.yytos+ 0].minor.yy634,0);}
//line 4507 "parse.go"
        break
      case 148: /* limit_opt ::= LIMIT expr OFFSET expr */
//line 917 "parse.y"
{yypParser.yystack[yypParser.yytos+ -3].minor.yy634 = sqlite3PExpr(pParse,TK_LIMIT,yypParser.yystack[yypParser.yytos+ -2].minor.yy634,yypParser.yystack[yypParser.yytos+ 0].minor.yy634);}
//line 4512 "parse.go"
        break
      case 149: /* limit_opt ::= LIMIT expr COMMA expr */
//line 919 "parse.y"
{yypParser.yystack[yypParser.yytos+ -3].minor.yy634 = sqlite3PExpr(pParse,TK_LIMIT,yypParser.yystack[yypParser.yytos+ 0].minor.yy634,yypParser.yystack[yypParser.yytos+ -2].minor.yy634);}
//line 4517 "parse.go"
        break
      case 150: /* cmd ::= with DELETE FROM xfullname indexed_opt where_opt_ret */
//line 937 "parse.y"
{
  sqlite3SrcListIndexedBy(pParse, yypParser.yystack[yypParser.yytos+ -2].minor.yy157, &yypParser.yystack[yypParser.yytos+ -1].minor.yy0);
  sqlite3DeleteFrom(pParse,yypParser.yystack[yypParser.yytos+ -2].minor.yy157,yypParser.yystack[yypParser.yytos+ 0].minor.yy634,0,0);
}
//line 4525 "parse.go"
        break
      case 155: /* where_opt_ret ::= RETURNING selcollist */
//line 953 "parse.y"
{sqlite3AddReturning(pParse,yypParser.yystack[yypParser.yytos+ 0].minor.yy614); yypParser.yystack[yypParser.yytos+ -1].minor.yy634 = 0;}
//line 4530 "parse.go"
        break
      case 156: /* where_opt_ret ::= WHERE expr RETURNING selcollist */
//line 955 "parse.y"
{sqlite3AddReturning(pParse,yypParser.yystack[yypParser.yytos+ 0].minor.yy614); yypParser.yystack[yypParser.yytos+ -3].minor.yy634 = yypParser.yystack[yypParser.yytos+ -2].minor.yy634;}
//line 4535 "parse.go"
        break
      case 157: /* cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt_ret */
//line 976 "parse.y"
{
  sqlite3SrcListIndexedBy(pParse, yypParser.yystack[yypParser.yytos+ -5].minor.yy157, &yypParser.yystack[yypParser.yytos+ -4].minor.yy0);
  sqlite3ExprListCheckLength(pParse,yypParser.yystack[yypParser.yytos+ -2].minor.yy614,"set list"); 
  yypParser.yystack[yypParser.yytos+ -5].minor.yy157 = sqlite3SrcListAppendList(pParse, yypParser.yystack[yypParser.yytos+ -5].minor.yy157, yypParser.yystack[yypParser.yytos+ -1].minor.yy157);
  sqlite3Update(pParse,yypParser.yystack[yypParser.yytos+ -5].minor.yy157,yypParser.yystack[yypParser.yytos+ -2].minor.yy614,yypParser.yystack[yypParser.yytos+ 0].minor.yy634,yypParser.yystack[yypParser.yytos+ -6].minor.yy394,0,0,0);
}
//line 4545 "parse.go"
        break
      case 158: /* setlist ::= setlist COMMA nm EQ expr */
//line 989 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -4].minor.yy614 = sqlite3ExprListAppend(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy614, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
  sqlite3ExprListSetName(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy614, &yypParser.yystack[yypParser.yytos+ -2].minor.yy0, 1);
}
//line 4553 "parse.go"
        break
      case 159: /* setlist ::= setlist COMMA LP idlist RP EQ expr */
//line 993 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -6].minor.yy614 = sqlite3ExprListAppendVector(pParse, yypParser.yystack[yypParser.yytos+ -6].minor.yy614, yypParser.yystack[yypParser.yytos+ -3].minor.yy106, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
}
//line 4560 "parse.go"
        break
      case 160: /* setlist ::= nm EQ expr */
//line 996 "parse.y"
{
  yylhsminor.yy614 = sqlite3ExprListAppend(pParse, 0, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
  sqlite3ExprListSetName(pParse, yylhsminor.yy614, &yypParser.yystack[yypParser.yytos+ -2].minor.yy0, 1);
}
//line 4568 "parse.go"
  yypParser.yystack[yypParser.yytos+ -2].minor.yy614 = yylhsminor.yy614;
        break
      case 161: /* setlist ::= LP idlist RP EQ expr */
//line 1000 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -4].minor.yy614 = sqlite3ExprListAppendVector(pParse, 0, yypParser.yystack[yypParser.yytos+ -3].minor.yy106, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
}
//line 4576 "parse.go"
        break
      case 162: /* cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert */
//line 1007 "parse.y"
{
  sqlite3Insert(pParse, yypParser.yystack[yypParser.yytos+ -3].minor.yy157, yypParser.yystack[yypParser.yytos+ -1].minor.yy361, yypParser.yystack[yypParser.yytos+ -2].minor.yy106, yypParser.yystack[yypParser.yytos+ -5].minor.yy394, yypParser.yystack[yypParser.yytos+ 0].minor.yy442);
}
//line 4583 "parse.go"
        break
      case 163: /* cmd ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning */
//line 1011 "parse.y"
{
  sqlite3Insert(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy157, 0, yypParser.yystack[yypParser.yytos+ -3].minor.yy106, yypParser.yystack[yypParser.yytos+ -6].minor.yy394, 0);
}
//line 4590 "parse.go"
        break
      case 164: /* upsert ::= */
//line 1022 "parse.y"
{ yypParser.yystack[yypParser.yytos+ 1].minor.yy442 = 0; }
//line 4595 "parse.go"
        break
      case 165: /* upsert ::= RETURNING selcollist */
//line 1023 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -1].minor.yy442 = 0; sqlite3AddReturning(pParse,yypParser.yystack[yypParser.yytos+ 0].minor.yy614); }
//line 4600 "parse.go"
        break
      case 166: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt upsert */
//line 1026 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -11].minor.yy442 = sqlite3UpsertNew(pParse.db,yypParser.yystack[yypParser.yytos+ -8].minor.yy614,yypParser.yystack[yypParser.yytos+ -6].minor.yy634,yypParser.yystack[yypParser.yytos+ -2].minor.yy614,yypParser.yystack[yypParser.yytos+ -1].minor.yy634,yypParser.yystack[yypParser.yytos+ 0].minor.yy442);}
//line 4605 "parse.go"
        break
      case 167: /* upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING upsert */
//line 1028 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -8].minor.yy442 = sqlite3UpsertNew(pParse.db,yypParser.yystack[yypParser.yytos+ -5].minor.yy614,yypParser.yystack[yypParser.yytos+ -3].minor.yy634,0,0,yypParser.yystack[yypParser.yytos+ 0].minor.yy442); }
//line 4610 "parse.go"
        break
      case 168: /* upsert ::= ON CONFLICT DO NOTHING returning */
//line 1030 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -4].minor.yy442 = sqlite3UpsertNew(pParse.db,0,0,0,0,0); }
//line 4615 "parse.go"
        break
      case 169: /* upsert ::= ON CONFLICT DO UPDATE SET setlist where_opt returning */
//line 1032 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -7].minor.yy442 = sqlite3UpsertNew(pParse.db,0,0,yypParser.yystack[yypParser.yytos+ -2].minor.yy614,yypParser.yystack[yypParser.yytos+ -1].minor.yy634,0);}
//line 4620 "parse.go"
        break
      case 170: /* returning ::= RETURNING selcollist */
//line 1034 "parse.y"
{sqlite3AddReturning(pParse,yypParser.yystack[yypParser.yytos+ 0].minor.yy614);}
//line 4625 "parse.go"
        break
      case 173: /* idlist_opt ::= */
//line 1046 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy106 = 0;}
//line 4630 "parse.go"
        break
      case 174: /* idlist_opt ::= LP idlist RP */
//line 1047 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy106 = yypParser.yystack[yypParser.yytos+ -1].minor.yy106;}
//line 4635 "parse.go"
        break
      case 175: /* idlist ::= idlist COMMA nm */
//line 1049 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy106 = sqlite3IdListAppend(pParse,yypParser.yystack[yypParser.yytos+ -2].minor.yy106,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0);}
//line 4640 "parse.go"
        break
      case 176: /* idlist ::= nm */
//line 1051 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy106 = sqlite3IdListAppend(pParse,0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0); /*A-overwrites-Y*/}
//line 4645 "parse.go"
        break
      case 177: /* expr ::= LP expr RP */
//line 1101 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy634 = yypParser.yystack[yypParser.yytos+ -1].minor.yy634;}
//line 4650 "parse.go"
        break
      case 178: /* expr ::= ID|INDEXED */
        fallthrough
      case 179: /* expr ::= JOIN_KW */ yytestcase(yyruleno==179);
//line 1102 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy634=tokenExpr(pParse,TK_ID,yypParser.yystack[yypParser.yytos+ 0].minor.yy0); /*A-overwrites-X*/}
//line 4657 "parse.go"
        break
      case 180: /* expr ::= nm DOT nm */
//line 1104 "parse.y"
{
  Expr *temp1 = tokenExpr(pParse,TK_ID,yypParser.yystack[yypParser.yytos+ -2].minor.yy0);
  Expr *temp2 = tokenExpr(pParse,TK_ID,yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
  yylhsminor.yy634 = sqlite3PExpr(pParse, TK_DOT, temp1, temp2);
}
//line 4666 "parse.go"
  yypParser.yystack[yypParser.yytos+ -2].minor.yy634 = yylhsminor.yy634;
        break
      case 181: /* expr ::= nm DOT nm DOT nm */
//line 1109 "parse.y"
{
  temp1 := tokenExpr(pParse,TK_ID,yypParser.yystack[yypParser.yytos+ -4].minor.yy0);
  temp2 := tokenExpr(pParse,TK_ID,yypParser.yystack[yypParser.yytos+ -2].minor.yy0);
  temp3 := tokenExpr(pParse,TK_ID,yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
  temp4 := sqlite3PExpr(pParse, TK_DOT, temp2, temp3);
  if( IN_RENAME_OBJECT ){
    sqlite3RenameTokenRemap(pParse, 0, temp1);
  }
  yylhsminor.yy634 = sqlite3PExpr(pParse, TK_DOT, temp1, temp4);
}
//line 4681 "parse.go"
  yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = yylhsminor.yy634;
        break
      case 182: /* term ::= NULL|FLOAT|BLOB */
        fallthrough
      case 183: /* term ::= STRING */ yytestcase(yyruleno==183);
//line 1119 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy634=tokenExpr(pParse,yypParser.yystack[yypParser.yytos+ 0].major,yypParser.yystack[yypParser.yytos+ 0].minor.yy0); /*A-overwrites-X*/}
//line 4689 "parse.go"
        break
      case 184: /* term ::= INTEGER */
//line 1121 "parse.y"
{
  yylhsminor.yy634 = sqlite3ExprAlloc(pParse.db, TK_INTEGER, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0, 1);
  if( yylhsminor.yy634 ) {
    yylhsminor.yy634.w.iOfst = (int)(yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z - pParse.zTail);
  }
}
//line 4699 "parse.go"
  yypParser.yystack[yypParser.yytos+ 0].minor.yy634 = yylhsminor.yy634;
        break
      case 185: /* expr ::= VARIABLE */
//line 1127 "parse.y"
{
  if( !(yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z[0]=='#' && sqlite3Isdigit(yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z[1])) ){
    n := yypParser.yystack[yypParser.yytos+ 0].minor.yy0.n;
    yypParser.yystack[yypParser.yytos+ 0].minor.yy634 = tokenExpr(pParse, TK_VARIABLE, yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
    sqlite3ExprAssignVarNumber(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy634, n);
  }else{
    /* When doing a nested parse, one can include terms in an expression
    ** that look like this:   #1 #2 ...  These terms refer to registers
    ** in the virtual machine.  #N is the N-th register. */
    var t Token
    t = yypParser.yystack[yypParser.yytos+ 0].minor.yy0; /*A-overwrites-X*/
    assert( t.n>=2 , "t.n>=2");
    if( pParse.nested==0 ){
      sqlite3ErrorMsg(pParse, "near \"%T\": syntax error", &t);
      yypParser.yystack[yypParser.yytos+ 0].minor.yy634 = 0;
    }else{
      yypParser.yystack[yypParser.yytos+ 0].minor.yy634 = sqlite3PExpr(pParse, TK_REGISTER, 0, 0);
      if( yypParser.yystack[yypParser.yytos+ 0].minor.yy634 ) {
        sqlite3GetInt32(&t.z[1], &yypParser.yystack[yypParser.yytos+ 0].minor.yy634.iTable);
      }
    }
  }
}
//line 4727 "parse.go"
        break
      case 186: /* expr ::= expr COLLATE ID|STRING */
//line 1150 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -2].minor.yy634 = sqlite3ExprAddCollateToken(pParse, yypParser.yystack[yypParser.yytos+ -2].minor.yy634, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0, 1);
}
//line 4734 "parse.go"
        break
      case 187: /* expr ::= CAST LP expr AS typetoken RP */
//line 1154 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -5].minor.yy634 = sqlite3ExprAlloc(pParse.db, TK_CAST, &yypParser.yystack[yypParser.yytos+ -1].minor.yy0, 1);
  sqlite3ExprAttachSubtrees(pParse.db, yypParser.yystack[yypParser.yytos+ -5].minor.yy634, yypParser.yystack[yypParser.yytos+ -3].minor.yy634, 0);
}
//line 4742 "parse.go"
        break
      case 188: /* expr ::= ID|INDEXED LP distinct exprlist RP */
//line 1161 "parse.y"
{
  yylhsminor.yy634 = sqlite3ExprFunction(pParse, yypParser.yystack[yypParser.yytos+ -1].minor.yy614, &yypParser.yystack[yypParser.yytos+ -4].minor.yy0, yypParser.yystack[yypParser.yytos+ -2].minor.yy394);
}
//line 4749 "parse.go"
  yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = yylhsminor.yy634;
        break
      case 189: /* expr ::= ID|INDEXED LP STAR RP */
//line 1164 "parse.y"
{
  yylhsminor.yy634 = sqlite3ExprFunction(pParse, 0, &yypParser.yystack[yypParser.yytos+ -3].minor.yy0, 0);
}
//line 4757 "parse.go"
  yypParser.yystack[yypParser.yytos+ -3].minor.yy634 = yylhsminor.yy634;
        break
      case 190: /* expr ::= ID|INDEXED LP distinct exprlist RP filter_over */
//line 1169 "parse.y"
{
  yylhsminor.yy634 = sqlite3ExprFunction(pParse, yypParser.yystack[yypParser.yytos+ -2].minor.yy614, &yypParser.yystack[yypParser.yytos+ -5].minor.yy0, yypParser.yystack[yypParser.yytos+ -3].minor.yy394);
  sqlite3WindowAttach(pParse, yylhsminor.yy634, yypParser.yystack[yypParser.yytos+ 0].minor.yy179);
}
//line 4766 "parse.go"
  yypParser.yystack[yypParser.yytos+ -5].minor.yy634 = yylhsminor.yy634;
        break
      case 191: /* expr ::= ID|INDEXED LP STAR RP filter_over */
//line 1173 "parse.y"
{
  yylhsminor.yy634 = sqlite3ExprFunction(pParse, 0, &yypParser.yystack[yypParser.yytos+ -4].minor.yy0, 0);
  sqlite3WindowAttach(pParse, yylhsminor.yy634, yypParser.yystack[yypParser.yytos+ 0].minor.yy179);
}
//line 4775 "parse.go"
  yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = yylhsminor.yy634;
        break
      case 192: /* term ::= CTIME_KW */
//line 1179 "parse.y"
{
  yylhsminor.yy634 = sqlite3ExprFunction(pParse, 0, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0, 0);
}
//line 4783 "parse.go"
  yypParser.yystack[yypParser.yytos+ 0].minor.yy634 = yylhsminor.yy634;
        break
      case 193: /* expr ::= LP nexprlist COMMA expr RP */
//line 1183 "parse.y"
{
  ExprList *pList = sqlite3ExprListAppend(pParse, yypParser.yystack[yypParser.yytos+ -3].minor.yy614, yypParser.yystack[yypParser.yytos+ -1].minor.yy634);
  yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);
  if( yypParser.yystack[yypParser.yytos+ -4].minor.yy634 ){
    yypParser.yystack[yypParser.yytos+ -4].minor.yy634.x.pList = pList;
    if( ALWAYS(pList.nExpr) ){
      yypParser.yystack[yypParser.yytos+ -4].minor.yy634.flags |= pList.a[0].pExpr.flags & EP_Propagate;
    }
  }else{
    sqlite3ExprListDelete(pParse.db, pList);
  }
}
//line 4800 "parse.go"
        break
      case 194: /* expr ::= expr AND expr */
//line 1196 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy634=sqlite3ExprAnd(pParse,yypParser.yystack[yypParser.yytos+ -2].minor.yy634,yypParser.yystack[yypParser.yytos+ 0].minor.yy634);}
//line 4805 "parse.go"
        break
      case 195: /* expr ::= expr OR expr */
        fallthrough
      case 196: /* expr ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==196);
        fallthrough
      case 197: /* expr ::= expr EQ|NE expr */ yytestcase(yyruleno==197);
        fallthrough
      case 198: /* expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==198);
        fallthrough
      case 199: /* expr ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==199);
        fallthrough
      case 200: /* expr ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==200);
        fallthrough
      case 201: /* expr ::= expr CONCAT expr */ yytestcase(yyruleno==201);
//line 1197 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy634=sqlite3PExpr(pParse,yypParser.yystack[yypParser.yytos+ -1].major,yypParser.yystack[yypParser.yytos+ -2].minor.yy634,yypParser.yystack[yypParser.yytos+ 0].minor.yy634);}
//line 4822 "parse.go"
        break
      case 202: /* likeop ::= NOT LIKE_KW|MATCH */
//line 1210 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy0=yypParser.yystack[yypParser.yytos+ 0].minor.yy0; yypParser.yystack[yypParser.yytos+ -1].minor.yy0.n|=0x80000000; /*yypParser.yystack[yypParser.yytos+ -1].minor.yy0-overwrite-yypParser.yystack[yypParser.yytos+ 0].minor.yy0*/}
//line 4827 "parse.go"
        break
      case 203: /* expr ::= expr likeop expr */
//line 1211 "parse.y"
{
  var pList *ExprList;
  bNot := int(yypParser.yystack[yypParser.yytos+ -1].minor.yy0.n & 0x80000000);
  yypParser.yystack[yypParser.yytos+ -1].minor.yy0.n &= 0x7fffffff;
  pList = sqlite3ExprListAppend(pParse,0, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
  pList = sqlite3ExprListAppend(pParse,pList, yypParser.yystack[yypParser.yytos+ -2].minor.yy634);
  yypParser.yystack[yypParser.yytos+ -2].minor.yy634 = sqlite3ExprFunction(pParse, pList, &yypParser.yystack[yypParser.yytos+ -1].minor.yy0, 0);
  if( bNot ) {
    yypParser.yystack[yypParser.yytos+ -2].minor.yy634 = sqlite3PExpr(pParse, TK_NOT, yypParser.yystack[yypParser.yytos+ -2].minor.yy634, 0);
  }
  if( yypParser.yystack[yypParser.yytos+ -2].minor.yy634 ) {
    yypParser.yystack[yypParser.yytos+ -2].minor.yy634.flags |= EP_InfixFunc;
  }
}
//line 4845 "parse.go"
        break
      case 204: /* expr ::= expr likeop expr ESCAPE expr */
//line 1225 "parse.y"
{
  var pList *ExprList;
  bNot := int(yypParser.yystack[yypParser.yytos+ -3].minor.yy0.n & 0x80000000);
  yypParser.yystack[yypParser.yytos+ -3].minor.yy0.n &= 0x7fffffff;
  pList = sqlite3ExprListAppend(pParse,0, yypParser.yystack[yypParser.yytos+ -2].minor.yy634);
  pList = sqlite3ExprListAppend(pParse,pList, yypParser.yystack[yypParser.yytos+ -4].minor.yy634);
  pList = sqlite3ExprListAppend(pParse,pList, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
  yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3ExprFunction(pParse, pList, &yypParser.yystack[yypParser.yytos+ -3].minor.yy0, 0);
  if( bNot ) {
    yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_NOT, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, 0);
  }
  if( yypParser.yystack[yypParser.yytos+ -4].minor.yy634 ) {
    yypParser.yystack[yypParser.yytos+ -4].minor.yy634.flags |= EP_InfixFunc;
  }
}
//line 4864 "parse.go"
        break
      case 205: /* expr ::= expr ISNULL|NOTNULL */
//line 1241 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy634 = sqlite3PExpr(pParse,yypParser.yystack[yypParser.yytos+ 0].major,yypParser.yystack[yypParser.yytos+ -1].minor.yy634,0);}
//line 4869 "parse.go"
        break
      case 206: /* expr ::= expr NOT NULL */
//line 1242 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy634 = sqlite3PExpr(pParse,TK_NOTNULL,yypParser.yystack[yypParser.yytos+ -2].minor.yy634,0);}
//line 4874 "parse.go"
        break
      case 207: /* expr ::= expr IS expr */
//line 1263 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -2].minor.yy634 = sqlite3PExpr(pParse,TK_IS,yypParser.yystack[yypParser.yytos+ -2].minor.yy634,yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
  binaryToUnaryIfNull(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy634, yypParser.yystack[yypParser.yytos+ -2].minor.yy634, TK_ISNULL);
}
//line 4882 "parse.go"
        break
      case 208: /* expr ::= expr IS NOT expr */
//line 1267 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -3].minor.yy634 = sqlite3PExpr(pParse,TK_ISNOT,yypParser.yystack[yypParser.yytos+ -3].minor.yy634,yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
  binaryToUnaryIfNull(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy634, yypParser.yystack[yypParser.yytos+ -3].minor.yy634, TK_NOTNULL);
}
//line 4890 "parse.go"
        break
      case 209: /* expr ::= NOT expr */
        fallthrough
      case 210: /* expr ::= BITNOT expr */ yytestcase(yyruleno==210);
//line 1273 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy634 = sqlite3PExpr(pParse, yypParser.yystack[yypParser.yytos+ -1].major, yypParser.yystack[yypParser.yytos+ 0].minor.yy634, 0);/*A-overwrites-B*/}
//line 4897 "parse.go"
        break
      case 211: /* expr ::= PLUS|MINUS expr */
//line 1276 "parse.y"
{
  // yypParser.yystack[yypParser.yytos+ -1].minor.yy634 = sqlite3PExpr(pParse, yypParser.yystack[yypParser.yytos+ -1].major==TK_PLUS ? TK_UPLUS : TK_UMINUS, yypParser.yystack[yypParser.yytos+ 0].minor.yy634, 0);
  /*A-overwrites-B*/
}
//line 4905 "parse.go"
        break
      case 212: /* expr ::= expr PTR expr */
//line 1281 "parse.y"
{
  ExprList *pList = sqlite3ExprListAppend(pParse, 0, yypParser.yystack[yypParser.yytos+ -2].minor.yy634);
  pList = sqlite3ExprListAppend(pParse, pList, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
  yylhsminor.yy634 = sqlite3ExprFunction(pParse, pList, &yypParser.yystack[yypParser.yytos+ -1].minor.yy0, 0);
}
//line 4914 "parse.go"
  yypParser.yystack[yypParser.yytos+ -2].minor.yy634 = yylhsminor.yy634;
        break
      case 213: /* between_op ::= BETWEEN */
        fallthrough
      case 216: /* in_op ::= IN */ yytestcase(yyruleno==216);
//line 1288 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = 0;}
//line 4922 "parse.go"
        break
      case 215: /* expr ::= expr between_op expr AND expr */
//line 1290 "parse.y"
{
  pList := sqlite3ExprListAppend(pParse,0, yypParser.yystack[yypParser.yytos+ -2].minor.yy634);
  pList = sqlite3ExprListAppend(pParse,pList, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
  yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_BETWEEN, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, 0);
  if( yypParser.yystack[yypParser.yytos+ -4].minor.yy634 ){
    yypParser.yystack[yypParser.yytos+ -4].minor.yy634.x.pList = pList;
  }else{
    sqlite3ExprListDelete(pParse.db, pList);
  } 
  if( yypParser.yystack[yypParser.yytos+ -3].minor.yy394 ) {
    yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_NOT, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, 0);
  }
}
//line 4939 "parse.go"
        break
      case 218: /* expr ::= expr in_op LP exprlist RP */
//line 1307 "parse.y"
{
    if( yypParser.yystack[yypParser.yytos+ -1].minor.yy614==0 ){
      /* Expressions of the form
      **
      **      expr1 IN ()
      **      expr1 NOT IN ()
      **
      ** simplify to constants 0 (false) and 1 (true), respectively,
      ** regardless of the value of expr1.
      */
      sqlite3ExprUnmapAndDelete(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy634);
      cnt := "0"
      if (yypParser.yystack[yypParser.yytos+ -3].minor.yy394) {
        cnt = "1"
      }
      yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3Expr(pParse.db, TK_INTEGER, cnt);
    }else{
      pRHS := yypParser.yystack[yypParser.yytos+ -1].minor.yy614.a[0].pExpr;
      if( yypParser.yystack[yypParser.yytos+ -1].minor.yy614.nExpr==1 && sqlite3ExprIsConstant(pRHS) && yypParser.yystack[yypParser.yytos+ -4].minor.yy634.op!=TK_VECTOR ){
        yypParser.yystack[yypParser.yytos+ -1].minor.yy614.a[0].pExpr = 0;
        sqlite3ExprListDelete(pParse.db, yypParser.yystack[yypParser.yytos+ -1].minor.yy614);
        pRHS = sqlite3PExpr(pParse, TK_UPLUS, pRHS, 0);
        yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_EQ, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, pRHS);
      }else{
        yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_IN, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, 0);
        if( yypParser.yystack[yypParser.yytos+ -4].minor.yy634==0 ){
          sqlite3ExprListDelete(pParse.db, yypParser.yystack[yypParser.yytos+ -1].minor.yy614);
        }else if( yypParser.yystack[yypParser.yytos+ -4].minor.yy634.pLeft.op==TK_VECTOR ){
          nExpr := yypParser.yystack[yypParser.yytos+ -4].minor.yy634.pLeft.x.pList.nExpr;
          pSelectRHS := sqlite3ExprListToValues(pParse, nExpr, yypParser.yystack[yypParser.yytos+ -1].minor.yy614);
          if( pSelectRHS ){
            parserDoubleLinkSelect(pParse, pSelectRHS);
            sqlite3PExprAddSelect(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, pSelectRHS);
          }
        }else{
          yypParser.yystack[yypParser.yytos+ -4].minor.yy634.x.pList = yypParser.yystack[yypParser.yytos+ -1].minor.yy614;
          sqlite3ExprSetHeightAndFlags(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy634);
        }
      }
      if( yypParser.yystack[yypParser.yytos+ -3].minor.yy394 ) {
        yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_NOT, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, 0);
      }
    }
  }
//line 4987 "parse.go"
        break
      case 219: /* expr ::= LP select RP */
//line 1351 "parse.y"
{
    yypParser.yystack[yypParser.yytos+ -2].minor.yy634 = sqlite3PExpr(pParse, TK_SELECT, 0, 0);
    sqlite3PExprAddSelect(pParse, yypParser.yystack[yypParser.yytos+ -2].minor.yy634, yypParser.yystack[yypParser.yytos+ -1].minor.yy361);
  }
//line 4995 "parse.go"
        break
      case 220: /* expr ::= expr in_op LP select RP */
//line 1355 "parse.y"
{
    yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_IN, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, 0);
    sqlite3PExprAddSelect(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, yypParser.yystack[yypParser.yytos+ -1].minor.yy361);
    if( yypParser.yystack[yypParser.yytos+ -3].minor.yy394 ) {
      yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_NOT, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, 0);
    }
  }
//line 5006 "parse.go"
        break
      case 221: /* expr ::= expr in_op nm dbnm paren_exprlist */
//line 1362 "parse.y"
{
    pSrc := sqlite3SrcListAppend(pParse, 0,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0);
    pSelect := sqlite3SelectNew(pParse, 0,pSrc,0,0,0,0,0,0);
    if( yypParser.yystack[yypParser.yytos+ 0].minor.yy614 ) {
      if (pSelect != nil) {
        sqlite3SrcListFuncArgs(pParse, pSrc, yypParser.yystack[yypParser.yytos+ 0].minor.yy614);
      } else {
        sqlite3SrcListFuncArgs(pParse, nil, yypParser.yystack[yypParser.yytos+ 0].minor.yy614);
      }
    }
    yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_IN, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, 0);
    sqlite3PExprAddSelect(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, pSelect);
    if( yypParser.yystack[yypParser.yytos+ -3].minor.yy394 ) {
      yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_NOT, yypParser.yystack[yypParser.yytos+ -4].minor.yy634, 0);
    }
  }
//line 5026 "parse.go"
        break
      case 222: /* expr ::= EXISTS LP select RP */
//line 1378 "parse.y"
{
    var p *Expr;
    yypParser.yystack[yypParser.yytos+ -3].minor.yy634 = sqlite3PExpr(pParse, TK_EXISTS, 0, 0);
    p = yypParser.yystack[yypParser.yytos+ -3].minor.yy634
    sqlite3PExprAddSelect(pParse, p, yypParser.yystack[yypParser.yytos+ -1].minor.yy361);
  }
//line 5036 "parse.go"
        break
      case 223: /* expr ::= CASE case_operand case_exprlist case_else END */
//line 1387 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = sqlite3PExpr(pParse, TK_CASE, yypParser.yystack[yypParser.yytos+ -3].minor.yy634, 0);
  if( yypParser.yystack[yypParser.yytos+ -4].minor.yy634 ){
    if( yypParser.yystack[yypParser.yytos+ -1].minor.yy634 ) {
      yypParser.yystack[yypParser.yytos+ -4].minor.yy634.x.pList = sqlite3ExprListAppend(pParse,yypParser.yystack[yypParser.yytos+ -2].minor.yy614,yypParser.yystack[yypParser.yytos+ -1].minor.yy634);
    } else {
      yypParser.yystack[yypParser.yytos+ -4].minor.yy634.x.pList = yypParser.yystack[yypParser.yytos+ -2].minor.yy614;
    }
    sqlite3ExprSetHeightAndFlags(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy634);
  }else{
    sqlite3ExprListDelete(pParse.db, yypParser.yystack[yypParser.yytos+ -2].minor.yy614);
    sqlite3ExprDelete(pParse.db, yypParser.yystack[yypParser.yytos+ -1].minor.yy634);
  }
}
//line 5054 "parse.go"
        break
      case 224: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
//line 1403 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -4].minor.yy614 = sqlite3ExprListAppend(pParse,yypParser.yystack[yypParser.yytos+ -4].minor.yy614, yypParser.yystack[yypParser.yytos+ -2].minor.yy634);
  yypParser.yystack[yypParser.yytos+ -4].minor.yy614 = sqlite3ExprListAppend(pParse,yypParser.yystack[yypParser.yytos+ -4].minor.yy614, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
}
//line 5062 "parse.go"
        break
      case 225: /* case_exprlist ::= WHEN expr THEN expr */
//line 1407 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -3].minor.yy614 = sqlite3ExprListAppend(pParse,0, yypParser.yystack[yypParser.yytos+ -2].minor.yy634);
  yypParser.yystack[yypParser.yytos+ -3].minor.yy614 = sqlite3ExprListAppend(pParse,yypParser.yystack[yypParser.yytos+ -3].minor.yy614, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
}
//line 5070 "parse.go"
        break
      case 228: /* case_operand ::= expr */
//line 1417 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy634 = yypParser.yystack[yypParser.yytos+ 0].minor.yy634; /*A-overwrites-X*/}
//line 5075 "parse.go"
        break
      case 231: /* nexprlist ::= nexprlist COMMA expr */
//line 1428 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy614 = sqlite3ExprListAppend(pParse,yypParser.yystack[yypParser.yytos+ -2].minor.yy614,yypParser.yystack[yypParser.yytos+ 0].minor.yy634);}
//line 5080 "parse.go"
        break
      case 232: /* nexprlist ::= expr */
//line 1430 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy614 = sqlite3ExprListAppend(pParse,0,yypParser.yystack[yypParser.yytos+ 0].minor.yy634); /*A-overwrites-Y*/}
//line 5085 "parse.go"
        break
      case 234: /* paren_exprlist ::= LP exprlist RP */
        fallthrough
      case 239: /* eidlist_opt ::= LP eidlist RP */ yytestcase(yyruleno==239);
//line 1438 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy614 = yypParser.yystack[yypParser.yytos+ -1].minor.yy614;}
//line 5092 "parse.go"
        break
      case 235: /* cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt */
//line 1445 "parse.y"
{
  sqlite3CreateIndex(pParse, &yypParser.yystack[yypParser.yytos+ -7].minor.yy0, &yypParser.yystack[yypParser.yytos+ -6].minor.yy0, 
                     sqlite3SrcListAppend(pParse,0,&yypParser.yystack[yypParser.yytos+ -4].minor.yy0,0), yypParser.yystack[yypParser.yytos+ -2].minor.yy614, yypParser.yystack[yypParser.yytos+ -10].minor.yy394,
                      &yypParser.yystack[yypParser.yytos+ -11].minor.yy0, yypParser.yystack[yypParser.yytos+ 0].minor.yy634, SQLITE_SO_ASC, yypParser.yystack[yypParser.yytos+ -8].minor.yy394, SQLITE_IDXTYPE_APPDEF);
  if( IN_RENAME_OBJECT && pParse.pNewIndex ){
    sqlite3RenameTokenMap(pParse, pParse.pNewIndex.zName, &yypParser.yystack[yypParser.yytos+ -4].minor.yy0);
  }
}
//line 5104 "parse.go"
        break
      case 236: /* uniqueflag ::= UNIQUE */
        fallthrough
      case 278: /* raisetype ::= ABORT */ yytestcase(yyruleno==278);
//line 1455 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = OE_Abort;}
//line 5111 "parse.go"
        break
      case 237: /* uniqueflag ::= */
//line 1456 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy394 = OE_None;}
//line 5116 "parse.go"
        break
      case 240: /* eidlist ::= eidlist COMMA nm collate sortorder */
//line 1506 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -4].minor.yy614 = parserAddExprIdListTerm(pParse, yypParser.yystack[yypParser.yytos+ -4].minor.yy614, &yypParser.yystack[yypParser.yytos+ -2].minor.yy0, yypParser.yystack[yypParser.yytos+ -1].minor.yy394, yypParser.yystack[yypParser.yytos+ 0].minor.yy394);
}
//line 5123 "parse.go"
        break
      case 241: /* eidlist ::= nm collate sortorder */
//line 1509 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -2].minor.yy614 = parserAddExprIdListTerm(pParse, 0, &yypParser.yystack[yypParser.yytos+ -2].minor.yy0, yypParser.yystack[yypParser.yytos+ -1].minor.yy394, yypParser.yystack[yypParser.yytos+ 0].minor.yy394); /*A-overwrites-Y*/
}
//line 5130 "parse.go"
        break
      case 244: /* cmd ::= DROP INDEX ifexists fullname */
//line 1520 "parse.y"
{sqlite3DropIndex(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy157, yypParser.yystack[yypParser.yytos+ -1].minor.yy394);}
//line 5135 "parse.go"
        break
      case 245: /* cmd ::= VACUUM vinto */
//line 1527 "parse.y"
{sqlite3Vacuum(pParse,0,yypParser.yystack[yypParser.yytos+ 0].minor.yy634);}
//line 5140 "parse.go"
        break
      case 246: /* cmd ::= VACUUM nm vinto */
//line 1528 "parse.y"
{sqlite3Vacuum(pParse,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,yypParser.yystack[yypParser.yytos+ 0].minor.yy634);}
//line 5145 "parse.go"
        break
      case 249: /* cmd ::= PRAGMA nm dbnm */
//line 1536 "parse.y"
{sqlite3Pragma(pParse,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0,0,0);}
//line 5150 "parse.go"
        break
      case 250: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
//line 1537 "parse.y"
{sqlite3Pragma(pParse,&yypParser.yystack[yypParser.yytos+ -3].minor.yy0,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0,0);}
//line 5155 "parse.go"
        break
      case 251: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
//line 1538 "parse.y"
{sqlite3Pragma(pParse,&yypParser.yystack[yypParser.yytos+ -4].minor.yy0,&yypParser.yystack[yypParser.yytos+ -3].minor.yy0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,0);}
//line 5160 "parse.go"
        break
      case 252: /* cmd ::= PRAGMA nm dbnm EQ minus_num */
//line 1540 "parse.y"
{sqlite3Pragma(pParse,&yypParser.yystack[yypParser.yytos+ -3].minor.yy0,&yypParser.yystack[yypParser.yytos+ -2].minor.yy0,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0,1);}
//line 5165 "parse.go"
        break
      case 253: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */
//line 1542 "parse.y"
{sqlite3Pragma(pParse,&yypParser.yystack[yypParser.yytos+ -4].minor.yy0,&yypParser.yystack[yypParser.yytos+ -3].minor.yy0,&yypParser.yystack[yypParser.yytos+ -1].minor.yy0,1);}
//line 5170 "parse.go"
        break
      case 256: /* cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END */
//line 1558 "parse.y"
{
  var all Token;
  all.z = yypParser.yystack[yypParser.yytos+ -3].minor.yy0.z;
  all.n = int((yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z - yypParser.yystack[yypParser.yytos+ -3].minor.yy0.z) + yypParser.yystack[yypParser.yytos+ 0].minor.yy0.n);
  sqlite3FinishTrigger(pParse, yypParser.yystack[yypParser.yytos+ -1].minor.yy429, &all);
}
//line 5180 "parse.go"
        break
      case 257: /* trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause */
//line 1567 "parse.y"
{
  sqlite3BeginTrigger(pParse, &yypParser.yystack[yypParser.yytos+ -7].minor.yy0, &yypParser.yystack[yypParser.yytos+ -6].minor.yy0, yypParser.yystack[yypParser.yytos+ -5].minor.yy394, yypParser.yystack[yypParser.yytos+ -4].minor.yy121.a, yypParser.yystack[yypParser.yytos+ -4].minor.yy121.b, yypParser.yystack[yypParser.yytos+ -2].minor.yy157, yypParser.yystack[yypParser.yytos+ 0].minor.yy634, yypParser.yystack[yypParser.yytos+ -10].minor.yy394, yypParser.yystack[yypParser.yytos+ -8].minor.yy394);
  if (yypParser.yystack[yypParser.yytos+ -6].minor.yy0.n==0) {
    yypParser.yystack[yypParser.yytos+ -10].minor.yy0 = yypParser.yystack[yypParser.yytos+ -7].minor.yy0;
  } else {
    yypParser.yystack[yypParser.yytos+ -10].minor.yy0 = yypParser.yystack[yypParser.yytos+ -6].minor.yy0;
  } /*A-overwrites-T*/
}
//line 5192 "parse.go"
        break
      case 258: /* trigger_time ::= BEFORE|AFTER */
//line 1577 "parse.y"
{ yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = yypParser.yystack[yypParser.yytos+ 0].major; /*A-overwrites-X*/ }
//line 5197 "parse.go"
        break
      case 259: /* trigger_time ::= INSTEAD OF */
//line 1578 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -1].minor.yy394 = TK_INSTEAD;}
//line 5202 "parse.go"
        break
      case 260: /* trigger_time ::= */
//line 1579 "parse.y"
{ yypParser.yystack[yypParser.yytos+ 1].minor.yy394 = TK_BEFORE; }
//line 5207 "parse.go"
        break
      case 261: /* trigger_event ::= DELETE|INSERT */
        fallthrough
      case 262: /* trigger_event ::= UPDATE */ yytestcase(yyruleno==262);
//line 1583 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy121.a = yypParser.yystack[yypParser.yytos+ 0].major; /*A-overwrites-X*/ yypParser.yystack[yypParser.yytos+ 0].minor.yy121.b = 0;}
//line 5214 "parse.go"
        break
      case 263: /* trigger_event ::= UPDATE OF idlist */
//line 1585 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy121.a = TK_UPDATE; yypParser.yystack[yypParser.yytos+ -2].minor.yy121.b = yypParser.yystack[yypParser.yytos+ 0].minor.yy106;}
//line 5219 "parse.go"
        break
      case 264: /* when_clause ::= */
        fallthrough
      case 283: /* key_opt ::= */ yytestcase(yyruleno==283);
//line 1592 "parse.y"
{ yypParser.yystack[yypParser.yytos+ 1].minor.yy634 = 0; }
//line 5226 "parse.go"
        break
      case 265: /* when_clause ::= WHEN expr */
        fallthrough
      case 284: /* key_opt ::= KEY expr */ yytestcase(yyruleno==284);
//line 1593 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -1].minor.yy634 = yypParser.yystack[yypParser.yytos+ 0].minor.yy634; }
//line 5233 "parse.go"
        break
      case 266: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
//line 1597 "parse.y"
{
  assert( yypParser.yystack[yypParser.yytos+ -2].minor.yy429!=0, "yypParser.yystack[yypParser.yytos+ -2].minor.yy429!=0");
  yypParser.yystack[yypParser.yytos+ -2].minor.yy429.pLast.pNext = yypParser.yystack[yypParser.yytos+ -1].minor.yy429;
  yypParser.yystack[yypParser.yytos+ -2].minor.yy429.pLast = yypParser.yystack[yypParser.yytos+ -1].minor.yy429;
}
//line 5242 "parse.go"
        break
      case 267: /* trigger_cmd_list ::= trigger_cmd SEMI */
//line 1602 "parse.y"
{ 
  assert( yypParser.yystack[yypParser.yytos+ -1].minor.yy429!=0, "yypParser.yystack[yypParser.yytos+ -1].minor.yy429!=0");
  yypParser.yystack[yypParser.yytos+ -1].minor.yy429.pLast = yypParser.yystack[yypParser.yytos+ -1].minor.yy429;
}
//line 5250 "parse.go"
        break
      case 268: /* trnm ::= nm DOT nm */
//line 1613 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -2].minor.yy0 = yypParser.yystack[yypParser.yytos+ 0].minor.yy0;
  sqlite3ErrorMsg(pParse, 
        "qualified table names are not allowed on INSERT, UPDATE, and DELETE " +
        "statements within triggers");
}
//line 5260 "parse.go"
        break
      case 269: /* tridxby ::= INDEXED BY nm */
//line 1625 "parse.y"
{
  sqlite3ErrorMsg(pParse,
        "the INDEXED BY clause is not allowed on UPDATE or DELETE statements " +
        "within triggers");
}
//line 5269 "parse.go"
        break
      case 270: /* tridxby ::= NOT INDEXED */
//line 1630 "parse.y"
{
  sqlite3ErrorMsg(pParse,
        "the NOT INDEXED clause is not allowed on UPDATE or DELETE statements " +
        "within triggers");
}
//line 5278 "parse.go"
        break
      case 271: /* trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt */
//line 1643 "parse.y"
{yylhsminor.yy429 = sqlite3TriggerUpdateStep(pParse, &yypParser.yystack[yypParser.yytos+ -6].minor.yy0, yypParser.yystack[yypParser.yytos+ -2].minor.yy157, yypParser.yystack[yypParser.yytos+ -3].minor.yy614, yypParser.yystack[yypParser.yytos+ -1].minor.yy634, yypParser.yystack[yypParser.yytos+ -7].minor.yy394, yypParser.yystack[yypParser.yytos+ -8].minor.yy0.z, yypParser.yystack[yypParser.yytos+ 0].minor.yy79);}
//line 5283 "parse.go"
  yypParser.yystack[yypParser.yytos+ -8].minor.yy429 = yylhsminor.yy429;
        break
      case 272: /* trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt */
//line 1647 "parse.y"
{
   yylhsminor.yy429 = sqlite3TriggerInsertStep(pParse,&yypParser.yystack[yypParser.yytos+ -4].minor.yy0,yypParser.yystack[yypParser.yytos+ -3].minor.yy106,yypParser.yystack[yypParser.yytos+ -2].minor.yy361,yypParser.yystack[yypParser.yytos+ -6].minor.yy394,yypParser.yystack[yypParser.yytos+ -1].minor.yy442,yypParser.yystack[yypParser.yytos+ -7].minor.yy79,yypParser.yystack[yypParser.yytos+ 0].minor.yy79);/*yylhsminor.yy429-overwrites-yypParser.yystack[yypParser.yytos+ -6].minor.yy394*/
}
//line 5291 "parse.go"
  yypParser.yystack[yypParser.yytos+ -7].minor.yy429 = yylhsminor.yy429;
        break
      case 273: /* trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt */
//line 1652 "parse.y"
{yylhsminor.yy429 = sqlite3TriggerDeleteStep(pParse, &yypParser.yystack[yypParser.yytos+ -3].minor.yy0, yypParser.yystack[yypParser.yytos+ -1].minor.yy634, yypParser.yystack[yypParser.yytos+ -5].minor.yy0.z, yypParser.yystack[yypParser.yytos+ 0].minor.yy79);}
//line 5297 "parse.go"
  yypParser.yystack[yypParser.yytos+ -5].minor.yy429 = yylhsminor.yy429;
        break
      case 274: /* trigger_cmd ::= scanpt select scanpt */
//line 1656 "parse.y"
{yylhsminor.yy429 = sqlite3TriggerSelectStep(pParse.db, yypParser.yystack[yypParser.yytos+ -1].minor.yy361, yypParser.yystack[yypParser.yytos+ -2].minor.yy79, yypParser.yystack[yypParser.yytos+ 0].minor.yy79); /*yylhsminor.yy429-overwrites-yypParser.yystack[yypParser.yytos+ -1].minor.yy361*/}
//line 5303 "parse.go"
  yypParser.yystack[yypParser.yytos+ -2].minor.yy429 = yylhsminor.yy429;
        break
      case 275: /* expr ::= RAISE LP IGNORE RP */
//line 1659 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -3].minor.yy634 = sqlite3PExpr(pParse, TK_RAISE, 0, 0); 
  if( yypParser.yystack[yypParser.yytos+ -3].minor.yy634 ){
    yypParser.yystack[yypParser.yytos+ -3].minor.yy634.affExpr = OE_Ignore;
  }
}
//line 5314 "parse.go"
        break
      case 276: /* expr ::= RAISE LP raisetype COMMA nm RP */
//line 1665 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -5].minor.yy634 = sqlite3ExprAlloc(pParse.db, TK_RAISE, &yypParser.yystack[yypParser.yytos+ -1].minor.yy0, 1);
  if( yypParser.yystack[yypParser.yytos+ -5].minor.yy634 ) {
    yypParser.yystack[yypParser.yytos+ -5].minor.yy634.affExpr = rune(yypParser.yystack[yypParser.yytos+ -3].minor.yy394);
  }
}
//line 5324 "parse.go"
        break
      case 277: /* raisetype ::= ROLLBACK */
//line 1674 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = OE_Rollback;}
//line 5329 "parse.go"
        break
      case 279: /* raisetype ::= FAIL */
//line 1676 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = OE_Fail;}
//line 5334 "parse.go"
        break
      case 280: /* cmd ::= DROP TRIGGER ifexists fullname */
//line 1681 "parse.y"
{
  sqlite3DropTrigger(pParse,yypParser.yystack[yypParser.yytos+ 0].minor.yy157,yypParser.yystack[yypParser.yytos+ -1].minor.yy394);
}
//line 5341 "parse.go"
        break
      case 281: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
//line 1688 "parse.y"
{
  sqlite3Attach(pParse, yypParser.yystack[yypParser.yytos+ -3].minor.yy634, yypParser.yystack[yypParser.yytos+ -1].minor.yy634, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
}
//line 5348 "parse.go"
        break
      case 282: /* cmd ::= DETACH database_kw_opt expr */
//line 1691 "parse.y"
{
  sqlite3Detach(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
}
//line 5355 "parse.go"
        break
      case 285: /* cmd ::= REINDEX */
//line 1706 "parse.y"
{sqlite3Reindex(pParse, 0, 0);}
//line 5360 "parse.go"
        break
      case 286: /* cmd ::= REINDEX nm dbnm */
//line 1707 "parse.y"
{sqlite3Reindex(pParse, &yypParser.yystack[yypParser.yytos+ -1].minor.yy0, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);}
//line 5365 "parse.go"
        break
      case 287: /* cmd ::= ANALYZE */
//line 1712 "parse.y"
{sqlite3Analyze(pParse, 0, 0);}
//line 5370 "parse.go"
        break
      case 288: /* cmd ::= ANALYZE nm dbnm */
//line 1713 "parse.y"
{sqlite3Analyze(pParse, &yypParser.yystack[yypParser.yytos+ -1].minor.yy0, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);}
//line 5375 "parse.go"
        break
      case 289: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
//line 1719 "parse.y"
{
  sqlite3AlterRenameTable(pParse,yypParser.yystack[yypParser.yytos+ -3].minor.yy157,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
}
//line 5382 "parse.go"
        break
      case 290: /* cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist */
//line 1723 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -1].minor.yy0.n = (int)(pParse.sLastToken.z-yypParser.yystack[yypParser.yytos+ -1].minor.yy0.z) + pParse.sLastToken.n;
  sqlite3AlterFinishAddColumn(pParse, &yypParser.yystack[yypParser.yytos+ -1].minor.yy0);
}
//line 5390 "parse.go"
        break
      case 291: /* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm */
//line 1727 "parse.y"
{
  sqlite3AlterDropColumn(pParse, yypParser.yystack[yypParser.yytos+ -3].minor.yy157, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
}
//line 5397 "parse.go"
        break
      case 292: /* add_column_fullname ::= fullname */
//line 1731 "parse.y"
{
  disableLookaside(pParse);
  sqlite3AlterBeginAddColumn(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy157);
}
//line 5405 "parse.go"
        break
      case 293: /* cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm */
//line 1735 "parse.y"
{
  sqlite3AlterRenameColumn(pParse, yypParser.yystack[yypParser.yytos+ -5].minor.yy157, &yypParser.yystack[yypParser.yytos+ -2].minor.yy0, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0);
}
//line 5412 "parse.go"
        break
      case 294: /* cmd ::= create_vtab */
//line 1747 "parse.y"
{sqlite3VtabFinishParse(pParse,0);}
//line 5417 "parse.go"
        break
      case 295: /* cmd ::= create_vtab LP vtabarglist RP */
//line 1748 "parse.y"
{sqlite3VtabFinishParse(pParse,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0);}
//line 5422 "parse.go"
        break
      case 296: /* create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm */
//line 1750 "parse.y"
{
    sqlite3VtabBeginParse(pParse, &yypParser.yystack[yypParser.yytos+ -3].minor.yy0, &yypParser.yystack[yypParser.yytos+ -2].minor.yy0, &yypParser.yystack[yypParser.yytos+ 0].minor.yy0, yypParser.yystack[yypParser.yytos+ -4].minor.yy394);
}
//line 5429 "parse.go"
        break
      case 297: /* vtabarg ::= */
//line 1755 "parse.y"
{sqlite3VtabArgInit(pParse);}
//line 5434 "parse.go"
        break
      case 298: /* vtabargtoken ::= ANY */
        fallthrough
      case 299: /* vtabargtoken ::= lp anylist RP */ yytestcase(yyruleno==299);
        fallthrough
      case 300: /* lp ::= LP */ yytestcase(yyruleno==300);
//line 1757 "parse.y"
{sqlite3VtabArgExtend(pParse,&yypParser.yystack[yypParser.yytos+ 0].minor.yy0);}
//line 5443 "parse.go"
        break
      case 301: /* with ::= WITH wqlist */
        fallthrough
      case 302: /* with ::= WITH RECURSIVE wqlist */ yytestcase(yyruleno==302);
//line 1774 "parse.y"
{ sqlite3WithPush(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy357, 1); }
//line 5450 "parse.go"
        break
      case 303: /* wqas ::= AS */
//line 1778 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy109 = M10d_Any;}
//line 5455 "parse.go"
        break
      case 304: /* wqas ::= AS MATERIALIZED */
//line 1779 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy109 = M10d_Yes;}
//line 5460 "parse.go"
        break
      case 305: /* wqas ::= AS NOT MATERIALIZED */
//line 1780 "parse.y"
{yypParser.yystack[yypParser.yytos+ -2].minor.yy109 = M10d_No;}
//line 5465 "parse.go"
        break
      case 306: /* wqitem ::= nm eidlist_opt wqas LP select RP */
//line 1781 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -5].minor.yy297 = sqlite3CteNew(pParse, &yypParser.yystack[yypParser.yytos+ -5].minor.yy0, yypParser.yystack[yypParser.yytos+ -4].minor.yy614, yypParser.yystack[yypParser.yytos+ -1].minor.yy361, yypParser.yystack[yypParser.yytos+ -3].minor.yy109); /*A-overwrites-X*/
}
//line 5472 "parse.go"
        break
      case 307: /* wqlist ::= wqitem */
//line 1784 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ 0].minor.yy357 = sqlite3WithAdd(pParse, 0, yypParser.yystack[yypParser.yytos+ 0].minor.yy297); /*A-overwrites-X*/
}
//line 5479 "parse.go"
        break
      case 308: /* wqlist ::= wqlist COMMA wqitem */
//line 1787 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -2].minor.yy357 = sqlite3WithAdd(pParse, yypParser.yystack[yypParser.yytos+ -2].minor.yy357, yypParser.yystack[yypParser.yytos+ 0].minor.yy297);
}
//line 5486 "parse.go"
        break
      case 309: /* windowdefn_list ::= windowdefn */
//line 1801 "parse.y"
{ yylhsminor.yy179 = yypParser.yystack[yypParser.yytos+ 0].minor.yy179; }
//line 5491 "parse.go"
  yypParser.yystack[yypParser.yytos+ 0].minor.yy179 = yylhsminor.yy179;
        break
      case 310: /* windowdefn_list ::= windowdefn_list COMMA windowdefn */
//line 1802 "parse.y"
{
  assert( yypParser.yystack[yypParser.yytos+ 0].minor.yy179!=0, "yypParser.yystack[yypParser.yytos+ 0].minor.yy179!=0");
  sqlite3WindowChain(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy179, yypParser.yystack[yypParser.yytos+ -2].minor.yy179);
  yypParser.yystack[yypParser.yytos+ 0].minor.yy179.pNextWin = yypParser.yystack[yypParser.yytos+ -2].minor.yy179;
  yylhsminor.yy179 = yypParser.yystack[yypParser.yytos+ 0].minor.yy179;
}
//line 5502 "parse.go"
  yypParser.yystack[yypParser.yytos+ -2].minor.yy179 = yylhsminor.yy179;
        break
      case 311: /* windowdefn ::= nm AS LP window RP */
//line 1811 "parse.y"
{
  if( ALWAYS(yypParser.yystack[yypParser.yytos+ -1].minor.yy179) ){
    yypParser.yystack[yypParser.yytos+ -1].minor.yy179.zName = sqlite3DbStrNDup(pParse.db, yypParser.yystack[yypParser.yytos+ -4].minor.yy0.z, yypParser.yystack[yypParser.yytos+ -4].minor.yy0.n);
  }
  yylhsminor.yy179 = yypParser.yystack[yypParser.yytos+ -1].minor.yy179;
}
//line 5513 "parse.go"
  yypParser.yystack[yypParser.yytos+ -4].minor.yy179 = yylhsminor.yy179;
        break
      case 312: /* window ::= PARTITION BY nexprlist orderby_opt frame_opt */
//line 1845 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -4].minor.yy179 = sqlite3WindowAssemble(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy179, yypParser.yystack[yypParser.yytos+ -2].minor.yy614, yypParser.yystack[yypParser.yytos+ -1].minor.yy614, 0);
}
//line 5521 "parse.go"
        break
      case 313: /* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt */
//line 1848 "parse.y"
{
  yylhsminor.yy179 = sqlite3WindowAssemble(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy179, yypParser.yystack[yypParser.yytos+ -2].minor.yy614, yypParser.yystack[yypParser.yytos+ -1].minor.yy614, &yypParser.yystack[yypParser.yytos+ -5].minor.yy0);
}
//line 5528 "parse.go"
  yypParser.yystack[yypParser.yytos+ -5].minor.yy179 = yylhsminor.yy179;
        break
      case 314: /* window ::= ORDER BY sortlist frame_opt */
//line 1851 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -3].minor.yy179 = sqlite3WindowAssemble(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy179, 0, yypParser.yystack[yypParser.yytos+ -1].minor.yy614, 0);
}
//line 5536 "parse.go"
        break
      case 315: /* window ::= nm ORDER BY sortlist frame_opt */
//line 1854 "parse.y"
{
  yylhsminor.yy179 = sqlite3WindowAssemble(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy179, 0, yypParser.yystack[yypParser.yytos+ -1].minor.yy614, &yypParser.yystack[yypParser.yytos+ -4].minor.yy0);
}
//line 5543 "parse.go"
  yypParser.yystack[yypParser.yytos+ -4].minor.yy179 = yylhsminor.yy179;
        break
      case 316: /* window ::= frame_opt */
        fallthrough
      case 335: /* filter_over ::= over_clause */ yytestcase(yyruleno==335);
//line 1857 "parse.y"
{
  yylhsminor.yy179 = yypParser.yystack[yypParser.yytos+ 0].minor.yy179;
}
//line 5553 "parse.go"
  yypParser.yystack[yypParser.yytos+ 0].minor.yy179 = yylhsminor.yy179;
        break
      case 317: /* window ::= nm frame_opt */
//line 1860 "parse.y"
{
  yylhsminor.yy179 = sqlite3WindowAssemble(pParse, yypParser.yystack[yypParser.yytos+ 0].minor.yy179, 0, 0, &yypParser.yystack[yypParser.yytos+ -1].minor.yy0);
}
//line 5561 "parse.go"
  yypParser.yystack[yypParser.yytos+ -1].minor.yy179 = yylhsminor.yy179;
        break
      case 318: /* frame_opt ::= */
//line 1864 "parse.y"
{ 
  yypParser.yystack[yypParser.yytos+ 1].minor.yy179 = sqlite3WindowAlloc(pParse, 0, TK_UNBOUNDED, 0, TK_CURRENT, 0, 0);
}
//line 5569 "parse.go"
        break
      case 319: /* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt */
//line 1867 "parse.y"
{ 
  yylhsminor.yy179 = sqlite3WindowAlloc(pParse, yypParser.yystack[yypParser.yytos+ -2].minor.yy394, yypParser.yystack[yypParser.yytos+ -1].minor.yy600.eType, yypParser.yystack[yypParser.yytos+ -1].minor.yy600.pExpr, TK_CURRENT, 0, yypParser.yystack[yypParser.yytos+ 0].minor.yy109);
}
//line 5576 "parse.go"
  yypParser.yystack[yypParser.yytos+ -2].minor.yy179 = yylhsminor.yy179;
        break
      case 320: /* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt */
//line 1871 "parse.y"
{ 
  yylhsminor.yy179 = sqlite3WindowAlloc(pParse, yypParser.yystack[yypParser.yytos+ -5].minor.yy394, yypParser.yystack[yypParser.yytos+ -3].minor.yy600.eType, yypParser.yystack[yypParser.yytos+ -3].minor.yy600.pExpr, yypParser.yystack[yypParser.yytos+ -1].minor.yy600.eType, yypParser.yystack[yypParser.yytos+ -1].minor.yy600.pExpr, yypParser.yystack[yypParser.yytos+ 0].minor.yy109);
}
//line 5584 "parse.go"
  yypParser.yystack[yypParser.yytos+ -5].minor.yy179 = yylhsminor.yy179;
        break
      case 321: /* range_or_rows ::= RANGE|ROWS|GROUPS */
//line 1875 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy394 = yypParser.yystack[yypParser.yytos+ 0].major; /*A-overwrites-X*/}
//line 5590 "parse.go"
        break
      case 322: /* frame_bound_s ::= frame_bound */
        fallthrough
      case 324: /* frame_bound_e ::= frame_bound */ yytestcase(yyruleno==324);
//line 1877 "parse.y"
{yylhsminor.yy600 = yypParser.yystack[yypParser.yytos+ 0].minor.yy600;}
//line 5597 "parse.go"
  yypParser.yystack[yypParser.yytos+ 0].minor.yy600 = yylhsminor.yy600;
        break
      case 323: /* frame_bound_s ::= UNBOUNDED PRECEDING */
        fallthrough
      case 325: /* frame_bound_e ::= UNBOUNDED FOLLOWING */ yytestcase(yyruleno==325);
        fallthrough
      case 327: /* frame_bound ::= CURRENT ROW */ yytestcase(yyruleno==327);
//line 1878 "parse.y"
{yylhsminor.yy600.eType = yypParser.yystack[yypParser.yytos+ -1].major; yylhsminor.yy600.pExpr = 0;}
//line 5607 "parse.go"
  yypParser.yystack[yypParser.yytos+ -1].minor.yy600 = yylhsminor.yy600;
        break
      case 326: /* frame_bound ::= expr PRECEDING|FOLLOWING */
//line 1883 "parse.y"
{yylhsminor.yy600.eType = yypParser.yystack[yypParser.yytos+ 0].major; yylhsminor.yy600.pExpr = yypParser.yystack[yypParser.yytos+ -1].minor.yy634;}
//line 5613 "parse.go"
  yypParser.yystack[yypParser.yytos+ -1].minor.yy600 = yylhsminor.yy600;
        break
      case 328: /* frame_exclude_opt ::= */
//line 1887 "parse.y"
{yypParser.yystack[yypParser.yytos+ 1].minor.yy109 = 0;}
//line 5619 "parse.go"
        break
      case 329: /* frame_exclude_opt ::= EXCLUDE frame_exclude */
//line 1888 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy109 = yypParser.yystack[yypParser.yytos+ 0].minor.yy109;}
//line 5624 "parse.go"
        break
      case 330: /* frame_exclude ::= NO OTHERS */
        fallthrough
      case 331: /* frame_exclude ::= CURRENT ROW */ yytestcase(yyruleno==331);
//line 1891 "parse.y"
{yypParser.yystack[yypParser.yytos+ -1].minor.yy109 = yypParser.yystack[yypParser.yytos+ -1].major; /*A-overwrites-X*/}
//line 5631 "parse.go"
        break
      case 332: /* frame_exclude ::= GROUP|TIES */
//line 1893 "parse.y"
{yypParser.yystack[yypParser.yytos+ 0].minor.yy109 = yypParser.yystack[yypParser.yytos+ 0].major; /*A-overwrites-X*/}
//line 5636 "parse.go"
        break
      case 333: /* window_clause ::= WINDOW windowdefn_list */
//line 1898 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -1].minor.yy179 = yypParser.yystack[yypParser.yytos+ 0].minor.yy179; }
//line 5641 "parse.go"
        break
      case 334: /* filter_over ::= filter_clause over_clause */
//line 1900 "parse.y"
{
  if( yypParser.yystack[yypParser.yytos+ 0].minor.yy179 ){
    yypParser.yystack[yypParser.yytos+ 0].minor.yy179.pFilter = yypParser.yystack[yypParser.yytos+ -1].minor.yy634;
  }else{
    sqlite3ExprDelete(pParse.db, yypParser.yystack[yypParser.yytos+ -1].minor.yy634);
  }
  yylhsminor.yy179 = yypParser.yystack[yypParser.yytos+ 0].minor.yy179;
}
//line 5653 "parse.go"
  yypParser.yystack[yypParser.yytos+ -1].minor.yy179 = yylhsminor.yy179;
        break
      case 336: /* filter_over ::= filter_clause */
//line 1911 "parse.y"
{
  yylhsminor.yy179 = sqlite3DbMallocZero(pParse.db, sizeof(Window)).(*Window);
  if( yylhsminor.yy179 ){
    yylhsminor.yy179.eFrmType = TK_FILTER;
    yylhsminor.yy179.pFilter = yypParser.yystack[yypParser.yytos+ 0].minor.yy634;
  }else{
    sqlite3ExprDelete(pParse.db, yypParser.yystack[yypParser.yytos+ 0].minor.yy634);
  }
}
//line 5667 "parse.go"
  yypParser.yystack[yypParser.yytos+ 0].minor.yy179 = yylhsminor.yy179;
        break
      case 337: /* over_clause ::= OVER LP window RP */
//line 1921 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -3].minor.yy179 = yypParser.yystack[yypParser.yytos+ -1].minor.yy179;
  assert( yypParser.yystack[yypParser.yytos+ -3].minor.yy179!=0, "yypParser.yystack[yypParser.yytos+ -3].minor.yy179!=0");
}
//line 5676 "parse.go"
        break
      case 338: /* over_clause ::= OVER nm */
//line 1925 "parse.y"
{
  yypParser.yystack[yypParser.yytos+ -1].minor.yy179 = sqlite3DbMallocZero(pParse.db, sizeof(Window)).(*Window);
  if( yypParser.yystack[yypParser.yytos+ -1].minor.yy179 ){
    yypParser.yystack[yypParser.yytos+ -1].minor.yy179.zName = sqlite3DbStrNDup(pParse.db, yypParser.yystack[yypParser.yytos+ 0].minor.yy0.z, yypParser.yystack[yypParser.yytos+ 0].minor.yy0.n);
  }
}
//line 5686 "parse.go"
        break
      case 339: /* filter_clause ::= FILTER LP WHERE expr RP */
//line 1932 "parse.y"
{ yypParser.yystack[yypParser.yytos+ -4].minor.yy634 = yypParser.yystack[yypParser.yytos+ -1].minor.yy634; }
//line 5691 "parse.go"
        break
	default:
		/* (340) input ::= cmdlist */ yytestcase(yyruleno == 340)
		/* (341) cmdlist ::= cmdlist ecmd */ yytestcase(yyruleno == 341)
		/* (342) cmdlist ::= ecmd (OPTIMIZED OUT) */ assert(yyruleno!=342, "yyruleno!=342")
		/* (343) ecmd ::= SEMI */ yytestcase(yyruleno == 343)
		/* (344) ecmd ::= cmdx SEMI */ yytestcase(yyruleno == 344)
		/* (345) ecmd ::= explain cmdx SEMI (NEVER REDUCES) */ assert(yyruleno!=345)
		/* (346) trans_opt ::= */ yytestcase(yyruleno == 346)
		/* (347) trans_opt ::= TRANSACTION */ yytestcase(yyruleno == 347)
		/* (348) trans_opt ::= TRANSACTION nm */ yytestcase(yyruleno == 348)
		/* (349) savepoint_opt ::= SAVEPOINT */ yytestcase(yyruleno == 349)
		/* (350) savepoint_opt ::= */ yytestcase(yyruleno == 350)
		/* (351) cmd ::= create_table create_table_args */ yytestcase(yyruleno == 351)
		/* (352) table_option_set ::= table_option (OPTIMIZED OUT) */ assert(yyruleno!=352, "yyruleno!=352")
		/* (353) columnlist ::= columnlist COMMA columnname carglist */ yytestcase(yyruleno == 353)
		/* (354) columnlist ::= columnname carglist */ yytestcase(yyruleno == 354)
		/* (355) nm ::= ID|INDEXED */ yytestcase(yyruleno == 355)
		/* (356) nm ::= STRING */ yytestcase(yyruleno == 356)
		/* (357) nm ::= JOIN_KW */ yytestcase(yyruleno == 357)
		/* (358) typetoken ::= typename */ yytestcase(yyruleno == 358)
		/* (359) typename ::= ID|STRING */ yytestcase(yyruleno == 359)
		/* (360) signed ::= plus_num (OPTIMIZED OUT) */ assert(yyruleno!=360, "yyruleno!=360")
		/* (361) signed ::= minus_num (OPTIMIZED OUT) */ assert(yyruleno!=361, "yyruleno!=361")
		/* (362) carglist ::= carglist ccons */ yytestcase(yyruleno == 362)
		/* (363) carglist ::= */ yytestcase(yyruleno == 363)
		/* (364) ccons ::= NULL onconf */ yytestcase(yyruleno == 364)
		/* (365) ccons ::= GENERATED ALWAYS AS generated */ yytestcase(yyruleno == 365)
		/* (366) ccons ::= AS generated */ yytestcase(yyruleno == 366)
		/* (367) conslist_opt ::= COMMA conslist */ yytestcase(yyruleno == 367)
		/* (368) conslist ::= conslist tconscomma tcons */ yytestcase(yyruleno == 368)
		/* (369) conslist ::= tcons (OPTIMIZED OUT) */ assert(yyruleno!=369, "yyruleno!=369")
		/* (370) tconscomma ::= */ yytestcase(yyruleno == 370)
		/* (371) defer_subclause_opt ::= defer_subclause (OPTIMIZED OUT) */ assert(yyruleno!=371, "yyruleno!=371")
		/* (372) resolvetype ::= raisetype (OPTIMIZED OUT) */ assert(yyruleno!=372, "yyruleno!=372")
		/* (373) selectnowith ::= oneselect (OPTIMIZED OUT) */ assert(yyruleno!=373, "yyruleno!=373")
		/* (374) oneselect ::= values */ yytestcase(yyruleno == 374)
		/* (375) sclp ::= selcollist COMMA */ yytestcase(yyruleno == 375)
		/* (376) as ::= ID|STRING */ yytestcase(yyruleno == 376)
		/* (377) indexed_opt ::= indexed_by (OPTIMIZED OUT) */ assert(yyruleno!=377, "yyruleno!=377")
		/* (378) returning ::= */ yytestcase(yyruleno == 378)
		/* (379) expr ::= term (OPTIMIZED OUT) */ assert(yyruleno!=379, "yyruleno!=379")
		/* (380) likeop ::= LIKE_KW|MATCH */ yytestcase(yyruleno == 380)
		/* (381) exprlist ::= nexprlist */ yytestcase(yyruleno == 381)
		/* (382) nmnum ::= plus_num (OPTIMIZED OUT) */ assert(yyruleno!=382, "yyruleno!=382")
		/* (383) nmnum ::= nm (OPTIMIZED OUT) */ assert(yyruleno!=383, "yyruleno!=383")
		/* (384) nmnum ::= ON */ yytestcase(yyruleno == 384)
		/* (385) nmnum ::= DELETE */ yytestcase(yyruleno == 385)
		/* (386) nmnum ::= DEFAULT */ yytestcase(yyruleno == 386)
		/* (387) plus_num ::= INTEGER|FLOAT */ yytestcase(yyruleno == 387)
		/* (388) foreach_clause ::= */ yytestcase(yyruleno == 388)
		/* (389) foreach_clause ::= FOR EACH ROW */ yytestcase(yyruleno == 389)
		/* (390) trnm ::= nm */ yytestcase(yyruleno == 390)
		/* (391) tridxby ::= */ yytestcase(yyruleno == 391)
		/* (392) database_kw_opt ::= DATABASE */ yytestcase(yyruleno == 392)
		/* (393) database_kw_opt ::= */ yytestcase(yyruleno == 393)
		/* (394) kwcolumn_opt ::= */ yytestcase(yyruleno == 394)
		/* (395) kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno == 395)
		/* (396) vtabarglist ::= vtabarg */ yytestcase(yyruleno == 396)
		/* (397) vtabarglist ::= vtabarglist COMMA vtabarg */ yytestcase(yyruleno == 397)
		/* (398) vtabarg ::= vtabarg vtabargtoken */ yytestcase(yyruleno == 398)
		/* (399) anylist ::= */ yytestcase(yyruleno == 399)
		/* (400) anylist ::= anylist LP anylist RP */ yytestcase(yyruleno == 400)
		/* (401) anylist ::= anylist ANY */ yytestcase(yyruleno == 401)
		/* (402) with ::= */ yytestcase(yyruleno == 402)
		break
		/********** End reduce actions ************************************************/
	}
	assert(int(yyruleno) < len(yyRuleInfoLhs), "yyruleno < len(yyRuleInfoLhs)")
	yygoto = yyRuleInfoLhs[yyruleno]
	yysize = int(yyRuleInfoNRhs[yyruleno])
	yyact = yy_find_reduce_action(yypParser.yystack[yymsp+yysize].stateno, yygoto)

	/* There are no SHIFTREDUCE actions on nonterminals because the table
	 ** generator has simplified them to pure REDUCE actions. */
	assert(!(yyact > YY_MAX_SHIFT && yyact <= YY_MAX_SHIFTREDUCE),
		"!(yyact > YY_MAX_SHIFT && yyact <= YY_MAX_SHIFTREDUCE)")

	/* It is not possible for a REDUCE to be followed by an error */
	assert(yyact != YY_ERROR_ACTION, "yyact != YY_ERROR_ACTION")

	yymsp += yysize+1
	yypParser.yytos = yymsp
	yypParser.yystack[yymsp].stateno = yyact
	yypParser.yystack[yymsp].major = yygoto
	yypParser.yyTraceShift(int(yyact), "... then shift")
	return yyact
}

/*
** The following code executes when the parse fails
 */
func (yypParser *yyParser) yy_parse_failed() {
	
	pParse := yypParser.pParse; _ = pParse

	if !NDEBUG {
		if yyTraceFILE != nil {
			fmt.Fprintf(yyTraceFILE, "%sFail!\n", yyTracePrompt)
		}
	}
	for yypParser.yytos > 0 {
		yypParser.yy_pop_parser_stack()
	}
	/* Here code is inserted which will be executed whenever the
	 ** parser fails */
	/************ Begin %parse_failure code ***************************************/

	/************ End %parse_failure code *****************************************/
	 /* Suppress warning about unused %extra_argument variable */
	yypParser.pParse=pParse

}

/*
** The following code executes when a syntax error first occurs.
 */
func (yypParser *yyParser) yy_syntax_error(
	yymajor YYCODETYPE, /* The major type of the error token */
	yyminor sqlite3ParserTOKENTYPE, /* The minor type of the error token */
) {
	
	pParse := yypParser.pParse; _ = pParse

	TOKEN := yyminor
	_ = TOKEN
	/************ Begin %syntax_error code ****************************************/
//line 39 "parse.y"

  UNUSED_PARAMETER(yymajor);  /* Silence some compiler warnings */
  if( TOKEN.z[0] ){
    sqlite3ErrorMsg(pParse, "near \"%T\": syntax error", &TOKEN);
  }else{
    sqlite3ErrorMsg(pParse, "incomplete input");
  }
//line 5827 "parse.go"

	/************ End %syntax_error code ******************************************/
	 /* Suppress warning about unused %extra_argument variable */
	yypParser.pParse=pParse

}

/*
** The following is executed when the parser accepts
 */
func (yypParser *yyParser) yy_accept() {
	
	pParse := yypParser.pParse; _ = pParse

	if !NDEBUG {
		if yyTraceFILE != nil {
			fmt.Fprintf(yyTraceFILE, "%sAccept!\n", yyTracePrompt)
		}
	}
	if !YYNOERRORRECOVERY {
		yypParser.yyerrcnt = -1
	}
	assert(yypParser.yytos==0, fmt.Sprintf("want yypParser.yytos == 0; got %d", yypParser.yytos))
	/* Here code is inserted which will be executed whenever the
	 ** parser accepts */
	/*********** Begin %parse_accept code *****************************************/

	/*********** End %parse_accept code *******************************************/
	 /* Suppress warning about unused %extra_argument variable */
	yypParser.pParse=pParse

}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3ParserAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
 */
func (yypParser *yyParser) sqlite3Parser(
	yymajor YYCODETYPE, /* The major token code number */
	yyminor sqlite3ParserTOKENTYPE, /* The value for the token */
	/* Optional %extra_argument parameter */
) {
	var (
		yyminorunion YYMINORTYPE
		yyact        YYACTIONTYPE /* The parser action. */
		yyendofinput bool         /* True if we are at the end of input */
		yyerrorhit   bool         /* True if yymajor has invoked an error */
	)

	pParse := yypParser.pParse; _ = pParse

	

	assert(yypParser.yystack != nil, "yypParser.yystack != nil")
	if YYERRORSYMBOL == 0 && !YYNOERRORRECOVERY {
		yyendofinput = (yymajor == 0)
	}

	yyact = yypParser.yystack[yypParser.yytos].stateno
	if !NDEBUG {
		if yyTraceFILE != nil {
			if yyact < YY_MIN_REDUCE {
				fmt.Fprintf(yyTraceFILE, "%sInput '%s' in state %d\n",
					yyTracePrompt, yyTokenName[yymajor], yyact)
			} else {
				fmt.Fprintf(yyTraceFILE, "%sInput '%s' with pending reduce %d\n",
					yyTracePrompt, yyTokenName[yymajor], yyact-YY_MIN_REDUCE)
			}
		}
	}

	for { /* Exit by "break" */
		assert(yypParser.yytos >= 0, "yypParser.yytos >= 0")
		assert(yyact == yypParser.yystack[yypParser.yytos].stateno, "yyact == yypParser.yystack[yypParser.yytos].stateno")
		yyact = yy_find_shift_action(yymajor, yyact)
		if yyact >= YY_MIN_REDUCE {
			yyruleno := yyact - YY_MIN_REDUCE /* Reduce by this rule */
			if !NDEBUG {
				assert(int(yyruleno) < len(yyRuleName), "int(yyruleno) < len(yyRuleName)")
				if yyTraceFILE != nil {
					yysize := yyRuleInfoNRhs[yyruleno]
					wea := " without external action"
					if yyruleno < YYNRULE_WITH_ACTION {
						wea = ""
					}
					if yysize != 0 {
						fmt.Fprintf(yyTraceFILE, "%sReduce %d [%s]%s, pop back to state %d.\n",
							yyTracePrompt,
							yyruleno, yyRuleName[yyruleno],
							wea,
							yypParser.yystack[yypParser.yytos+int(yysize)].stateno)
					} else {
						fmt.Fprintf(yyTraceFILE, "%sReduce %d [%s]%s.\n",
							yyTracePrompt, yyruleno, yyRuleName[yyruleno],
							wea)
					}
				}
			} /* NDEBUG */

			/* Check that the stack is large enough to grow by a single entry
			 ** if the RHS of the rule is empty.  This ensures that there is room
			 ** enough on the stack to push the LHS value */
			if yyRuleInfoNRhs[yyruleno] == 0 {
				if YYTRACKMAXSTACKDEPTH {
					if yypParser.yytos > yypParser.yyhwm {
						yypParser.yyhwm++
						assert(yypParser.yyhwm == yypParser.yytos, "yypParser.yyhwm == yypParser.yytos")
					}
				}
				if YYSTACKDEPTH > 0 {
					if yypParser.yytos >= YYSTACKDEPTH-1 {
						yypParser.yyStackOverflow()
						break
					}
				} else {
					if yypParser.yytos+1 >= len(yypParser.yystack)-1 {
						yypParser.yyGrowStack()
					}
				}
			}
			yyact = yypParser.yy_reduce(yyruleno, yymajor, yyminor,
			pParse)
		} else if yyact <= YY_MAX_SHIFTREDUCE {
			yypParser.yy_shift(yyact, yymajor, yyminor)
			if !YYNOERRORRECOVERY {
				yypParser.yyerrcnt--
			}
			break
		} else if yyact == YY_ACCEPT_ACTION {
			yypParser.yytos--
			yypParser.yy_accept()
			return
		} else {
			assert(yyact == YY_ERROR_ACTION, "yyact == YY_ERROR_ACTION")
			yyminorunion.yy0 = yyminor

			if !NDEBUG {
				if yyTraceFILE != nil {
					fmt.Fprintf(yyTraceFILE, "%sSyntax Error!\n", yyTracePrompt)
				}
			}
			if YYERRORSYMBOL > 0 {
				/* A syntax error has occurred.
				 ** The response to an error depends upon whether or not the
				 ** grammar defines an error token "ERROR".
				 **
				 ** This is what we do if the grammar does define ERROR:
				 **
				 **  * Call the %syntax_error function.
				 **
				 **  * Begin popping the stack until we enter a state where
				 **    it is legal to shift the error symbol, then shift
				 **    the error symbol.
				 **
				 **  * Set the error count to three.
				 **
				 **  * Begin accepting and shifting new tokens.  No new error
				 **    processing will occur until three tokens have been
				 **    shifted successfully.
				 **
				 */
				if yypParser.yyerrcnt < 0 {
					yypParser.yy_syntax_error(yymajor, yyminor)
				}
				yymx := yypParser.yystack[yypParser.yytos].major
				if int(yymx) == YYERRORSYMBOL || yyerrorhit {
					if !NDEBUG {
						if yyTraceFILE != nil {
							fmt.Fprintf(yyTraceFILE, "%sDiscard input token %s\n",
								yyTracePrompt, yyTokenName[yymajor])
						}
					}
					yypParser.yy_destructor(yymajor, &yyminorunion)
					yymajor = YYNOCODE
				} else {
					for yypParser.yytos > 0 {
						yyact = yy_find_reduce_action(yypParser.yystack[yypParser.yytos].stateno,
							YYERRORSYMBOL)
						if yyact <= YY_MAX_SHIFTREDUCE {
							break
						}
						yypParser.yy_pop_parser_stack()
					}
					if yypParser.yytos <= 0 || yymajor == 0 {
						yypParser.yy_destructor(yymajor, &yyminorunion)
						yypParser.yy_parse_failed()
						if !YYNOERRORRECOVERY {
							yypParser.yyerrcnt = -1
						}
						yymajor = YYNOCODE
					} else if yymx != YYERRORSYMBOL {
						yypParser.yy_shift(yyact, YYERRORSYMBOL, yyminor)
					}
				}
				yypParser.yyerrcnt = 3
				yyerrorhit = true
				if yymajor == YYNOCODE {
					break
				}
				yyact = yypParser.yystack[yypParser.yytos].stateno
			} else if YYNOERRORRECOVERY {
				/* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
				 ** do any kind of error recovery.  Instead, simply invoke the syntax
				 ** error routine and continue going as if nothing had happened.
				 **
				 ** Applications can set this macro (for example inside %include) if
				 ** they intend to abandon the parse upon the first syntax error seen.
				 */
				yypParser.yy_syntax_error(yymajor, yyminor)
				yypParser.yy_destructor(yymajor, &yyminorunion)
				break
			} else { /* YYERRORSYMBOL is not defined */
				/* This is what we do if the grammar does not define ERROR:
				 **
				 **  * Report an error message, and throw away the input token.
				 **
				 **  * If the input token is $, then fail the parse.
				 **
				 ** As before, subsequent error messages are suppressed until
				 ** three input tokens have been successfully shifted.
				 */
				if yypParser.yyerrcnt <= 0 {
					yypParser.yy_syntax_error(yymajor, yyminor)
				}
				yypParser.yyerrcnt = 3
				yypParser.yy_destructor(yymajor, &yyminorunion)
				if yyendofinput {
					yypParser.yy_parse_failed()
					if !YYNOERRORRECOVERY {
						yypParser.yyerrcnt = -1
					}
				}
				break
			}
		}
	}
	if !NDEBUG {
		if yyTraceFILE != nil {
			cDiv := '['
			fmt.Fprintf(yyTraceFILE, "%sReturn. Stack=", yyTracePrompt)
			for _, i := range yypParser.yystack[1:yypParser.yytos+1] {
				fmt.Fprintf(yyTraceFILE, "%c%s", cDiv, yyTokenName[i.major])
				cDiv = ' '
			}
			fmt.Fprintf(yyTraceFILE, "]\n")
		}
	}
	return
}

/*
** Return the fallback token corresponding to canonical token iToken, or
** 0 if iToken has no fallback.
 */
func sqlite3ParserFallback(iToken int) YYCODETYPE {
	if YYFALLBACK {
		assert(iToken < len(yyFallback), "iToken < len(yyFallback)")
		return yyFallback[iToken]
	} else {
		return 0
	}
}

// assert is used in various places in the generated and template code
// to check invariants.
func assert(condition bool, message string) {
	if !condition {
		panic(message)
	}
}
